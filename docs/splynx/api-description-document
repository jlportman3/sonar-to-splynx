FORMAT: 1A
HOST: http://demo.splynx.com/api/2.0/

# Splynx API v2.0
The Splynx API v2.0.
We follow the RESTful principles, so the API is stateless and http methods and response codes are used whenever possible.

The url for the requests is: `http://WEB_PATH_TO_YOUR_SPLYNX/api/2.0/`

## Examples
Examples can be found [here](https://bitbucket.org/splynx/splynx-php-api/src/master/examples/)

## Create an API Key
Check [documentation](https://docs.splynx.com/administration/main/api_keys) about creating an API key. **Note**: don't forget to set permissions for created key!

## Authentication
We supports three different type of authentication.

1. **Basic authentication** - [Simple unsecure authentication type](#introduction/authentication/basic-authentication)
2. **By signature** - [Authentication by signature (Like in API v1)](#introduction/authentication/by-signature)
3. **Access token** - [By access token](#introduction/authentication/by-access-token)

### Basic authentication
A request should be contains a header field in the form of `Authorization: Basic <credentials>`, where `credentials` is the base64 encoding of api key and api secret joined by a single colon `:`. See more information in wikipedia: https://en.wikipedia.org/wiki/Basic_access_authentication.

##### Attention
For use this type of authentication you should be also enable **Unsecure access** in your API key settings!

### By signature
A request should be contains a header field in the form of `Authorization: Splynx-EA (key=<key>&nonce=<nonce>&signature=<signature>)`, where:

* `key` - your API key
* `nonce` - Unique id of the request (Basically is a timestamp)
* `signature` - Generated signature by API key and secret.

##### How to generate signature in PHP:

```#!php
<?php
$api_key = 'API_KEY';
$api_secret = 'API_SECRET';

$nonce = round(microtime(true) * 100);

$signature = strtoupper(hash_hmac('sha256', $nonce . $api_key, $api_secret));

$auth_data = array(
    'key' => $api_key,
    'signature' => $signature,
    'nonce' => $nonce++
);

$auth_string = http_build_query($auth_data);

$header = 'Authorization: Splynx-EA (' . $auth_string . ')';

```

### By Access token
Authorized requests should be passing an access token inside the `Authorization` header.
Access tokens are used for authenticate requests and storing additional info about an user.
Each token has expiration time of 30 minutes.
To generate access token you need to send a request to `/api/2.0/admin/auth/tokens`.

#### Workflow
1. Generating access token.
2. Checking if token expired and if expired then renew token.
3. Sending authorized requests.

#### Generating access token
For generate access token send a request to `/api/2.0/admin/auth/tokens` with authentication data in request body.
Request body should be contain `auth_type` field and other required fields according to `auth_type`.
For example you can authenticate like a administrator or customer.

##### List of authentication types
- `admin` Authenticate like a administrator. Required fields: `login`, `password`. If 2fa is enabled then need also send `code` or `fingerprint`. You can send `fingerprint` instead of `code` if your device has been marked as "trusted" (See [Trusted devices](#reference/auth/trusted-devices-collection/create-a-trusted-device)).
- `customer` Authenticate like a customer. Required fields: `login`, `password`.
- `api_key` Authenticate by API key. Required fields: `key`, `signature`, `nonce`.
    `nonce` it's a current timestamp in seconds.
    Example of generating signature on PHP:
    ```
    $nonce = time();
    $hash = hash_hmac('sha256', $nonce . 'YOUR_API_KEY', 'YOU_API_SECRET');
    $signature = strtoupper($hash);
    ```
- `session` Authenticate by user session id. User it's an administrator or customer. Required field: `session`.

##### Generating access token example
This example shows request for getting access token by administrator info.
Detailed description of this request can be found here: [Generate acess token](#reference/auth/tokens/generate-access-token).

```
POST /api/2.0/admin/auth/tokens
{
    "auth_type": "admin",
    "login": "splynx",
    "password": "q1w2e3"
}


RESPONSE:
{
    "access_token": "2dbf3280cf9sb3b8a7c15201c76b9s1",
    "access_token_expiration": 1542493076,
    "refresh_token": "caebf3980cf9fb3b8c7c15501c77b980",
    "refresh_token_expiration": 1578673076,
    "permissions": []
}
```

#### Checking token expiration
In the response of generating token request you can found the field `access_token_expiration`.
It's a timestamp when token will be expired. Before each request need check token expiration time and if token has expired then need renew this token.
Example of how you can check token expiration:
```
if (time() + 5 > $access_token_expiration) {
    renewToken(); // Renewing a token
}

// All fine, send our authorized requests
sendYourRequests();
```

#### Renewing a token
Renewing a token extend the duration of the token. Example:
```
GET `/api/2.0/admin/auth/tokens/YOUR_REFRESH_TOKEN`

RESPONSE:
{
    "access_token": "2dbf3280cf9sb3b8a7c15201c76b9s1",
    "access_token_expiration": 1542493076,
    "refresh_token": "caebf3980cf9fb3b8c7c15501c77b980",
    "refresh_token_expiration": 1578673076
}
```

Response contains information about new token. You need to store this information for future using.


#### Sending authorized requests
After generating access token you can send authorized requests to API.
For this any request should be passing an access token inside the `Authorization` header.

##### Example of Authorization header:
```
Authorization: Splynx-EA (access_token=YOUR_ACCESS_TOKEN)
```

## Media Types
This API use JSON format to represent resources.

## Response codes
The common [HTTP Response Status Codes](https://github.com/for-GET/know-your-http-well/blob/master/status-codes.md) are used.

### Successful codes
- 200 (OK, GET and HEAD methods) - Use for get list objects (or retrieve one object).
- 201 (Created, POST method) - Use for create object
- 202 (Accepted, PUT method) - Use for update object
- 204 (No content, DELETE method) - Use for delete object

### Error handling
There will be errors when working with the API, and they must be correctly handled on the client.
Structure of an error response:
```
{
    "error": {
        "message": "Method is disabled!",
        "code": 405,
        "internal_code": "METHOD_DISABLED",
    }
}
```
An error is characterized by several parameters:

#### Message `message`
A string that provide description about an error.

#### HTTP error code `code`
Numerical value similar to HTTP status:
- 400 (Bad request) - Your request can't process by server.
- 401 (Unauthorized) - When you did not specify a valid authorization access token.
- 403 (Forbidden) - When you dont have permission to do action.
- 404 (Not Found) - Requested entity not found.
- 405 (Method Not Allowed) - Calling method is not allowed or you cant do action with object because object belongs to another partner (for example).
- 500 (Internal Server Error) - When a request throws an unexpected error.

#### Internal error code `internal_code`
A string literal in the form of ```/[A-Z_0-9]+/```, which summarizes the problem. For example, `MISSED_AUTHORIZATION_HEADER`.

Full list of error codes:
* `BAD_REQUEST` - Your request can't process by server.
* `UNAUTHORIZED` - You did not specify a valid authorization access token.
* `FORBIDDEN` - You dont have permission to do action.
* `NOT_FOUND` - Requested entity not found.
* `METHOD_NOT_ALLOWED` - Calling method is not allowed.
* `SERVER_ERROR` - A request throws an unexpected error.
* `INVALID_INPUT_DATA` - Input data is invalid. For example required parameter is missing etc.
* `NOT_ALLOWED_BY_PARTNER_RESTRICTION` - Work with an entity not allowed by partners restrictions.
* `NOT_ALLOWED_BY_USER_RESTRICTION` - Work with an entity not allowed by users restrictions. For example when an user try to get sensitive information about another user.
* `METHOD_DISABLED` - A method is disabled for this API entry point.
* `INVALID_TWO_FACTOR_CODE` - Two factor `code` or `fingerprint` is invalid.
* `MISSED_TWO_FACTOR_CODE` - Required two factor `code` or `fingerprint` is missed.
* `EMPTY_ACCESS_TOKEN` - Access token is missed.
* `EXPIRED_ACCESS_TOKEN` - Access token expired.
* `EXPIRED_REFRESH_TOKEN` - Refresh token expired.
* `TOKEN_BANNED` - Token has been banned by server.
* `MISSED_AUTHORIZATION_HEADER` - Required authorization header is missed ([see authentication section](#introduction/authentication)).
* `INVALID_SASH` - Invalid Splynx admin session hash.
* `INVALID_AUTH_TYPE` - Invalid authentication type.
* `INVALID_USER` - Generate token by session_id failed becouse of session user is not supported in API.
* `USER_AGENT_CHANGED` - Trying make request with changed user agent. Generating token and making requests should be use the same user agent.
* `IP_CHANGED` - Trying make request from unknown IP. Generating token and making requests should be do from the same IP address.
* `RESET_PASSWORD_DISABLED` - Resetting customer passwords is disabled in config.
* `RESET_PASSWORD_CODE_INVALID` - Verification code of resetting password is invalid.
* `RESET_PASSWORD_FAIL` - Resetting customer password failed.
* `EXCEEDED_MAX_ATTEMPTS` - Exceeded max attempts of resetting customer password.
* `ENTITY_CANNOT_BE_DELETED` - Selected entity cannot be deleted .

## Search, order, limit, and offset
You use this options to improve work with API (all of it or any)

Example:
```#!php
<?php

$params = [
    'main_attributes' => [
        'login' => ['LIKE', 'durden'],
        'partner_id' => ['BETWEEN', 1, 10],
        'date_add' => date('Y-m-d'),
        'added_by' => 'api',
    ],
    'additional_attributes' => [
        'sex' => ['IN', ['male', 'female']],
    ],
    'order' => [
        'id' => 'DESC',
    ],
    'limit' => 10,
    'offset' => 20,
];

$apiUrl = 'admin/customers/customer' . '?' . http_build_query($params);

```

Attention, for IP addresses please use next search example:

```#!php
<?php

$params = [
    'main_attributes' => [
        'ipv4' => inet_pton('172.16.2.254'),
    ],
    'limit' => 100,
];

$apiUrl = 'admin/customers/customer-statistics' . '?' . http_build_query($params);
$apiUrlOnline = 'admin/customers/customers-online' . '?' . http_build_query($params);

```

All operators list:
- '='
- '!='
- '>='
- '<='
- '>'
- '<'
- '<>'
- 'IS'
- 'REGEXP'
- 'BETWEEN'
- 'LIKE'
- 'IN'
- 'FIND_IN_SET'

## Additional fields

For most models there are additional fields in the "additional_attributes" array from response. Example:

```#!php
{
    'id' => '1',
    'partner_id' => '1',
    'location_id' => '1',
    'added_by' => 'admin',
    'added_by_id' => '0',
    'login' => 'redis',
    'category' => 'person',
    'name' => 'Jacques Rice',
    'email' => 'jfarrell@gmail.com',
    'billing_email' => '',
    'phone' => '+9410978741579',
    'street_1' => '5500 Aniyah DaleLake Hectorborough, IL 66290-3855',
    'zip_code' => '63572',
    'city' => 'Farrellmouth',
    'additional_attributes' =>
    {
        'account_holderid' => '',
        'aesi_branch' => '',
        'aesi_country' => '',
        'alternative_contactno' => '',
        'alternative_contactperson' => '',
        'booooll' => '0',
    }
}
```

The additional fields can be updated. To do this you should pass parameters with the "additional_attributes" array, in which you should specify the field name to update. Example:

```#!php
<?php

$params = [
    'additional_attributes' => [
        'aesi_branch' => 'test text',
    ],
];

$apiUrl = 'admin/customers/customer/1' . '?' . http_build_query($params);

```

You can also use filter options when search by additional fields: search....

```#!php
<?php

$params = [
    'additional_attributes' => [
        'sex' => ['IN', ['male', 'female']],
    ],
    'order' => [
        'id' => 'DESC',
    ],
    'limit' => 10,
    'offset' => 20,
];

$apiUrl = 'admin/customers/customer' . '?' . http_build_query($params)
```
## How to upload files

###Main Rules
1. The maximum file size that can be sent to the server is 20Mb.
2. To send a file, a POST request must be sent with the header **Content-Type: multipart/form-data** specified, the file name and type in MIMI format passed, and the file contents transmitted in encoded format.<br> Multiple files can be sent in a single request.
3. The following types of files can be sent to the server:
    + images (.jpg, .png, .gif)
    + pdf files, archives (.zip, .rar, .tar)
    + Word and Openoffice documents
    + text files
    + audio files (.mp3, .wav, .midi)
    + video files (.mp4, .avi, .3gpp, .mkv)

        [All allowed types](#introduction/how-to-upload-files/allowed-files-types)

### Examples
Here is an examples of how to send files to ticket message by ticket message ID

[How to upload files using PHP](https://bitbucket.org/splynx/splynx-php-api/src/master/examples/v2_upload_file_by_php.php)

[How to upload files using Python](https://bitbucket.org/splynx/splynx-php-api/src/master/examples/v2_upload_file_by_python.py)

[How to upload files using Go](https://bitbucket.org/splynx/splynx-php-api/src/master/examples/v2_upload_file_by_go.go)

### Allowed files types
| **PDF files** |
| ------- |
|application/pdf|

| **Text** |
| ------- |
|text/plain|
|text/csv|
|text/x-csv|
|inode/x-empty|
|text/html|
|text/css|

| **Images** |
| ------- |
|image/png|
|image/gif|
|image/jpeg|
|image/heic|

| **Archives** |
| ------- |
|application/x-compress|
|application/zip|
|application/x-zip-compressed|
|application/x-rar|
|application/x-rar-compressed|
|application/vnd.rar|
|application/x-tar|
|application/x-7z-compressed|
|application/x-lzma|

| **Word documents** |
| ------- |
|application/msword|
|application/vnd.ms-excel|
|application/vnd.openxmlformats-officedocument.spreadsheetml.sheet|
|application/vnd.openxmlformats-officedocument.wordprocessingml.document|
|application/vnd.openxmlformats-officedocument.wordprocessingml.template|
|application/vnd.ms-word.document.macroEnabled.12|
|application/vnd.ms-word.template.macroEnabled.12|
|application/vnd.openxmlformats-officedocument.spreadsheetml.template|
|application/vnd.ms-excel.sheet.macroEnabled.12|
|application/vnd.ms-excel.template.macroEnabled.12|
|application/vnd.ms-excel.addin.macroEnabled.12|
|application/vnd.ms-excel.sheet.binary.macroEnabled.12|
|application/vnd.ms-powerpoint|
|application/vnd.openxmlformats-officedocument.presentationml.presentation|
|application/vnd.openxmlformats-officedocument.presentationml.template|
|application/vnd.openxmlformats-officedocument.presentationml.slideshow|
|application/vnd.ms-powerpoint.addin.macroEnabled.12|
|application/vnd.ms-powerpoint.presentation.macroEnabled.12|
|application/vnd.ms-powerpoint.template.macroEnabled.12|
|application/vnd.ms-powerpoint.slideshow.macroEnabled.12|
|application/vnd.ms-access|
|application/vnd.ms-office|
|application/xml|
|text/xml|

| **Google docs** |
| ------- |
|application/vnd.openxmlformats-officedocument.wordprocessingml.documentapplication/vnd.openxmlformats-officedocument.wordprocessingml.document|
|application/vnd.openxmlformats-officedocument.spreadsheetml.sheetapplication/vnd.openxmlformats-officedocument.spreadsheetml.sheet|

| **Other documents** |
| ------- |
|application/CDFV2|

| **Openoffice documents** |
| ------- |
|application/vnd.oasis.opendocument.text|
|application/vnd.oasis.opendocument.text-template|
|application/vnd.oasis.opendocument.text-web|
|application/vnd.oasis.opendocument.text-master|
|application/vnd.oasis.opendocument.graphics|
|application/vnd.oasis.opendocument.graphics-template|
|application/vnd.oasis.opendocument.presentation|
|application/vnd.oasis.opendocument.presentation-template|
|application/vnd.oasis.opendocument.spreadsheet|
|application/vnd.oasis.opendocument.spreadsheet-template|
|application/vnd.oasis.opendocument.chart|
|application/vnd.oasis.opendocument.formula|
|application/vnd.oasis.opendocument.database|
|application/vnd.oasis.opendocument.image|
|application/vnd.openofficeorg.extension|
|application/octet-stream|

| **Audio** |
| ------- |
|audio/ac3|
|audio/basic|
|audio/midi|
|audio/mpeg|
|audio/prs.sid|
|audio/vnd.rn-realaudio|
|audio/x-aac|
|audio/x-adpcm|
|audio/x-aifc|
|audio/x-aiff|
|audio/x-aiff|
|audio/x-aiffc|
|audio/x-flac|
|audio/x-m4a|
|audio/x-mod|
|audio/x-mp3-playlist|
|audio/x-mpeg|
|audio/x-mpegurl|
|audio/x-ms-asx|
|audio/x-pn-realaudio|
|audio/x-pn-realaudio|
|audio/x-riff|
|audio/x-s3m|
|audio/x-scpls|
|audio/x-scpls|
|audio/x-stm|
|audio/x-voc|
|audio/x-wav|
|audio/x-xi|
|audio/x-xmxm|
|audio/mpeg3|
|audio/x-mpeg-3|

| **Video** |
| ------- |
|video/3gpp|
|video/dv|
|video/isivideo|
|video/mpeg|
|video/quicktime|
|video/vivo|
|video/vnd.rn-realvideo|
|video/wavelet|
|video/x-3gpp2|
|video/x-anim|
|video/x-avi|
|video/x-flic|
|video/x-mng|
|video/x-ms-asf|
|video/x-ms-wmv|
|video/x-msvideo|
|video/x-nsv|
|video/x-real-video|
|video/x-sgi-movie|
|video/webm|
|video/mp4|
|video/mpeg|
|video/x-mpeg|
|video/x-matroska|

# Group Base requests

## Base requests for many of endpoints [/example/entity/endpoint]
This requests available for many of endpoints. Don't forget to replace example endpoint `/example/entity/endpoint` to what you need.

### Get attributes of an entity [OPTIONS]
Get attributes list of an entity.

+ Response 200 (application/json)
    + Attributes (array[Base options response, Base options with AFs response])

### Get amount of entities [HEAD]
Get amount of entities. You can use search params.

+ Response 204 (application/json)
    + Headers

            Access-Control-Expose-Headers: X-total-count
            X-total-count: 12

# Group Auth

## Tokens [/admin/auth/tokens]
Work with tokens.

### Generate access token [POST /admin/auth/tokens]
Generate new access token by authentication data.


**Attention**

When `auth_type` is `admin` and two-factor authentication is enabled you should pass one of these attributes: `code` or `fingerprint`. You can check two-factor authentication status with [this request](#reference/auth/two-factor-authentication/check-status).


**Required attributes by authentication type:**

|             | admin | customer | api_key | session |
|-------------|:-----:|:--------:|:-------:|:-------:|
| login       |   +   |     +    |         |         |
| password    |   +   |     +    |         |         |
| key         |       |          |    +    |         |
| signature   |       |          |    +    |         |
| nonce       |       |          |    +    |         |
| session_id  |       |          |         |    +    |
| code        |   *   |          |         |         |
| fingerprint |   *   |          |         |         |


Labels description:
* `+` Always required.
* `*` One of these attributes is required when two-factor authentication is enabled.

#### Possible errors
* `INVALID_TWO_FACTOR_CODE` - Invalid two-factor `code` or `fingerprint`.
* `MISSED_TWO_FACTOR_CODE` - Missed required two-factor `code` or `fingerprint`.
* `INVALID_AUTH_TYPE` - Invalid authentication type. Allowed types: `admin`, `customer`, `api_key` or `session`.

+ Request (application/json)
    + Attributes (Token request data)

+ Response 201 (application/json)
    + Attributes (Token generate response)

### Renew token [GET /admin/auth/tokens/{token}]
Renew expired access token.

#### Possible errors
* `NOT_FOUND` - Refresh token not found.
* `EXPIRED_REFRESH_TOKEN` - Refresh token expired.
* `TOKEN_BANNED` - Refresh token banned by server.
* `USER_AGENT_CHANGED` - Trying make request with changed user agent. Generating token and making requests should be use the same user agent.
* `IP_CHANGED` - Trying make request from unknown IP. Generating token and making requests should be do from the same IP address.

+ Parameters
    + token (required, string, `2dbf3280cf9sb3b8a7c15201c76b9s1`) ... The token string.

+ Response 200 (application/json)
    + Attributes (Token renew response)

### Delete token [DELETE /admin/auth/tokens/{token}]
Delete existing token.

+ Parameters
    + token (required, string, `2dbf3280cf9sb3b8a7c15201c76b9s1`) ... The token string.

+ Response 204


## Trusted devices collection [/admin/auth/trusted-devices]

### Create a Trusted device [POST]
Creates a new Trusted device. This functionality available only if two-factor authentication is enabled.
You can remind a user device after login and during next login you can pass stored fingerprint for login without two-factor code (only for admins authentication).

+ Request (application/json)
    + Attributes (Trusted device Base)

+ Response 201 (application/json)
    + Attributes (Trusted device Id)

### List all Trusted devices [GET]
Returns a list of your Trusted devices.

+ Response 200 (application/json)
    + Attributes (array[Trusted device Response])

## Trusted device [/admin/auth/trusted-devices/{id}]
Work with Trusted device.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Trusted device.

### Retrieve a Trusted device [GET]
Retrieves the Trusted device with the given ID.

+ Response 200 (application/json)
    + Attributes (Trusted device Response)

### Delete a Trusted device [DELETE]
Delete the Trusted device with the given ID.

+ Response 204

## Two-factor authentication [/admin/auth/two-factor-status]
Work with two-factor authentication.

### Check status [POST]
Check if two-factor authentication is enabled.
+ Request (application/json)
    + Attributes (Two factor Request)

+ Response 201 (application/json)
    + Attributes (Two factor Response)


## Sessions [/admin/auth/sessions]
Work with Splynx sessions.

### Create session [POST]
Create new PHP session by current API user.
+ Request (application/json)
    + Headers

            Authorization: Splynx-EA (access_token=YOUR_ACCESS_TOKEN)

+ Response 201 (application/json)
    + Attributes (Create session response)

# Group Api

## Check [/admin/api/check?code={code}&checkAuth={checkAuth}]

### API Check [GET]
Check if the API is working

+ Parameters
    + code (optional, string, `64b1b5d42156bfc00435e868bb4e62c1`) ... The server verification code is used by redis to verify compliance
    + checkAuth (optional, boolean, `false`) ... Parameter to determine whether to check the API keys

+ Response 200 (application/json)
    + Attributes (Check response)

# Data Structures

## Check response (object)
+ status: `ok` (string) - Request status
+ message: `API is valid` (string) - Request message
+ same_server: `false` (boolean) - The result of checking the `code` parameter if it was passed, otherwise false

# Group Dashboard

## Admin [/admin/dashboard/dashboard]
Work with admin dashboard widgets.

### Get widgets list [OPTIONS]
Get enabled admin dashboard widgets list.

+ Response 200 (application/json)
    + Attributes (array[Dashboard options response])

### Get widgets info [GET]
Get admin dashboard widgets info.

+ Response 200 (application/json)
    + Attributes (array[Dashboard response])


## Portal [/portal/dashboard/dashboard]
Work with portal dashboard widgets.

### Get widgets list [OPTIONS]
Get enabled portal dashboard widgets list.

+ Response 200 (application/json)
    + Attributes (array[Dashboard options response])

### Get widgets info [GET]
Get portal dashboard widgets info.

+ Response 200 (application/json)
    + Attributes (array[Dashboard response])

# Group Login

## Portal login [/portal/login/entry-points?render={render}]
Work with entry points placed on portal login page. Authorization is not required.

+ Parameters
    + render (required, number, `1`) ... Get rendered or raw code of entry points

### List all Entry points [GET]
Get all entry points placed on portal login page.

+ Response 200 (application/json)
    + Attributes (array[Entry point view response])

### Retrieve Entry point [GET /portal/login/entry-points?id={id}&render={render}]
Retrieves Entry point with the given ID.

+ Parameters
    + id (required, number, `121`) ... Entry point ID
    + render (required, number, `1`) ... Get rendered or raw code of entry points

+ Response 200 (application/json)
    + Attributes (Entry point view response)

### Get Entry points attributes [OPTIONS]
Get entry points attributes description.

+ Response 200 (application/json)
    + Attributes (array[Base options response])

# Group Tariffs

## Internet tariffs collection [/admin/tariffs/internet]

### Create Internet tariff [POST]
Creates new Internet tariff.

+ Request (application/json)
    + Attributes (Internet tariff Base)

+ Response 201 (application/json)
    + Attributes (Internet tariff Id)

### List all Internet tariffs [GET]
Returns list of your Internet tariffs.

+ Response 200 (application/json)
    + Attributes (array[Internet tariff list Response])

## Internet tariff [/admin/tariffs/internet/{id}]
Work with Internet tariff.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Internet tariff.

### Retrieve Internet tariff [GET]
Retrieves Internet tariff with the given ID.

+ Response 200 (application/json)
    + Attributes (Internet tariff Response)

### Update Internet tariff [PUT]
Update Internet tariff with the given ID.

+ Request (application/json)

        {
            "title": Omega
        }

+ Response 202 (application/json)

### Delete Internet tariff [DELETE]
Delete Internet tariff with the given ID.

+ Response 204

## Voice tariffs collection [/admin/tariffs/voice]

### Create Voice tariff [POST]
Creates new Voice tariff.

+ Request (application/json)
    + Attributes (Voice tariff Base)

+ Response 201 (application/json)
    + Attributes (Voice tariff Id)

### List all Voice tariffs [GET]
Returns list of your Voice tariffs.

+ Response 200 (application/json)
    + Attributes (array[Voice tariff Response])

## Voice tariff [/admin/tariffs/voice/{id}]
Work with Voice tariff.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Voice tariff.

### Retrieve Voice tariff [GET]
Retrieves Voice tariff with the given ID.

+ Response 200 (application/json)
    + Attributes (Voice tariff Response)

### Update Voice tariff [PUT]
Update Voice tariff with the given ID.

+ Request (application/json)

        {
            "title": Omega
        }

+ Response 202 (application/json)

### Delete Voice tariff [DELETE]
Delete Voice tariff with the given ID.

+ Response 204

## Recurring tariffs collection [/admin/tariffs/recurring]

### Create Recurring tariff [POST]
Creates new Recurring tariff.
+ Request (application/json)
    + Attributes (Recurring tariff Base)

+ Response 201 (application/json)
    + Attributes (Recurring tariff Id)

### List all Recurring tariffs [GET]
Returns list of your Recurring tariffs.

+ Response 200 (application/json)
    + Attributes (array[Recurring tariff Response])

## Recurring tariff [/admin/tariffs/recurring/{id}]
Work with Recurring tariff.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Recurring tariff.

### Retrieve Recurring tariff [GET]
Retrieves Recurring tariff with the given ID.

+ Response 200 (application/json)
    + Attributes (Recurring tariff Response)

### Update Recurring tariff [PUT]
Update Recurring tariff with the given ID.

+ Request (application/json)

        {
            "title": Omega
        }

+ Response 202 (application/json)

### Delete Recurring tariff [DELETE]
Delete Recurring tariff with the given ID.

+ Response 204

## Bundles tariffs collection [/admin/tariffs/bundle]

### Create Bundle tariff [POST]
Creates new Bundle tariff.

+ Request (application/json)
    + Attributes (Bundle tariff Base)

+ Response 201 (application/json)
    + Attributes (Bundle tariff Id)

### List all Bundle tariffs [GET]
Returns list of your Bundle tariffs.

+ Response 200 (application/json)
    + Attributes (array[Bundle tariff Response])

## Bundle tariff [/admin/tariffs/bundle/{id}]
Work with Bundle tariff.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Bundle tariff.

### Retrieve Bundle tariff [GET]
Retrieves Bundle tariff with the given ID.

+ Response 200 (application/json)
    + Attributes (Bundle tariff Response)

### Update Bundle tariff [PUT]
Update Bundle tariff with the given ID.

+ Request (application/json)

        {
            "title": New bundle tariff
        }

+ Response 202 (application/json)

### Delete Bundle tariff [DELETE]
Delete Bundle tariff with the given ID.

+ Response 204

## One-time tariffs collection [/admin/tariffs/one-time]

### Create One-time tariff [POST]
Creates new One-time tariff.

+ Request (application/json)
    + Attributes (One-time tariff Base)

+ Response 201 (application/json)
    + Attributes (One-time tariff Id)

### List all One-time tariffs [GET]
Returns list of your One-time tariffs.

+ Response 200 (application/json)
    + Attributes (array[One-time tariff Response])

## One-time tariff [/admin/tariffs/one-time/{id}]
Work with One-time tariff.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired One-time tariff.

### Retrieve One-time tariff [GET]
Retrieves One-time tariff with the given ID.

+ Response 200 (application/json)
    + Attributes (One-time tariff Response)

### Update One-time tariff [PUT]
Update One-time tariff with the given ID.

+ Request (application/json)

        {
            "title": Omega
        }

+ Response 202 (application/json)

### Delete One-time tariff [DELETE]
Delete One-time tariff with the given ID.

+ Response 204

## Change tariff [/admin/tariffs/change-tariff/{service_id}?type={service_type}]
Change tariff for service.

+ Parameters
    + service_id (required, number, `1`) ... The ID of the desired Service.
    + service_type (enum[string], required) - Service type.
        + Members
            + `internet` - Internet service type
            + `voice` - Voice service type
            + `custom` - Custom service type

### Retrieve tariffs for change [GET /admin/tariffs/tariffs-for-change?type={type}&id={tariff_id}]
Retrieves suitable tariffs list for change from source tariff.

+ Parameters
    + type (enum[string], required) - Tariff type
        + Members
            + `internet` - Internet tariff type
            + `voice` - Voice tariff type
            + `custom` - Custom tariff type
    + tariff_id (required, number, `2`) ... The ID of source tariff

+ Response 200 (application/json)
    + Attributes (array[Tariff for change response])

### Retrieve start date of new tariff [GET]
Retrieves the nearest possible start date of new tariff.

+ Response 200 (application/json)
    + Attributes (Change Tariff Get Response)

### Change tariff [PUT]
Change tariff for the given service.

+ Request (application/json)

        {
            "newTariffId": 1,
            "targetDate": "2019-02-09",
            "description": new description,
            "newServicePrice": 10.0000
        }

+ Response 202 (application/json)

# Group FUP

## FUP Counter collection [/admin/fup/counter]

### List all FUP Counters [GET]
Returns list of your FUP Counters

+ Response 200 (application/json)
    + Attributes (array[FUP Counter Response])

## FUP Counter [/admin/fup/counter/{service_id}]
Work with FUP Counter

+ Parameters
    + service_id (required, number, `1`) ... The service ID of the desired FUP Counter

### Retrieve FUP Counter [GET]
Retrieves FUP Counter with the given ID

+ Response 200 (application/json)
    + Attributes (FUP Counter Response)

### Update FUP Counter [PUT]
Update FUP Counter with the given ID

+ Request (application/json)

        {
            "day_up": 2154842512
        }

+ Response 202 (application/json)

## FUP Compiler collection [/admin/fup/compiler]

### List all FUP Compilers [GET]
Returns list of your FUP Compilers

+ Response 200 (application/json)
    + Attributes (array[FUP Compiler Response])

## FUP Compiler [/admin/fup/compiler/{service_id}]
Work with FUP Compiler

+ Parameters
    + service_id (required, number, `1`) ... The service ID of the desired FUP Compiler

### Retrieve FUP Compiler [GET]
Retrieves FUP Compiler with the given ID

+ Response 200 (application/json)
    + Attributes (FUP Compiler Response)

### Update FUP Compiler [PUT]
Update FUP Compiler with the given ID

+ Request (application/json)

        {
            "traffic_accounting": 0
        }

+ Response 202 (application/json)


## FUP Policies collection [/admin/fup/policies]

### List all FUP Policies [GET]
Returns list of your FUP Policies

+ Response 200 (application/json)
    + Attributes (array[FUP Policy Response])

## FUP Policy [/admin/fup/policies/{id}]
Work with FUP Policy.

+ Parameters
    + id (required, number, `1`) ... The service ID of the desired FUP Policy

### Retrieve FUP Policy [GET]
Retrieves FUP Policy with the given ID

+ Response 200 (application/json)
    + Attributes (FUP Policy Response)

### Update FUP Policy [PUT]
Update FUP Policy with the given ID

+ Request (application/json)

        {
            "name": "New FUP Policy"
        }

+ Response 202 (application/json)


## FUP Limits collection [/admin/fup/fup-limits]

### List all FUP Limits [GET]
Returns list of your FUP Limits

+ Response 200 (application/json)
    + Attributes (array[FUP Limit Response])

## FUP Limit [/admin/fup/fup-limits/{tariff_id}]
Work with FUP Limit.

+ Parameters
    + tariff_id (required, number, `1`) ... The Tariff ID of the desired FUP Limit

### Retrieve FUP Limit [GET]
Retrieves FUP Limit with the given Tariff ID

+ Response 200 (application/json)
    + Attributes (FUP Limit Response)

### Update FUP Limit [PUT]
Update FUP Limit with the given ID

+ Request (application/json)

        {
            "traffic_amount": "123"
        }

+ Response 202 (application/json)

## Traffic usage [/admin/fup/usage/{service_id}?with_texts={with_texts}]
Service traffic usage

+ Parameters
    + service_id (required, number, `151`) ... The internet service ID
    + with_texts (required, boolean, `true`) ... Get texts for the Progress widget

### Get traffic usage [GET]
Retrieve internet service traffic usage info

+ Response 200 (application/json)
    + Attributes (FUP Usage Response)


# Data Structures

## Token request data (object)
+ auth_type: `customer` (enum[string], required) - Authorization type
    + Members
        + `admin` - Generate token by admin login and password
        + `customer` - Generate token by customer login and password
        + `api_key` - Generate token by API key and secret
        + `session` - Generate token by session id
+ login: `bob` (string, optional) - Admin or customer login. Required for auth types: `admin`, `customer`.
+ password: `hard_password` (string, optional) - Admin or customer password. Required for auth types: `admin`, `customer`.
+ key (string, optional) - API key. Required for auth type `api_key`.
+ secret (string, optional) - API secret. Required for auth type `api_key`.
+ session_id (string, optional) - Splynx session id. Required for auth type `session`.
+ code (string, optional) - Two factor code. Can be used only with auth type `admin` when two factor authentication is enabled.
+ fingerprint (string, optional) - The fingerprint of the trusted device. Can be used only with auth type `admin` when two factor authentication is enabled. This fingerprint returns when you add a trusted device.

## Token renew response (object)
+ access_token: `2dbf3280cf9sb3b8a7c15201c76b9s1` (string) - Access token. Contains user information
+ access_token_expiration: `1542493076` (number) - Access token expiration timestamp
+ refresh_token: `caebf3980cf9fb3b8c7c15501c77b980` (string) - Refresh token
+ refresh_token_expiration: `1578673076` (number) - Refresh token expiration timestamp

## Token generate response (Token renew response)
+ permissions (array) - Token permissions

## Trusted device Base (object)
+ device_type: `mobile` (string, required) - Device type
+ os: `Android` (string, required) - Device operation system
+ name: `Nexus 5x - Sheduling app` (string, required) - Device name
+ device_id: `goldfish` (string) - Device ID.
+ fingerprint: `google/walleye/walleye:8.1.0/OPM2.171026.006.G1/4820017:user/release-keys` (string) - Device fingerprint.

## Trusted device Response (object)
+ id: `1` (number) - Trusted device ID
+ admin_id: `1` (number) - Admin ID
+ device_type: `mobile` (string, required) - Device type
+ os: `Android` (string) - Device operation system
+ name: `Nexus 5x - Sheduling app` (string) - Device name
+ finger_print_cookies: `iIqkQMh381CushYK/iDsIntTAfy` (string) - Device fingerprint. You can use this fingerprint for authenticate without entering two-factor code.
+ device_info (object) - Device additional info
+ added_time: `2019-09-23 14:54:15` (string) - Datetime when device added

## Trusted device Id (object)
+ id: `1` (number) - Trusted device ID
+ fingerprint: `TPc65HBDLrawo+ik78zuQGefv` (string) - Trusted device fingerprint. You can use this fingerprint for authorize without entering two-factor code.

## Two factor Request (object)
+ login: `admin_login` (string) - Administrator login or email

## Two factor Response (object)
+ two_factor_enabled: `true` (boolean) - Whether two-factor authentication is enabled?

## Create session response (object)
+ session_id: `caebf3980cf9fb3b8c7c15501c77b980` (string) - Splynx PHP session id
+ csrf_token: `1953cbf82dae83fd26e6cc460506fca2` (string) - CSRF token

## Dashboard response (object)
+ name: `top` (string) - Name of widget
+ type: `base` (enum[string]) - Type of widget
    + Members
        + `base` - Base splynx dashboard widget
        + `entry_point` - Splynx entry point
+ data (Dashboard data example) - Widget info. This is only example.

## Dashboard data example (object)
+ customersNew: `21` (number)
+ customersOnline: `5` (number)
+ tickets: `2` (number)
+ other_info: `Other information` (string)

## Dashboard options response (object)
+ name: `addon_isl_code_widget` (string) - Name of widget
+ type: `entry_point` (enum[string]) - Type of widget
    + Members
        + `base` - Base splynx dashboard widget
        + `entry_point` - Splynx entry point code widget
+ module: `splynx_addon_isl` (string) - Add-on module name. Included if type of widget is `entry_point`.
+ placement: `after_content` (enum[string]) - Widget placement area. Included if type of widget is `entry_point`.
    + Members
        + `before_content` - Place before content
        + `after_content` - Place after content

## Entry point view response (object)
+ id: `123` (number) - Entry point id
+ module: `splynx_addon_isl` (string) - Add-on module name.
+ place: `portal` (string) - Entry point placement.
+ type: `code` (string) - Entry point type.
+ size: `large` (string) - Entry point size.
+ title: `Social registration` (string) - Entry point title.
+ root: `controllers\\portal\\LoginController` (string) - Entry point root.
+ model (string) - Entry point model.
+ icon (string) - Entry point icon. Used in entry points with type `action_link`.
+ background (string) - Entry point background color. Used in entry points with type `menu_link`.
+ url (string) - Entry point url. Used in entry points with types `action_link`, `menu_link` and `tab`.
+ code: `<h3>Widget code</h3>` (string) - Code of an entry point.

## Base options response (object)
+ name: `module` (string) - Attribute name
+ title: `Module name` (string) - Attribute title
+ type: `string` (string) - Attribute type
+ required: `true` (boolean) - Is this attribute required

## Base options with AFs response (object)
+ name: `ip` (string) - Attribute name
+ title: `Example additional attribute` (string) - Attribute title
+ type: `string` (string) - Attribute type
+ required: `true` (boolean) - Is this attribute required
+ module: `paypal` (string) - Additional attribute module
+ category: `0` (number) - Category
+ position: `6` (number) - Position in additional fields list
+ decimals: `2` (number) - Count of decimals
+ is_unique: `false` (boolean) - Is unique
+ is_add: `false` (boolean) - Show attribute in "create" form
+ show_in_list: `true` (boolean) - Show attribute in tables
+ searchable: `true` (boolean) - Allow search by this attribute
+ readonly: `false` (boolean) - Make attribute readonly
+ disabled: `false` (boolean) - Don't send attribute to server from form
+ hidden: `false` (boolean) - Hide attribute for users
+ set_default_value: `true` (boolean) - Set default value for all

## Customer label (object)
+ id: `1` (number) - Customer label ID
+ label: `Label name` (string) - Name of the customer label
+ color: `#357bf2` (string) - Color in hexadecimal format

## Internet tariff Base (object)
+ title: `Aplha` (string, required) - Unique title of tariff
+ service_name: `aplha` (string, optional) - Unique service name. If not set will be get from title
+ partners_ids: `1` (array, required) - Array of partners (ids) who can use this tariff
+ price: `100` (number, optional) - Price
+ with_vat: `true` (boolean, required) - With VAT or not
+ vat_percent: `19` (number, optional) - VAT value
+ speed_download: `102400` (number, required) - Download speed (kbps)
+ speed_upload: `102400` (number, required) - Upload speed (kbps)
+ speed_limit_at: `10` (number, optional) - Guaranteed speed limit at X%. Default: 10
+ aggregation: `1` (number, optional) - Aggregation: 1:X. Default: 1
+ burst_limit: `0` (number, optional) - Burst limit: +X%. Default: 0
+ burst_limit_fixed_down: `0` (number, optional) - Download burst limit. Default: 0
+ burst_limit_fixed_up: `0` (number, optional) - Upload burst limit. Default: 0
+ burst_threshold: `0` (number, optional) - Burst threshold: X%. Default: 0
+ burst_threshold_fixed_down: `0` (number, optional) - Download burst threshold. Default: 0
+ burst_threshold_fixed_up: `0` (number, optional) - Upload burst threshold. Default: 0
+ burst_time: `0` (number, optional) - Burst time: X sec. Default: 0
+ burst_type: `none`, `percent`, `fixed` (array, optional) - Burst. Default: none
+ `billing_types`: `recurring`, `prepaid`, `prepaid_monthly` (array, optional) - Types of billing
+ customer_categories: `person`, `company`, (array, optional) - Customer categories
+ exclude_traffic_classes: `0`, (array[number], optional) - IDs of Traffic classes
+ hide_on_admin_portal: `false` (boolean, required) - Hide tariff on Admin portal. Default: false
+ show_on_customer_portal: `false` (boolean, required) - Show tariff on Customer portal. Default: false
+ priority: `low`, `normal`, `high` (array, optional) - Priority
+ speed_limit_type: `none` (string, optional) - Type. Can be `none`, `percent`, `fixed`
+ speed_limit_fixed_down: `0` (number, optional) - Guaranteed download speed limit. Default: 0
+ speed_limit_fixed_up: `0` (number, optional) - Guaranteed upload speed limit. Default: 0
+ tax_id: `0` (number, optional) - Tax id
+ transaction_category_id: `0` (number, optional) - Transaction category id. Default: 0
+ billing_days_count: `1` (number, optional) - Prepaid period days. Default: 1
+ custom_period: `1` (enum[number], optional)
    Use for check if use custom period
    + Members
        + `0` - Monthly
        + `1` - Days amount
+ available_for_services: `true` (boolean, optional) - Available to assign in services
+ available_for_locations: `1` (array[number], optional) - Array of locations (ids)
+ customer_labels: `1` (array[number]) - Array of customer labels (ids)

## Internet tariff Response (Internet tariff Base)
+ id: `1` (number, required) - Internet tariff ID
+ customer_labels (array[Customer label]) - Array of customer labels
+ services: `0` (number) - Number of services used

## Internet tariff list Response (Internet tariff Response)
+ tariffs_for_change: `0` (array[number], optional) - Tariff plans available in customer portal for changing services (ids)

## Internet tariff Id (object)
+ id: `1` (number, required) - Internet tariff ID

## Voice tariff Base (object)
+ title: `Aplha` (string, required) - Unique title of tariff
+ service_name: `aplha` (string, optional) - Unique service name. If not set will be get from title
+ type: `voip` (string, required) - Type. Can be 'voip' for VoIP, 'fix' for Fix, 'mobile' for Mobile. Default: 'voip'
+ partners_ids: `1` (array, required) - Array of partners (ids) who can use this tariff
+ price: `100` (number, optional) - Price
+ with_vat: `true` (boolean, required) - With VAT or not
+ vat_percent: `19` (number, optional) - VAT value
+ `billing_types`: `recurring`, `prepaid`, `prepaid_monthly` (array, optional) - Types of billing
+ billing_days_count: `1` (number, optional) - Prepaid period days. Default: 1
+ available_for_locations: `1` (array[number], optional) - Array of locations (ids)
+ buy_price_increase: `0` (number, optional) - Buy price increase
+ connection_cost_included: `true` (boolean, optional) - Included pricing cover connect cost
+ customer_categories: `person`, `company`, (array, optional) - Customer categories
+ customer_labels (array[Customer label], optional) - Array of customer labels
+ customer_rate_table_id (number, optional) - Rate table (id)
+ hide_on_admin_portal: `false` (boolean, optional) - Hide tariff on Admin portal. Default: false
+ show_on_customer_portal: `false` (boolean, optional) - Show tariff on Customer portal. Default: false
+ tax_id: `0` (number, optional) - Tax id
+ custom_period: `1` (enum[number], optional)
    Use for check if use custom period
    + Members
        + `0` - Monthly
        + `1` - Days amount
+ available_for_services: `true` (boolean, optional) - Available to assign in services
+ customer_labels: `1` (array[number]) - Array of customer labels (ids)

## Voice tariff Response (Voice tariff Base)
+ id: `1` (number, required) - Voice tariff ID
+ customer_labels (array[Customer label]) - Array of customer labels
+ tariffs_for_change: `0` (array[number], optional) - Tariff plans available in customer portal for changing services (ids)
+ services: `0` (number) - Number of services used
+ transaction_category_id: `0` (number) Transaction category
+ transaction_category_id_for_calls: `0` (number) Transaction category for calls. Default: 0
+ transaction_category_id_for_data: `0` (number) Transaction category for data. Default: 0
+ transaction_category_id_for_messages: `0` (number) Transaction category for messages. Default: 0

## Voice tariff Id (object)
+ id: `1` (number, required) - Voice tariff ID

## Recurring tariff Base (object)
+ title: `Aplha` (string, required) - Unique title of tariff
+ service_name: `aplha` (string, optional) - Unique service name. If not set will be get from title
+ partners_ids: `1` (array, required) - Array of partners (ids) who can use this tariff
+ price: `100` (number, optional) - Price
+ with_vat: `true` (boolean, required) - With VAT or not
+ vat_percent: `19` (number, optional) - VAT value
+ `billing_types`: `recurring`, `prepaid`, `prepaid_monthly` (array, optional) - Types of billing
+ billing_days_count: `1` (number, optional) - Prepaid period days. Default: 1
+ custom_period: `1` (enum[number], optional)
    Use for check if use custom period
    + Members
        + `0` - Monthly
        + `1` - Days amount
+ available_for_services: `true` (boolean, optional) - Available to assign in services
+ available_for_locations: `1` (array[number], optional) - Array of locations (ids)
+ customer_categories: `person`, `company`, (array, optional) - Customer categories
+ customer_labels: `1` (array[number]) - Array of customer labels (ids)
+ hide_on_admin_portal: `false` (boolean, required) - Hide tariff on Admin portal. Default: false
+ show_on_customer_portal: `false` (boolean, optional) - Show tariff on Customer portal. Default: false
+ tax_id: `0` (number, optional) - Tax id

## Recurring tariff Response (Recurring tariff Base)
+ id: `1` (number, required) - Recurring tariff ID
+ customer_labels (array[Customer label]) - Array of customer labels
+ services: `0` (number) - Number of services used
+ tariffs_for_change: `0` (array[number], optional) - Tariff plans available in customer portal for changing services (ids)
+ transaction_category_id: `0` (number) Transaction category

## Recurring tariff Id (object)
+ id: `1` (number, required) - Recurring tariff ID

## Bundle tariff Base (object)
+ title: `Aplha` (string, required) - Unique title of tariff
+ service_description: `aplha` (string, optional) - Unique service description
+ partners_ids: `1`,`2` (array, required) - List of partners (ids) who can use this tariff
+ price: `100` (number, optional) - Price. Default: 0
+ with_vat: `true` (boolean, optional) - With VAT or not. Default: 1
+ vat_percent: `19` (number, optional) - VAT value. Default: 21
+ activation_fee: `0.5` (number, optional) - Activation fee. Default: 0
+ issue_invoice_while_service_creation: `true` (boolean, optional) - Issue an invoice while service creation. Default: 0
+ cancellation_fee: `1.5` (number, optional) - Cancellation fee. Default: 0
+ prior_cancellation_fee: `1.5` (number, optional) - Prior cancellation fee. Default: 0
+ change_to_other_bundle_fee: `0` (number, optional) - Change to other bundle fee. Default: 0
+ contract_duration: `1` (number, optional) - Contract duration
+ `get_activation_fee_when`: `create_service` (string, optional) - Get activation fee when create service: 'create_service' or after first service billing day: 'first_service_billing'
+ automatic_renewal: `true` (boolean, optional) - Automatic renewal. Default: 0
+ auto_reactivate: `false` (boolean, optional) - Auto reactivate when deposit become more then minimal balance. Default: 0
+ discount_period: `5` (number, optional) - Discount period
+ discount_type: `percent` (string, optional) - Type of discount: 'percent' or 'fixed'. Default value: 'percent'
+ discount_value: `15` (number, optional) - Discount value
+ internet_tariffs: `1`,`2` (array, optional) - Internet tariffs plans
+ voice_tariffs: `1`,`2`,`3` (array, optional) - Voice tariffs plans
+ custom_tariffs: `1`,`2`,`3` (array, optional) - Custom tariffs plans
+ `billing_types`: `recurring`, `prepaid`, `prepaid_monthly` (array, optional) - Types of billing
+ billing_days_count: `1` (number, optional) - Prepaid period days. Default: 1
+ custom_period: `1` (enum[number], optional)
    Use for check if use custom period
    + Members
        + `0` - Monthly
        + `1` - Days amount
+ available_for_services: `true` (boolean, optional) - Available to assign in services
+ customer_labels: `1` (array[number]) - Array of customer labels (ids)

## Bundle tariff Response (Bundle tariff Base)
+ id: `1` (number, required) - Bundle tariff ID
+ customer_labels (array[Customer label]) - Array of customer labels

## Bundle tariff Id (object)
+ id: `1` (number, required) - Bundle tariff ID

## `One-time tariff Base` (object)
+ title: `Aplha` (string, required) - Unique title of tariff
+ service_description: `aplha` (string, optional) - Unique service description
+ price: `100` (number, optional) - Price
+ with_vat: `true` (boolean, optional) - With VAT or not
+ vat_percent: `19` (number, optional) - VAT value
+ partners_ids: `1` (array, required) - Array of partners (ids) who can use this tariff
+ customer_categories: `person`, `company`, (array, optional) - Customer categories
+ customer_labels: `1` (array[number]) - Array of customer labels (ids)
+ available_for_locations: `1` (array[number], optional) - Array of locations (ids)
+ enabled: `true` (boolean, optional) - Enabled
+ hide_on_admin_portal: `false` (boolean, required) - Hide tariff on Admin portal. Default: false
+ show_on_customer_portal: `false` (boolean, optional) - Show tariff on Customer portal. Default: false
+ tax_id: `0` (number, optional) - Tax id

## `One-time tariff Response` (One-time tariff Base)
+ id: `1` (number, required) - One-time tariff ID
+ customer_labels (array[Customer label]) - Array of customer labels
+ transaction_category_id: `0` (number) Transaction category

## `One-time tariff Id` (object)
+ id: `1` (number, required) - One-time tariff ID

## Change Tariff Get Response (object)
+ target_date: `2019-02-07` (string, required) - Start date of new tariff
+ transaction_category_id: `0` (number) Transaction category
+ services: `0` (number) - Number of services used

## Tariff for change response (object)
+ id: `3` (number) - Tariff ID
+ title: `Tariff title` (string) - Tariff title
+ price: `10.30` (string) - Tariff price
+ vat_percent: `21.0` (string) - VAT percent
+ with_vat: `true` (boolean) - Price with VAT
+ other_properties: `Other properties` (string) - And other properties according to tariff type
+ hide_on_admin_portal: `false` (boolean, required) - Hide tariff on Admin portal. Default: false
+ show_on_customer_portal: `false` (boolean, optional) - Show tariff on Customer portal. Default: false
+ available_for_locations: `1` (array[number], optional) - Array of locations (ids)
+ customer_categories: `person`, `company`, (array, optional) - Customer categories
+ partners_ids: `1` (array, required) - Array of partners (ids) who can use this tariff
+ tax_id: `0` (number, optional) - Tax id
+ service_name: `aplha` (string, optional) - Unique service name. If not set will be get from title
+ billing_days_count: `1` (number, optional) - Prepaid period days. Default: 1
+ available_for_services: `true` (boolean, optional) - Available to assign in services
+ `billing_types`: `recurring`, `prepaid`, `prepaid_monthly` (array, optional) - Types of billing
+ tariffs_for_change: `0` (array[number], optional) - Tariff plans available in customer portal for changing services (ids)
+ speed_download: `102400` (number, required) - Download speed (kbps)
+ speed_upload: `102400` (number, required) - Upload speed (kbps)
+ speed_limit_type: `none` (string, optional) - Type. Can be `none`, `percent`, `fixed`
+ speed_limit_at: `10` (number, optional) - Guaranteed speed limit at X%. Default: 10
+ speed_limit_fixed_up: `0` (number, optional) - Guaranteed upload speed limit. Default: 0
+ speed_limit_fixed_down: `0` (number, optional) - Guaranteed download speed limit. Default: 0
+ aggregation: `1` (number, optional) - Aggregation: 1:X. Default: 1
+ burst_type: `none`, `percent`, `fixed` (array, optional) - Burst. Default: none
+ burst_limit: `0` (number, optional) - Burst limit: +X%. Default: 0
+ burst_limit_fixed_up: `0` (number, optional) - Upload burst limit. Default: 0
+ burst_limit_fixed_down: `0` (number, optional) - Download burst limit. Default: 0
+ burst_threshold: `0` (number, optional) - Burst threshold: X%. Default: 0
+ burst_threshold_fixed_up: `0` (number, optional) - Upload burst threshold. Default: 0
+ burst_threshold_fixed_down: `0` (number, optional) - Download burst threshold. Default: 0
+ burst_time: `0` (number, optional) - Burst time: X sec. Default: 0
+ priority: `low`, `normal`, `high` (array, optional) - Priority
+ exclude_traffic_classes: `0`, (array[number], optional) - IDs of Traffic classes
+ services: `0` (number) - Number of services used

## FUP Counter Response (object)
+ service_id (number, required) - Service id
+ day_up (number, required) - Day up
+ day_down (number, required) - Day down
+ day_time (number, required) - Day time
+ day_bonus_up (number, required) - Day bonus up
+ day_bonus_down (number, required) - Day bonus down
+ week_up (number, required) - Week up
+ week_down (number, required) - Week down
+ week_bonus_up (number, required) - Week bonus up
+ week_bonus_down (number, required) - Week bonus down
+ week_time (number, required) - Week time
+ month_up (number, required) - Month up
+ month_down (number, required) - Month down
+ month_bonus_up (number, required) - Month bonus up
+ month_bonus_down (number, required) - Month bonus down
+ month_time (number, required) - Month time
+ cap_amount (number, required) - Cap amount
+ cap_used (number, required) - Cap used
+ over_usage (number, required) - Over usage

## FUP Compiler Response (object)
+ service_id (number, required) - Service id
+ customer_id (number, required) - Customer id
+ traffic_accounting (number, required) - Traffic accounting. Value: 1 or 0
+ time_accounting (number, required) - Time accounting. Value: 1 or 0
+ fup_policy (number, required) - FUP policy
+ decrease_percent (number, required) - Decrease percent
+ fixed_up (number, required) - Upload in bytes
+ fixed_down (number, required) - Download in bytes
+ blocked (number, required) - Blocked. Value: 1 or 0
+ is_hard (number, required) - Is hard. Value: 1 or 0
+ restored (number, required) - Restored. Value: 1 or 0
+ changed (number, required) - Changed. Value: 1 or 0

## FUP Policy Response (object)
+ id (number, required) - Policy id
+ tariff_if (number, required) - Tariff id
+ name (string, required) - Name
+ fixed_up (number, required) - Upload in bytes
+ fixed_down (number, required) - Download in bytes
+ accounting_traffic (number, required) - Traffic accounting. Value: 1 or 0
+ accounting_online (number, required) - Time accounting. Value: 1 or 0
+ action (string, required) - Action. Value: 'increase', 'decrease' or 'block'
+ percent (number) - Percent
+ conditions (string) - Conditions

## FUP Limit Response (object)
+ tariff_id:         `1` (number, required) - Tariff id
+ cap_tariff_id:     `1` (number, optional) - CAP tariff id
+ traffic_from:      `00:00` (string, optional) - Traffic from. Default '00:00'
+ online_from:       `00:00` (string, optional) - Online from. Default '00:00'
+ traffic_to:        `24:00` (string, optional) - Traffic to. Default '24:00'
+ online_to:         `24:00` (string, optional) - Online to. Default '24:00'
+ traffic_days:      `1`,`2`,`3` (array, required) - Traffic days. Default '1,2,3,4,5,6,7'
+ online_days:       `1`,`2`,`3` (array, required) - Online days. Default '1,2,3,4,5,6,7'
+ action:            `block` (string, optional) - Action. Options('decrease', 'block'). Default 'block'
+ percent:           `0` (number, optional) - Percent
+ traffic_amount:    `12334` (number, optional) - Traffic amount
+ `traffic_direction`: `up_down` (string, optional) - Options('up', 'down', 'up_down'). Default 'up_down'
+ traffic_in:        `gb` (string, optional) - Traffic in. Options('kb', 'mb', 'gb', 'tb'). Default 'gb'
+ override_traffic:  `false` (boolean, optional) - Override traffic
+ online_amount:     `123` (number, optional) - Online amount
+ online_in:         `hours` (string, optional) - Online in. Options('minutes', 'hours'). Default 'hours'
+ override_online:   `false` (boolean, optional) - Override online
+ rollover_data:     `false` (boolean, optional) - Rollover data
+ rollover_time:     `false` (boolean, optional) - Rollover time
+ bonus_is_unlimited:`false` (boolean, optional) - Bonus is unlimited. Default 'true'
+ bonus_traffic:     `1.0` (number, optional) - Bonus traffic
+ bonus_traffic_in    (string, optional) - Bonus traffic in
+ fixed_up            (number, optional) - Upload in bytes
+ fixed_down          (number, optional) - Download in bytes
+ top_up_over_usage   (boolean, optional) - Compensate over usage via Top-Up
+ top_up_trigger_percent  (number, optional) - Auto Top-Up trigger value
+ use_bonus_when_normal_ended  (boolean, optional) - Allow the usage of bonus traffic when normal CAP is finished

## FUP Usage Response (object)
+ traffic_amount: `40000000000` (number) - Total amount of used traffic in bytes
+ over_usage: `0` (number) - Amount of traffic used beyond the allocated limit in bytes
+ used_amount: `323862` (number) - Used traffic amount in bytes
+ remains_amount: `676138` (number) - Remains traffic amount in bytes
+ cap_amount: `2000000` (number) - CAP traffic amount in bytes
+ used_percent: `10.79` (number) - Used traffic part in percents
+ remains_percent: `22.53` (number) - Remains traffic part in percents
+ cap_percent: `66.66` (number) - CAP traffic part in percents
+ bonus_traffic: `0` (number) - Bonus traffic
+ bonus_is_unlimited: `0` (number) - Bonus is unlimited
+ bonus_remains_amount: `0` (number) - Bonus remains amount
+ bonus_cap_amount: `0` (number) - Bonus CAP amount
+ bonus_used_percent: `0` (number) - Bonus used percent
+ bonus_remains_percent: `0` (number) - Bonus remains percent
+ bonus_cap_percent: `0` (number) - Bonus CAP percent
+ cap_bar_position: `2` (number) - Position of `CAP` bar (on the Progress widget)
+ remains_bar_position: `1` (number) - Position of `remains` bar (on the Progress widget)
+ used_text: `323.86 KB` (string)
    Title of `used` bar. Returned only if param `with_texts` is true.
+ used_label_title: `323.86 KB` (string)
    Title of `used` label. Returned only if param `with_texts` is true.
+ capped_alt: `Remains: 2 MB / 2 MB CAP` (string)
    Text on hover of `CAP` bar. Returned only if param `with_texts` is true.
+ capped_not_used_text: `2 MB` (string)
    Title of `CAP` bar. Returned only if param `with_texts` is true.
+ capped_text_all: `2 MB` (string)
    Title of the `CAP` bar, indicating the total allocated limit.
+ all_text: `1 MB` (string)
    All plan traffic title. Returned only if param `with_texts` is true.
+ remains_text: `676.14 KB` (string)
    Title of `remains` bar. Returned only if param `with_texts` is true.
+ used_alt: `Used: 323.86 KB / 1 MB (+2 MB CAP)` (string)
    Text on hover of `used` bar. Returned only if param `with_texts` is true.
+ remains_alt: `Remains: 676.14 KB / 1 MB (+2 MB CAP)` (string)
    Text on hover of `remains` bar. Returned only if param `with_texts` is true.
+ bonus_capped_text_all: `(+2 MB Bonus CAP)` (string)
    Title of the bonus `CAP` bar, indicating the total bonus traffic allocated.
+ full_cap_amount: `2000000` (number) - Full CAP traffic amount in bytes
+ bonus_all_text: `0 B` (string) - Title indicating the total bonus traffic available
+ bonus_used_label_title: `0 B` (string) - Title of the label indicating the amount of bonus traffic used
+ bonus_used_text: `0 B` (string) - Text displaying the used bonus traffic amount
+ bonus_used_alt: `Used: 0 B \/ 0 B` (string) - Text displayed on hover over the bonus usage bar, showing the used and total bonus traffic
+ bonus_remains_text: `` (string) - Text displaying the remaining bonus traffic
+ bonus_remains_alt: `Remains: 0 B \/ 0 B` (string) - Text displayed on hover over the bonus remaining bar, showing the remaining bonus traffic
+ bonus_capped_not_used_text: `0 B` (string) - Title of the bonus `CAP` bar, indicating the amount of bonus traffic not yet used
+ bonus_capped_alt: `Remains: 0 B \/ 0 B Bonus CAP` (string) - Text displayed on hover over the bonus `CAP` bar, showing the remaining and total bonus traffic

# Group CAP

## Cap Tariff collection [/admin/fup/cap-tariff]

### Add a Cap Tariff [POST]
Adds a new Cap Tariff record.

+ Request (application/json)
    + Attributes (Cap tariff Base)

+ Response 201 (application/json)
    + Attributes (Cap tariff Id)

### List all Capped data [GET]
Returns a list of your Cap Tariff records.

+ Response 200 (application/json)
    + Attributes (array[Cap tariff Response])

## Cap Tariff [/admin/fup/cap-tariff/{id}]
Work with Cap Tariff record.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Cap Tariff record.

### Retrieve a Cap Tariff [GET]
Retrieves the Cap Tariff record with the given ID.

+ Response 200 (application/json)
    + Attributes (Cap tariff Response)

### Update a Cap Tariff [PUT]
Update the Cap Tariff record with the given ID.

+ Request (application/json)

        {
            "title": 'lte-top-1g'
        }

+ Response 202 (application/json)

### Delete a Cap Tariff [DELETE]
Delete the Cap Tariff record with the given ID.

+ Response 204

## Capped data collection [/admin/fup/capped-data]

### Add a Capped data [POST]
Adds a new Capped data record.

+ Request (application/json)
    + Attributes (Capped data Base)

+ Response 201 (application/json)
    + Attributes (Capped data Id)

### List all Capped data [GET]
Returns a list of your Capped data records.

+ Response 200 (application/json)
    + Attributes (array[Capped data Response])

## Capped data [/admin/fup/capped-data/{id}]
Work with Capped data record.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Capped data record.

### Retrieve a Capped data [GET]
Retrieves the Capped data record with the given ID.

+ Response 200 (application/json)
    + Attributes (Capped data Response)

### Update a Capped data [PUT]
Update the Capped data record with the given ID.

+ Request (application/json)

        {
            "quantity": '500000000'
        }

+ Response 202 (application/json)

### Delete a Capped data [DELETE]
Delete the Capped data record with the given ID.

+ Response 204

# Data Structures

## Capped data Base (object)
+ service_id: `1` (number, required) - Existing service Id.
+ quantity: `10000000` (number, optional) - Traffic amount. Required if not set `tariff_id`. Default: 0
+ quantity_remind: `10000000` (number, optional) - Remind traffic amount. Default: 0
+ tariff_id: `1` (number, optional) - Existing CAP Tariff Id. If set then `price` and `quantity` will be taken from tariff. Required if not set `price`.
+ `over_usage`: `1` (number, optional) - Represents the amount of traffic that exceeds the FUP limit. If the usage surpasses the FUP limit, over_usage is calculated as usage - fup limit.
+ valid_till: `0000-00-00 00:00:00` (string, optional) - Valid till date.
+ end_of_period: `0000-00-00 00:00:00` (string, optional) - End of period.
+ price: `0` (number, optional) - Price of the Capped data. Required if not set `tariff_id`. Default: 0

## Capped data Id (object)
+ id: `1` (number, required) - Capped data Id.

## Capped data Response (object)
+ id: `15` (number, required) - CAP Id.
+ service_id: `100` (number, required) - Service Id.
+ quantity: `50000000` (number, required) - Traffic quantity.
+ quantity_remind: `50000000` (number, required) - Remind traffic quantity.
+ `over_usage`: `1` (number, optional) - Represents the amount of traffic that exceeds the FUP limit. If the usage surpasses the FUP limit, over_usage is calculated as usage - fup limit.
+ valid_till: `0000-00-00 00:00:00` (string, required) - Valid till date.
+ end_of_period: `0000-00-00 00:00:00` (string, optional) - End of period.
+ transaction_id: `50` (number, required) - Transaction Id.
+ price: `0.00` (number, required) - Price of the Capped data.
+ added_by: `api` (string) - Added by: 'api', 'admin', 'customer', 'system'. Default value: 'system'
+ type: `admin_top_up` (string) - Type: 'admin_top_up', 'customer_top_up', 'api_top_up', 'auto_top_up', 'rollover_unused', 'rollover_to_next_month'.
+ description: `` (string) - A dynamic description that provides information about the traffic rollover. The value depends on the specific context: it can describe the rollover traffic for a single service or the transfer of unused traffic from one service to another.

## Cap tariff Base (object)
+ tariff_id: `1` (number) - Tariff ID
+ title: `lte-top-1g` (string, required) - Title
+ amount: `1` (number, required) - Amount
+ amount_in: `gb` (string) - Amount in: 'gb' or 'mb'. Default: 'mb'
+ price: `100.00` (number) - Price
+ type: `manual` (string) - Type: 'manual', 'automatic'. Default: 'manual'
+ validity: `week_2` (string, required) - Validity: 'end_of_period', 'unlimited'; Month in format '1' from (1 to 12); Weeks in format 'week_{number of weeks}' Valid values: 1,2,3; Days in format 'day_{number of days}' Valid values: 1,3
+ to_invoice: `1` (number) - To invoice: '0', '1'. Default '0'
+ transaction_category_id: `1` (number) - Transaction category. Default '0'

## Cap tariff Id (object)
+ id: `1` (number, required) - Cap Tariff ID

## Cap tariff Response (Cap tariff Base)
+ id: `1` (number, required) - Cap Tariff ID

# Group Customers

## Customers collection [/admin/customers/customer]

### Create a Customer [POST]
Creates a new Customer.

+ Request (application/json)
    + Attributes (Customer Base)

+ Response 201 (application/json)
    + Attributes (Customer Id)

### List all Customers [GET]
Returns a list of your Customers.

+ Response 200 (application/json)
    + Attributes (array[Customers Response])

## Customer [/admin/customers/customer/{id}]
Work with Customers.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Customer.

### Retrieve a Customer [GET]
Retrieves the Customer with the given ID.

+ Response 200 (application/json)
    + Attributes (Customer Response)

### Update a Customer [PUT]
Update the Customer with the given ID.

+ Request (application/json)

        {
            "name": Narrator
        }

+ Response 202 (application/json)

### Delete a Customer [DELETE]
Delete the Customer with the given ID.

+ Response 204

## Customers Logs of Changes [/admin/customers/customer/{customer_id}/logs-changes]

### List Customers logs of changes [GET]
Returns a list of Customer logs of changes.

+ Parameters
    + customer_id (required, number, `40`) ... The ID of the desired Customer.

+ Response 200 (application/json)
    + Attributes (array[Customer Changes Logs First, Customer Changes Logs Service, Customer Changes Logs, Customer Changes Logs Last])

## Customer first activation [/admin/customers/customer/{customer_id}/logs-changes--first-activation]

### Get customer first activation [GET]
Returns info about first activation of customer.

+ Parameters
    + customer_id (required, number, `40`) ... The ID of the desired Customer.

+ Response 200 (application/json)
    + Attributes (Customer Changes Logs First)

## Customers last activation [/admin/customers/customer/{customer_id}/logs-changes--last-activation]

### Get customer first activation [GET]
Returns info about last activation of customer (from 'inactive' (disabled) to 'active').

+ Parameters
    + customer_id (required, number, `40`) ... The ID of the desired Customer.

+ Response 200 (application/json)
    + Attributes (Customer Changes Logs Last)

## Customer cap [/admin/customers/customer-cap/{id}]
Work with Customer cap.
+ Parameters
    + id (required, number, `1`) ... The ID of the desired Customer.

### Retrieve a Customer cap [GET]
Retrieves the Customer cap with the given ID.

+ Response 200 (application/json)
    + Attributes (Customer cap Response)

### Update a Customer cap [PUT]
Update the Customer cap "max_cap_during_month" with the given ID.

+ Request (application/json)
    + Attributes (Customer cap Response)

+ Response 202 (application/json)

## Internet service bonus traffic counter [/admin/customers/customer-bonus-traffic-counter]

### Retrieve bonus traffic record [GET /admin/customers/customer-bonus-traffic-counter/{service_id}--{date}]
Get the bonus traffic for internet service by specify `service_id` and `date`.

+ Parameters
    + service_id (number, required) - Service ID.
    + date (string, required) - Date of traffic. Note the date should have format `yyyy-mm-dd`.

+ Response 200 (application/json)
    + Attributes (Customer Bonus Traffic Counter)

### Get list bonus traffic values [GET /admin/customers/customer-bonus-traffic-counter]
Get list of bonus traffic records for internet services.

+ Response 200 (application/json)
    + Attributes (array[Customer Bonus Traffic Counter])

### Create bonus traffic record [POST]
Create the bonus traffic record for internet service.

+ Request (application/json)
    + Attributes (Customer Bonus Traffic Counter)

+ Response 201 (application/json)
    + Attributes (Customer Bonus Traffic Counter Id)

### Update bonus traffic record [PUT /admin/customers/customer-bonus-traffic-counter/{service_id}--{date}]
Update the traffic for internet service data by specify `service_id` and `date`.

+ Parameters
    + service_id (number, required) - Service ID.
    + date (string, required) - Date of traffic. Note the date should have format `yyyy-mm-dd`.

+ Request (application/json)
    + Attributes (Customer Bonus Traffic Counter)

+ Response 202 (application/json)
    + Attributes (Customer Bonus Traffic Counter)

### Delete bonus traffic record [DELETE /admin/customers/customer-bonus-traffic-counter/{service_id}--{date}]
Delete the traffic for internet service data by specify `service_id` and `date`.

+ Parameters
    + service_id (number, required) - Service ID.
    + date (string, required ) - Date of traffic. Note the date should have format `yyyy-mm-dd`.

+ Response 204 (application/json)

## Customer info [/admin/customers/customer-info/{id}?{params}]
Work with Customer info. "Birthday" and "Passport number" is for customers in category 'person'. "Company ID" and "VAT ID" for customers in category 'company'.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Customer.
    + params: `{"main_attributes": ["birthday": "1999-01-01", "passport": "740373442", "company_id": "123456", "vat_id": "1"]}` (optional, string) - URL-encoded array of search params.

### Retrieve a Customer info [GET]
Retrieves Customer info either with the given ID or params.

+ Response 200 (application/json)
    + Attributes (Customer info Response)

### Update a Customer info [PUT]
Update the Customer info with the given ID.

+ Request (application/json)

        {
            "passport": ER424242
        }

+ Response 202 (application/json)

## Customer Billing info [/admin/customers/billing-info/{customer_id}?format_values={format_values}]
Get customer billing info

+ Parameters
    + customer_id: `1` (Number) - The ID of the desired Customer.
    + format_values: `true` (boolean) - Return output values in system format.

### Get customer billing (blocking) info [GET]
Get customer billing (blocking) info.

For daily prepaid customers will be returned the following fields:
* howManyDaysLeft
* paymentPerPeriod
* paymentPerDay
* deposit
* services_name
* blocking_date

For monthly prepaid customers will be returned the following fields:
* howManyMonthsLeft
* howManyDaysLeft
* blockInNextBillingCycle
* paymentPerMonth
* paymentPerDay
* deposit
* services_name
* blocking_date
* service

For recurring paid customers will be returned the following fields:
* blockingEnabled
* blockInNextBillingCycle
* status
* lowBalance
* howManyDaysLeft
* blocking_date
* deposit
* blockInNextBillingCycle
* is_already_blocked
* is_already_disabled

+ Response 200 (application/json)
    + Attributes (Billing Info Response)

## Customer Payment accounts [/admin/customers/customer-payment-accounts]
Get customer billing info

### Get customer all payment accounts info [GET]
Get customer all payment accounts info

+ Response 200 (application/json)
    + Attributes (array[Payment accounts Response])

### Get customer all payment accounts data [GET /admin/customers/customer-payment-account-data]
Get all customer payment accounts data

+ Response 200 (application/json)
    + Attributes (array[Payment account data])

### Get customer payment accounts [GET /admin/customers/customer-payment-accounts?id={id}]
Get customer payment accounts data by customer id and payment account id

+ Parameters
    + id (required, string, `1`) ... `1` The ID customer or `1--2` 1 - ID customer, 2 - ID payment account

+ Response 200 (application/json)
    + Attributes (array[Payment account data])

### Update customer payment account [PUT /admin/customers/customer-payment-accounts?id={id}]
Update customer payment account data by customer id and payment account id.

+ Parameters
    + id (required, string, `1--2`) ... `1--2` 1 - ID of customer, 2 - ID of payment account

+ Request (application/json)

        {
            "field_1": 'new value'
        }

+ Response 202 (application/json)

### Remove customer payment account [DELETE /admin/customers/customer-payment-accounts?id={id}]
Remove customer payment account data.

+ Parameters
    + id (required, string, `1--2`) ... `1--2` 1 - ID of customer, 2 - ID of payment account

+ Response 204

## Customers statistics [/admin/customers/customer-statistics]

### Total customer statistics [GET]
Get all statistics from all Customers.

+ Response 200 (application/json)
    + Attributes (array[Customer Statistics])

### Customer statistic [GET /admin/customers/customer-statistics/{id}]
Get all statistics of specified Customer.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Customer.

+ Response 200 (application/json)
    + Attributes (array[Customer Statistics])

## Customer traffic counters collection [/admin/customers/customer-traffic-counter/]
Work with customer traffic counters.

### Get list of customer traffic counters [GET]
Get list of customer traffic counters for internet service.

+ Response 200 (application/json)
    + Attributes (array[Traffic counter])

### Create traffic counters record [POST]
Create the traffic counters record for internet service.

+ Request (application/json)
    + Attributes (Traffic counter)

+ Response 201 (application/json)
    + Attributes (Traffic counter create Response)

## Customer traffic counters [/admin/customers/customer-traffic-counter/{service_id}--{date}]
Work with customer traffic counters for internet service.

### Get customer traffic counters [GET]
Get the customer traffic counters for internet service by specify `service_id` and `date`

+ Parameters
    + service_id (number, required, `1`) - Service ID.
    + date (string, required, `2023-01-01`) - Date of traffic. Note the date should have format `yyyy-mm-dd`.
+ Response 200 (application/json)
    + Attributes (array[Traffic counter])

### Update customer traffic counters [PUT]
Update the customer traffic counters for internet service by specify `service_id` and `date`

+ Parameters
    + service_id (number, required, `1`) - Service ID.
    + date (string, required, `2023-01-01`) - Date of traffic. Note the date should have format `yyyy-mm-dd`.
+ Response 200 (application/json)
    + Attributes (array[Traffic counter])

### Delete customer traffic counters [DELETE]
Delete the customer traffic counters for internet service by specify `service_id` and `date`

+ Parameters
    + service_id (number, required, `1`) - Service ID.
    + date (string, required, `2023-01-01`) - Date of traffic. Note the date should have format `yyyy-mm-dd`.
+ Response 204 (application/json)

## Customers billing [/admin/customers/customer-billing/{id}]

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Customer.

### Get billing [GET]
Get desired Customer billing.

+ Response 200 (application/json)
    + Attributes (Customer Billing)

### Update billing [PUT]
Update desired Customer billing.

+ Request (application/json)

        {
            "make_invoices": 0
        }

+ Response 202 (application/json)

## Customers search [/admin/customers/customer?{params}]

### Customers search [GET]
For search customers you must add must create array of search params and add its URL-encoded version to URL.
In Request section you can see search array structure example.

+ Parameters
    + params: `{"main_attributes": ["login": "doe", "name": "john"], "additional_attributes": ["some_additional_attribute": ["value_a", "value_b"], "another_additonal_attribute": "some_value"]}` (required, string) - URL-encoded array of search params.

+ Response 200 (application/json)
    + Attributes (array[Customer Response])

## Online customers collection [/admin/customers/customers-online]

### Set customer as online [POST]
Add customer to online list.

+ Request (application/json)
    + Attributes (Customer Online Base)

+ Response 201 (application/json)
    + Attributes (Online Id)

### List all online customers [GET]
Returns list of your online customers.

+ Response 200 (application/json)
    + Attributes (array[Customer Online Response])

## Online customer [/admin/customers/customers-online/{id}]
Work with online customer.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired online customer record. **Beware: this is not customer ID!!!**

### Retrieve online customer [GET]
Retrieves online customer.

+ Response 200 (application/json)
    + Attributes (Customer Online Response)

### Update online customer [PUT]
Update online customer.

+ Request (application/json)

        {
            "in_bytes": 106325,
            "out_bytes": 3314247
        }

+ Response 202 (application/json)

### Remove customer from online [DELETE]
Remove customer from online list.

+ Response 204

## Disconnect online customer [/admin/customers/customers-online/{id}--kill]
Work with online customer.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired customer

### Disconnect online customer [PUT]
Disconnect online customer and remove customer from online list.

+ Request (application/json)

        {
            "service_id": 5
        }

+ Response 202 (application/json)

## Customer Documents collection [/admin/customers/customer-documents/{customer_id}]
Work with online customer documents list.

+ Parameters
    + customer_id (required, number, `1`) ... The ID of the desired customer documents records. **Beware: this is customer ID!!!**

### Retrieve customer documents list [GET]
Retrieves customer documents list.

+ Response 200 (application/json)
    + Attributes (array[Customer Documents Response])

## Create customer document [/admin/customers/customer-documents]
### Create customer document [POST]
Create customer document record before next step **file upload**.

+ Request (application/json)
    + Attributes (Customer Documents Request)

+ Response 201 (application/json)
    + Attributes (Customer Documents ID)

## Customer Documents upload file [/admin/customers/customer-documents/{id}--upload]
Work with online customer documents.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired customer document. **Beware: this is customer document ID!!!**

### Upload file for customer document [POST]
Upload file for **existing customer document record**.

+ Request (multipart/form-data)

        {
            "file": cURL file
        }

+ Response 202 (application/json)

## Customer Documents [/admin/customers/customer-documents/{id}]
Work with online customer documents.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired customer document. **Beware: this is customer document ID!!!**

### Update a Customer Document [PUT]
Update the Customer Document with the given ID.

+ Request (application/json)

        {
            "title": new title,
            "description": new description
        }

+ Response 202 (application/json)

### Delete Customer Document [DELETE]
Delete Customer Document with the given document ID.

+ Response 204

## Download customer document [/admin/config/download/customer_documents--{id}]
You could find more details in [Download documents](#reference/config/download-documents) block.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired customer document. **Beware: this is customer document ID!!!**

### Download customer documents [GET]

+ Response 200 (application/json)
    + Attributes (Download Response)

## Send Documents to Customer [/admin/customers/send-documents]
Send documents to customer by instant message.

### Send customer document [POST]
Send customer document.

+ Request (application/json)
    + Attributes (Send Document)

+ Response 201 (application/json)

        {
            "id": 5
        }

## Customers CAP history [/admin/customers/cap-history/{id}]
Work with Customers.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Customer.

### Retrieve a history of Customer CAP [GET]
Retrieves the history of Customer CAP with the given ID.

+ Response 200 (application/json)
    + Attributes (array[CAP history Response])

## Customers comments collection [/admin/customers/customer-notes]

### Create a customer comment [POST]
Creates a new customer comment.

+ Request (application/json)
    + Attributes (Customer comment Base)

+ Response 201 (application/json)
    + Attributes (Customer comment Id)

### List all customer comments [GET]
Returns a list of your customer comments.

+ Response 200 (application/json)
    + Attributes (array[Customer comments Response])

## Customer comment [/admin/customers/customer-notes/{customer_id}--{id}]
Work with customer comment.

+ Parameters
    + customer_id (required, number, `1`) ... The ID of the desired customer.
    + id (required, number, `1`) ... The ID of the desired customer comment.

### Retrieve a customer comment [GET]
Retrieves the customer comment with the given ID.

+ Response 200 (application/json)
    + Attributes (Customer comment Response)

## Vouchers series collection [/admin/customers/prepaid-cards-series]

### Vouchers series [GET]
Get all series of vouchers.

+ Response 200 (application/json)
    + Attributes (array[Cards Prepaid Series])

### Create Vouchers serie [POST]
Creates new vouchers series.

+ Request (application/json)
    + Attributes (Cards Prepaid Create new)

+ Response 201 (application/json)
    + Attributes (Cards Prepaid Series Id)

## Vouchers series [/admin/customers/prepaid-cards-series/{serie_id}]
Work with customer vouchers (prepaid cards) series list.

+ Parameters
    + serie_id (required, string, `201801`) ... The serie of the desired vouchers list. **Beware: this is serie!!!**

### Retrieve vouchers list [GET]
Retrieves vouchers list by serie.

+ Response 200 (application/json)
    + Attributes (array[Cards Prepaid serie])

### Update vouchers serie [PUT]
Update vouchers serie with the given serie.

+ Request (application/json)

        {
            "prefix": "PREFIX2"
        }

+ Response 202 (application/json)

### Delete vouchers serie [DELETE]
Delete vouchers serie with the given series.

+ Response 204

## Vouchers collection [/admin/customers/prepaid-cards]

### Vouchers collection [GET]
Get all vouchers.

+ Response 200 (application/json)
    + Attributes (array[Cards Prepaid])

## Vouchers [/admin/customers/prepaid-cards/{id}]
Work with customer vouchers (prepaid card).

+ Parameters
    + id (required, number, `120`) ... The id of the desired voucher.

### Retrieve voucher [GET]
Retrieves voucher by ID.

+ Response 200 (application/json)
    + Attributes (Cards Prepaid)

### Update voucher [PUT]
Update voucher with the given ID.

+ Request (application/json)

        {
            "speed_download": 2048
        }

+ Response 202 (application/json)

### Delete voucher [DELETE]
Delete voucher with the given ID.

+ Response 204

## Vouchers Statistics [/admin/customers/prepaid-cards-statistics]

### Total vouchers statistics [GET]
Get all statistics from all vouchers.

+ Response 200 (application/json)
    + Attributes (array[Prepaid Cards Statistics])

### Voucher statistic [GET /admin/customers/prepaid-cards-statistics/{id}]
Get all statistics of specified voucher.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired voucher.

+ Response 200 (application/json)
    + Attributes (array[Prepaid Cards Statistics])

## Reset password [/portal/profile/reset-password-request]
Reset customer password.

### Reset password request [POST /portal/profile/reset-password-request]
Make request for resetting customer password.

Field `login_for_reset_password` is a customer login. Always required.

Field `email_for_reset_password` required if reset password type is `Email`.

Field `phone_number_for_reset_password` required if reset password type is `Sms`.

#### Possible errors
* `RESET_PASSWORD_DISABLED` - Resetting password is disabled in config.
* `INVALID_INPUT_DATA` - Missed required parameters such as `login_for_reset_password` or `email_for_reset_password`.
* `EXCEEDED_MAX_ATTEMPTS` - Exceeded max attempts of resetting customer password.


+ Request (application/json)

        {
            "login_for_reset_password": "customer_login",
            "email_for_reset_password": "good_customer@mail.go"
            "phone_number_for_reset_password": "3809483849847"
        }

+ Response 201 (application/json)

### Confirm reset password [POST /portal/profile/reset-password-confirm]
Confirm reset customer password.

#### Possible errors
* `RESET_PASSWORD_DISABLED` - Resetting password is disabled in config.
* `INVALID_INPUT_DATA` - Missed required parameters such as `code` or `password_new`.
* `RESET_PASSWORD_CODE_INVALID` - Verification code of resetting password is invalid.
* `RESET_PASSWORD_FAIL` - Resetting password failed. Data validation failed.

+ Request (application/json)

        {
            "code": "confirmation code",
            "password_new": "new_hard_password"
        }

+ Response 201 (application/json)

## Mobile notification tokens collection [/portal/profile/mobile-notification-token]
Works only if you authenticate like a customer. Required fields: login and password.

### Create a mobile notification token [POST]
Creates a new mobile notification token.

+ Request (application/json)
    + Attributes (Mobile notification token Base)

+ Response 201 (application/json)
    + Attributes (Mobile notification token Id)

### List all mobile notification tokens [GET]
Returns a list of your mobile notification tokens.

+ Response 200 (application/json)
    + Attributes (array[Mobile notification tokens Response])

## Mobile notification token [/portal/profile/mobile-notification-token/{id}]
Work with mobile notification token.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired mobile notification token.

### Retrieve a mobile notification token [GET]
Retrieves the mobile notification token with the given ID.

+ Response 200 (application/json)
    + Attributes (Mobile notification token Response)

### Update a mobile notification token [PUT]
Update the mobile notification token with the given ID.

+ Request (application/json)

        {
            "token": '2dbf3280cf9sb3b8a7c15201c76b9s1'
        }

+ Response 202 (application/json)

### Delete a mobile notification token [DELETE]
Delete the mobile notification token with the given ID.

+ Response 204

# Data Structures

## Customer Base (object)
+ login: `john_doe` (string) - Login
+ status: `new` (string) - Status: 'new', 'active', 'blocked', 'disabled'. Default value: 'new'
+ partner_id: `1` (number, required) - Partner id. You can get it at page "Administration / Partners"
+ location_id: `1` (number, required) - Location id. You can get it at page "Administration / Locations"
+ parent_id: `0` (number) - ID of the main (parent) account.
+ name: `John Doe` (string, required) - Full name
+ email: `john.doe@domain.com` (string) - Email
+ billing_email: `john.doe.billing@domain.com` (string) - Billing email
+ phone: `555-0134` (string) - Phone number
+ category: `person` (string, required) - Category: 'person' (for private person) or 'company' (for company). Default value: 'person'
+ street_1: `Paper Street` (string) - Address part #1
+ zip_code (string) - Zip
+ city (string) - City
+ date_add (string) - Date of adding. Format: 'YYYY-MM-DD'. Default value: current date
+ customer_labels: `1` (array[number]) - Array of customer labels (ids)
+ subdivision_id: `1` (number) - State/province ID
+ conversion_date (string) - Date conversion customer.
+ daily_prepaid_cost (number) - Cost of daily prepayment.

## Customers Response(Customer Base)
+ id: `1` (number, required) - Customer ID
+ customer_labels (array[Customer label]) - Array of customer labels

## Customer Id (object)
+ id: `1` (number, required) - Customer ID

## Customer info Response (object)
+ id: `1` (number) - Customer ID
+ birthday (string) - Birthday
+ passport (string) - Passport number
+ company_id (string) - Company ID
+ contact_person (string) - Contact person
+ vat_id (string) - VAT ID
+ updated_at (string) - Last update date

## Customer cap Response (object)
+ customer_id: `1` (number) - Customer ID
+ auto_cap: `0` (string) - Auto cap. Default value: '0'
+ `limitation_type`: `auto_top_up` (string) - Limitation type: "auto\_top\_up", "manual\_top\_up", "any\_top\_up". Default value: "auto\_top\_up"
+ max_cap_during_month: `10` (number) - Max cap during per month. Default value: '0'
+ transfer_usage_to_new_service: `1` (string) - Transfer usage to new service. Default value: '1'
+ deleted: `0` (string) - Deleted record. Default value: '0'

## Customer comment Base (object)
+ customer_id: `1` (number, required) - Customer ID
+ datetime: `0000-00-00 00:00:00` (string) - Customer comment created datetime
+ administrator_id: `1` (number) - Administrator ID
+ type: `comment` (string) - Type: 'comment', 'customer', 'finance', 'service', 'message', 'support', 'call'. Default: 'comment'
+ pinned_date: `0000-00-00 00:00:00` (string) - Pinned date time
+ class: `info` (string) - Class: 'default', 'primary', 'success', 'warning', 'danger', 'info'.
+ title: `title` (string) - Title
+ name: `name` (string) - Name
+ comment: `comment` (string, required) - Comment
+ values: `values` (string) - Values
+ scheduled_send_time: `0000-00-00 00:00:00` (string) - Scheduled date time
+ assigned_to: `1` (number) - Admin ID to be assigned a customer comment
+ is_done: 1 (string) - Is done. Default value: '0'
+ is_send: 1 (string) - Is send. Default value: '0'
+ is_pinned: 1 (string) - Is pinned. Default value: '0'

## Customer comments Response(Customer comment Base)
+ id: `1` (number, required) - Customer comment ID

## Customer comment Id (object)
+ id: `1` (number, required) - Customer comment ID

## Customer comment Response (object)
+ id: `1` (number) - Customer comment ID
+ customer_id: `1` (number, required) - Customer ID
+ datetime: `0000-00-00 00:00:00` (string) - Customer comment created datetime
+ administrator_id: `1` (number) - Administrator ID
+ type: `comment` (string) - Type: 'comment', 'customer', 'finance', 'service', 'message', 'support', 'call'. Default: 'comment'
+ class: `info` (string) - Class: 'default', 'primary', 'success', 'warning', 'danger', 'info'.
+ title: `title` (string) - Title
+ name: `name` (string) - Name
+ comment: `comment` (string, required) - Comment
+ values: `values` (string) - Values
+ scheduled_send_time: `0000-00-00 00:00:00` (string) - Scheduled date time
+ assigned_to: `1` (number) - Admin ID to be assigned a customer comment
+ is_done: `0` (string) - Is done. Default value: '0'
+ is_send: `0` (string) - Is send. Default value: '0'
+ is_pinned: `0` (string) - Is pinned. Default value: '0'

## Customer Response(object)
+ login: `john_doe` (string) - Login
+ status: `new` (string) - Status: 'new', 'active', 'blocked', 'disabled'. Default value: 'new'
+ partner_id: `1` (number, required) - Partner id. You can get it at page "Administration / Partners"
+ location_id: `1` (number, required) - Location id. You can get it at page "Administration / Locations"
+ password: `marla_my_love` (string) - Password
+ name: `John Doe` (string, required) - Full name
+ email: `john.doe@domain.com` (string) - Email
+ billing_email: `john.doe.billing@domain.com` (string) - Billing email
+ phone: `555-0134` (string) - Phone number
+ category: `person` (string, required) - Category: 'person' (for private person) or 'company' (for company). Default value: 'person'
+ street_1: `Paper Street` (string) - Address part #1
+ zip_code (string) - Zip
+ city (string) - City
+ date_add (string) - Date of adding. Format: 'YYYY-MM-DD'. Default value: current date
+ gps (string) - Geo data customer. Format: '49.9902794,36.2303893'.
+ mrr_total (number) - Mrr total. Default value: 0.0000.
+ billing_type (string) - Billing type.
+ added_by (string) - "admin".
+ added_by_id (number) - Id of the administrator who added the custom.
+ last_online (string) - Date last online customer.
+ last_update (string) - Last date update customer.
+ daily_prepaid_cost (number) - Daily prepaid cost.
+ customer_labels (array[Customer label]) - Array of customer labels.
+ subdivision_id: `1` (number) - State/province ID
+ conversion_date (string) - Date conversion customer.
+ daily_prepaid_cost (number) - Cost of daily prepayment.

## Customer Documents Response (object)
+ id: `1` (number)
+ added_by: `api` (string)
+ added_by_id: `1` (number)
+ customer_id: `1` (number, required)
+ type: `uploaded` (string, required)
+ title: `customer document title` (string ,required)
+ created_at: `2017-01-01 16:05:28` (string)
+ updated_at: `2017-01-02 12:12:43` (string)
+ description: `document description` (string) - Document description
+ visible_by_customer: `0` (string) - Visibility on customer portal
+ filename_original: `SOME FILE NAME` (string) - Original document name
+ filename_uploaded: `SOME FILE NAME` (string) - Uploaded document name
+ code: `file code` (string) - Document's code
+ sign_date: `2017-01-01 16:05:28` (string) - Signature date
+ terms_month: `1` (string) - Term (month)
+ end_of_term: `2017-02-01` (string) - End of term
+ sign_contract: `1` (string) - Sign contract
+ terms: `false` (boolean) - This contract has a term
+ download_link: `https://yourdomain/a` (string) - A directly link to this document
+ has_thumbnail: `true` (boolean) - Whether this file has a thumbnail.
+ thumbnail_link: `https://yourdomain/b` (string) - A link to the document's thumbnail. The field is returned when has_thumbnail = true

## Customer Documents ID (object)
+ id: `1` (number) - Customer Documents ID

## Customer Documents Request (object)
+ customer_id: `1` (number, required)
+ type: `uploaded` (string, required)
+ title: `customer document title` (string ,required)
+ description: `document description` (string)
+ visible_by_customer: `0` (string) - Visibility on customer portal

## Customer Statistics (object)
+ id: `1` (number) - ID
+ customer_id: `1` (number) - Customer ID
+ service_id: `1` (string) - Service ID
+ tariff_id: `1` (string) - Tariff ID
+ partner_id: `1` (string) - Partner ID
+ nas_id: `1` (string) - NAS ID
+ login (string) - Login
+ in_bytes: `0` (string) - Download
+ out_bytes: `0` (string) - Upload
+ start_date: `0000-00-00` (string) - Start date
+ start_time: `00:00:00` (string) - Start time
+ end_date: `1970-01-01` (string) - End date
+ end_time: `01:00:00` (string) - End time
+ ipv4: `0.0.0.0` (string) - IPv4
+ ipv6 (string) - IPv6
+ mac (string) - MAC address
+ call_to (string) - Call to
+ port (string) - Port
+ error: `0` (string) - Error
+ error_repeat: `0` (string) - Error repeat
+ price: `0.0000` (string) - Price
+ session_id (string) - Session ID
+ terminate_cause (string) - Terminate cause

## Customer Billing (object)
+ customer_id: `1` (number) - Customer ID
+ enabled: `1` (number)
+ type: `1` (string)
+ deposit: `7412.0000` (string)
+ billing_date: `1` (string)
+ billing_due: `2` (string)
+ blocking_period: `0` (string)
+ grace_period: `3` (string)
+ make_invoices: `1` (string)
+ payment_method: `1` (string)
+ min_balance: `0.0000` (string)
+ request_auto_enable: `0` (string)
+ request_auto_day: `1` (string)
+ request_auto_period: `0` (string)
+ reminder_enable: `1` (string)
+ reminder_day_1: `2` (string)
+ reminder_day_2: `8` (string)
+ reminder_day_3: `20` (string)
+ reminder_payment: `0` (string)
+ reminder_payment_value: `0.0000` (string)
+ reminder_payment_comment (string)
+ reminder_type: `0` (string)
+ billing_person (string)
+ billing_street_1 (string)
+ billing_zip_code (string)
+ billing_city (string)
+ sub_billing_mode: `independent` (string) - Linked billing mode: 'independent', 'aggregated'. Default: 'independent'. Defines the billing mode for sub-accounts
+ request_auto_type: `1` (number) - Proforma payment period
+ request_auto_next: `0000-00-00` (string) - Next request
+ send_finance_notification: `1` (string) - Send billing notifications
+ partner_percent: `0.0000` (string) - Partner percent

## Customer Online Base (object)
+ customer_id: `1` (string)
+ service_id: `1` (string)
+ tariff_id: `1` (string)
+ partner_id: `1` (string)
+ nas_id: `1` (string)
+ login: `login_8873` (string)
+ username_real: `14:71:0e:fc:ec:fa` (string)
+ in_bytes: `100125` (string)
+ out_bytes: `100998` (string)
+ start_session: `2016-01-01 16:05:28` (string)
+ ipv4: `10.0.0.1` (string)
+ ipv6 (string)
+ mac (string)
+ call_to (string)
+ port (string)
+ price: `0.0000` (string)
+ time_on: `0` (string)
+ last_change: `2016-01-15 16:05:28` (string)
+ type: `mikrotik_api` (string)
+ login_is: `user` (string)
+ session_id (string)

## Customer Online Response (Customer Online Base)
+ id: `1` (number, required) - Record ID

## Online Id (object)
+ id: `1` (number, required) - Record ID

## Customer Documents (object)
+ id: `1` (number)
+ added_by: `api` (string) - Added by: 'api', 'admin', 'customer', 'system'. Default value: 'admin'
+ added_by_id: `1` (string) - Admin or Api key id
+ customer_id: `1` (string)
+ type: `uploaded` (string) - Type: 'uploaded', 'generated'.
+ title: `api document title` (string)
+ created_at: `2017-01-01 16:05:28` (string)
+ updated_at: `2017-01-02 12:12:43` (string)
+ description: `document description` (string)
+ visible_by_customer: `0` (string) - Is visible by customer: '0', '1'. Default value: '0'
+ file: `cURL file` (string) - cURL file
+ filename_original: `SOME FILE NAME` (string)
+ filename_uploaded: `SOME FILE NAME` (string)
+ code: `file code` (string) - Code of generated files

## Customer Changes Logs First (object)
+ date: `2019-11-16` (string) - date of change
+ time: `00:01:06` (string) - time of change
+ old\_status: `new` (string) - customer status before change
+ new\_status: `active` (string) - customer status after change
+ service\_id: null (string, nullable) - id of customer service
+ tariff\_type: null (string, nullable) - Type of tariff: 'internet', 'voice', 'custom' (recurring).
+ old\_tariff: null (string, nullable) - id of old tariff.
+ new\_tariff: null (string, nullable) - id of new tariff.
+ administrator_id: `0` (number) - id of admin (system change if 0).

## Customer Changes Logs Service (object)
+ date: `2020-02-01` (string) - date of change
+ time: `23:05:45` (string) - time of change
+ old\_status: null (string, nullable) - customer status before change
+ new\_status: null (string, nullable) - customer status after change
+ service\_id: `15` (number) - id of customer service
+ tariff_type: `internet` (string) - Type of tariff: 'internet', 'voice', 'custom' (recurring).
+ old\_tariff: `5` (number) - id of old tariff.
+ new\_tariff: `593` (number) - id of new tariff.
+ administrator_id: `5` (number) - id of admin (system change if 0).

## Customer Changes Logs (object)
+ date: `2020-05-30` (string) - date of change
+ time: `14:23:55` (string) - time of change
+ old\_status: `active` (string) - customer status before change
+ new\_status: `disabled` (string) - customer status after change
+ service_id: null (string, nullable)- id of customer service
+ tariff_type: null (string, nullable) - Type of tariff: 'internet', 'voice', 'custom' (recurring).
+ old\_tariff: null (string, nullable) - id of old tariff.
+ new\_tariff: null (string, nullable) - id of new tariff.
+ administrator_id: `12` (number) - id of admin (system change if 0).

## Customer Changes Logs Last (object)
+ date: `2020-08-01` (string) - date of change
+ time: `09:59:48` (string) - time of change
+ old_status: `disabled` (string) - customer status before change
+ new_status: `active` (string) - customer status after change
+ service_id: null (string, nullable) - id of customer service
+ tariff_type: null (string, nullable) - Type of tariff: 'internet', 'voice', 'custom' (recurring).
+ old_tariff: null (string, nullable) - id of old tariff.
+ new_tariff: null (string, nullable) - id of new tariff.
+ administrator_id: `2` (number) - id of admin (system change if 0).

## CAP history Response (object)
+ service_id: `34` (string) - ID of customer internet service
+ date_time: `2020-01-29 16:01:48` (string) - Date
+ action: `manual_top_up` (string) - Actions: 'auto_top_up', 'manual_top_up', 'portal_top_up', 'api_top_up', 'rollover_to_next_month', 'rollover_to_new_service', 'end_of_period', 'end_of_validity', 'disable_top_ups', 'ended_quantity', 'delete', 'remove_cap'
+ amount: `40480000` (number) - amount of action (bytes)
+ total_amount: `40480000` (number) - total amount

## Cards Prepaid serie (object)
+ id: `120` (number, required) - Voucher ID
+ status: `new` (string) - Voucher Status: "active", "used", "disabled", "expired", "new", "online"
+ login: `SomeRANdomGeneratedLogin` (string) - Voucher Login (unique)
+ speed_download: `1024` (number) - Download speed kbps
+ speed_upload: `1024` (number) - Upload speed kbps
+ traffic_in_total: `5000` (number) - Traffic In total
+ traffic_in_used: `0` (number) - Traffic In used
+ traffic_out_total: `5000` (number) - Traffic Out total
+ traffic_out_used: `0` (number) - Traffic Out used
+ traffic_all_total: `9000` (number) - Traffic All total
+ traffic_all_used: `0` (number) - Traffic All used
+ time_online: `48` (number) - Time online
+ time_online_selector: `hours` (string) - Time online selector: "minutes", "hours", "days"
+ time_online_used: `0` (number) - Used time online

## Card Prepaid Base (object)
+ id: `120` (number, required) - Voucher ID
+ type: `prepaid` (string) - Card type
+ status: `new` (string) - Voucher Status: "active", "used", "disabled", "expired", "new", "online"
+ price: `5.00` (number) - Voucher price
+ pool_id: `2` (number) - IPv4 Pool ID, **"-1" for "Router will assign IP", "0" - Any**
+ partner_id: `1` (number) - Partner ID (0 - Any)
+ location_id: `2` (number) -  Location ID (0 - Any)
+ speed_download: `1024` (number) - Download speed kbps
+ speed_upload: `1024` (number) - Upload speed kbps
+ traffic_in_total: `5000` (number) - Traffic In total
+ traffic_in_used: `0` (number) - Traffic In used
+ traffic_in_used_mb: `0` (number) - Traffic In used Mb
+ traffic_out_total: `5000` (number) - Traffic Out total
+ traffic_out_used: `0` (number) - Traffic Out used
+ traffic_out_used_mb: `0` (number) - Traffic Out used Mb
+ traffic_all_total: `9000` (number) - Traffic All total
+ traffic_all_used: `0` (number) - Traffic All used
+ traffic_all_used_mb: `0` (number) - Traffic All used Mb
+ prefix: `SPLCP` (string) - Serie Prefix
+ short_login: `SomeRANdomGeneratedLogin` (string) - Voucher Login (unique)
+ login: `SPLCPSomeRANdomGeneratedLogin` (string) - Voucher Login with Prefix (unique)
+ password: `dJHBdwu56R` (string) - Vaucher password
+ seller_name: `seller name` (string) - Vaucher seller name
+ full_name: `full name` (string) - Full name
+ email: `test@email.box` (string) - email
+ phone: `1234567` (string) - Phone
+ remark: `remark` (string) - Remark
+ activated_at: `0000-00-00 00:00:00` (string) - Voucher activation datetime
+ time_online: `48` (number) - Time online
+ time_online_selector: `hours` (string) - Time online selector: "minutes", "hours", "days"
+ time_online_used: `0` (number) - Used time online
+ valid_till: `2018-12-31` (string) - Valid till
+ time_expired: `0` (number) - Expired time
+ mac: `00:00:00:00:00:00` (string) - MAC address
+ customer_id: `1` (number) - Customer ID
+ tariff_id: `1` (number) - Tariff ID
+ invoice_id: `1` (number) - Invoice ID
+ expired_by_selector: `NULL` (string)
+ time_expired_selector: `minutes` (string) - Expired selector: "minutes", "hours", "days"
+ serie: `201801` (string) - Serie
+ changed: `Y` (string) - Changed: "Y", "N"
+ is_import: `1` (string) - Card is import: "1", "0"
+ created_at: `2018-01-22 14:09:26` (string) - Created at

## Cards Prepaid Series (object)
+ serie: `201801` (string, required) - Voucher Prepaid Series ID
+ prefix: `SPLCP` (string, required) - Voucher Prepaid Series Prefix
+ amount: `15` (number) - Voucher Praid amount
+ created_at: `2018-01-12 10:55:34` (string) - Voucher Prepaid Serie created at

## Cards Prepaid Base (object)
+ prefix: `SPLCP` (string, required) - Voucher Prepaid Series Prefix
+ quantity: `15` (number, required) - Vouchers Prepaid amount
+ price: `5` (number, required) - Price per Voucher
+ valid_till: `2019-12-31` (string, required) - Validity date

## Cards Prepaid Series Id (object)
+ serie: `201803` (string) - Voucher Prepaid Series ID

## Cards Prepaid Id (object)
+ id: `121` (number) - Voucher Prepaid ID

## Cards Prepaid Create (object)
+ prefix: `PREFIX-` (string, required) - Voucher prefix
+ quantity: `10` (number, required) - Serie Quantity
+ price: `5` (number, required) - Serie price per voucher
+ valid_till: `2019-01-01` (string, required) - Valid date
+ pool_id: `-1` (number) - IPv4 pool id: 0 - Any, -1 - Router assign IP
+ partner_id: `0` (number) - Partner Id, 0 - Any
+ location_id: `0` (number) - Location Id, 0 - Any
+ speed_download: `1024` (number) - Download speed per voucher
+ speed_upload: `1024` (number) - Upload speed per voucher
+ traffic_in_total: `5000` (number) - Traffic IN per voucher
+ traffic_out_total: `5000` (number) - Traffic OUT per voucher
+ traffic_all_total: `9000` (number) - Traffic Total per voucher
+ time_online: `48` (number) - Online time
+ time_online_selector: `hours` (string) - Online time unit

## Cards Prepaid Create new (Cards Prepaid Create)
+ `expired_by`: `valid_date` (string,required) - Validity method: "valid\_date", "activation\_time"

## Cards Prepaid (Card Prepaid Base)
+ `expired_by`: `valid_date` (string,required) - Validity method: "valid\_date", "activation\_time"

## Prepaid Cards Statistics (object)
+ id: `1` (number) - ID
+ card_id: `1` (number) - Customer ID
+ nas_id: `1` (string) - NAS ID
+ login (string) - Login
+ in_bytes: `0` (string) - Download
+ out_bytes: `0` (string) - Upload
+ start_date: `0000-00-00` (string) - Start date
+ start_time: `00:00:00` (string) - Start time
+ end_date: `1970-01-01` (string) - End date
+ end_time: `01:00:00` (string) - End time
+ ipv4: `0.0.0.0` (string) - IPv4
+ mac (string) - MAC address
+ call_to (string) - Call to
+ port (string) - Port
+ error: `0` (string) - Error
+ error_repeat: `0` (string) - Error repeat
+ session_id (string) - Session ID
+ terminate_cause: `0` (string) - Terminate cause
+ nas_identifier: 'PPPD' (string) - NAS identifier

## Send Document Base (object)
+ type: `mail` (string, required) - Type of message: "mail", "sms", "customer-portal", "customer-portal\_and\_mail"
+ id: `5` (number, required) - Document id. **Attention! In case document_type "empty" is customer's id to send message**
+ subject: `Customer contract` (string, required) - Message subject

## Send Document (Send Document Base)
+ `document_type`: `document` (string, required) - Type of desired document: "document", "invoice", "request", "payment", "credit_note", "empty".
+ `template_id`: `15` (number) - Template id for message, **Beware! template_id MUST be before message.** "template_id" will be required if "message" is empty.
+ `message`: `Hello customer, We have sent you a contract document` (string) - Message text. "message" will be required if "template_id" is empty.

# Group CRM

## Leads collection [/admin/crm/leads]

### Create a Lead [POST]
Creates a new Lead.

+ Request (application/json)
    + Attributes (Lead Base)

+ Response 201 (application/json)
    + Attributes (Lead Id)

### List all Leads [GET]
Returns a list of your Leads.

+ Response 200 (application/json)
    + Attributes (array[Leads Response])

## Lead [/admin/crm/leads/{id}]
Work with Leads.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Lead.

### Retrieve a Lead [GET]
Retrieves the Lead with the given ID.

+ Response 200 (application/json)
    + Attributes (Lead Response)

### Update a Lead [PUT]
Update the Lead with the given ID.

+ Request (application/json)

        {
            "name": LeadNewName
        }

+ Response 202 (application/json)

### Convert Lead to Customer [PUT /admin/crm/leads/{id}--convert-to-customer-simple]
Convert Lead to Customer with the given ID

+ Request (application/json)
    + Attributes (Lead convert to customer)

+ Response 202 (application/json)

### Delete a Lead [DELETE]
Delete the Lead with the given ID.

+ Response 204

## Leads info collection [/admin/crm/leads-info]

### List all Leads info [GET]
Returns a list of your Leads info.

+ Response 200 (application/json)
    + Attributes (array[Lead info Response])

## Lead info [/admin/crm/leads-info/{id}]
Work with Lead info.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Lead.

### Retrieve a Lead info [GET]
Retrieves the Lead info with the given ID.

+ Response 200 (application/json)
    + Attributes (Lead info Response)

### Update a Lead info [PUT]
Update the Lead info with the given ID.

+ Request (application/json)

        {
            "score": 25,
            "owner": 1
        }

+ Response 202 (application/json)

## Leads comments collection [/admin/crm/leads-notes]

### Get all leads comments [GET]
    Get all leads comments
+ Response 200 (application/json)
    + Attributes (array[Lead Notes Response])

### Create Lead comment [POST]
    Create lead comment record.
+ Request (application/json)
    + Attributes (Lead Notes Request)

+ Response 201 (application/json)
    + Attributes (Lead Comment ID)

## Lead comment [/admin/crm/leads-notes?id={id}]

### Retrieve a lead comment [GET]
    Retrieves the Lead comment with the given ID.
+ Parameters
    + id: `1--2` (required, string) - Lead_id: 1 and Comment_id: 2.
+ Response 200 (application/json)
    + Attributes (Lead Notes Response)

## Leads search [/admin/crm/leads?{params}]

### Leads search [GET]
For search leads you must add must create array of search params and add its URL-encoded version to URL.
In Request section you can see search array structure example.

+ Parameters
    + params: `{"main_attributes": ["name": "lead1"], "additional_attributes": ["some_additional_attribute": ["value_a", "value_b"], "another_additonal_attribute": "some_value"]}` (required, string) - URL-encoded array of search params.

+ Response 200 (application/json)
    + Attributes (array[Lead Response])

## Lead Documents collection [/admin/crm/leads-documents/{lead_id}]
Work with online lead documents list.

+ Parameters
    + lead_id (required, number, `1`) ... The ID of the desired lead documents records. **Beware: this is lead ID!!!**

### Retrieve lead documents list [GET]
Retrieves lead documents list.

+ Response 200 (application/json)
    + Attributes (array[Lead Documents Response])

## Create Lead document [/admin/crm/leads-documents]

### Create Lead document [POST]
Create lead document record before next step **file upload**.

+ Request (application/json)
    + Attributes (Lead Documents Request)

+ Response 201 (application/json)
    + Attributes (Lead Documents ID)

## Lead Documents upload file [/admin/crm/leads-documents/{id}--upload]
Work with lead documents.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired lead document. **Beware: this is lead document ID!!!**

### Upload file for lead document [POST]
Upload file for **existing lead document record**.

+ Request (multipart/form-data)

        {
            "file": cURL file
        }

+ Response 202 (application/json)

## Lead Documents [/admin/crm/leads-documents/{id}]
Work with lead documents.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired lead document. **Beware: this is lead document ID!!!**

### Update a Lead Document [PUT]
Update the Lead Document with the given ID.

+ Request (application/json)

        {
            "title": new title,
            "description": new description
        }

+ Response 202 (application/json)

### Delete Lead Document [DELETE]
Delete Lead Document with the given document ID.

+ Response 204

## Download Lead document [/admin/config/download/lead_documents--{id}]
You could find more details in [Download documents](#reference/config/download-documents) block.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired lead document. **Beware: this is lead document ID!!!**

### Download Lead documents [GET]

+ Response 200 (application/json)
    + Attributes (Lead Download Response)

## Quotes collection [/admin/crm/quotes]

### Create a Quote [POST]
Creates a new Quote.

+ Request (application/json)
    + Attributes (Quote Base)

+ Response 201 (application/json)
    + Attributes (Quote Id)

### List all Quotes [GET]
Returns a list of your Quotes.

+ Response 200 (application/json)
    + Attributes (array[Quotes Response])

## Quote [/admin/crm/quotes/{id}]
Work with Quote.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Quote.

### Retrieve a Quote [GET]
Retrieves the Quote with the given ID.

+ Response 200 (application/json)
    + Attributes (Quotes Response)

### Update a Quote [PUT]
Update the Quote with the given ID.

+ Request (application/json)

        {
            "status": accepted
        }

+ Response 202 (application/json)

### Delete a Quote [DELETE]
Delete the Quote with the given ID.

+ Response 204

# Data Structures

## Lead Base (object)
+ status: `new` (string) - Status: 'new', 'active', 'blocked', 'disabled'. Default value: 'new'
+ `billing_type`: `recurring` (string) - Billing type: 'recurring', 'prepaid_monthly'
+ partner_id: `1` (number, required) - Partner id. You can get it at page "Administration / Partners"
+ location_id: `1` (number, required) - Location id. You can get it at page "Administration / Locations"
+ added_by: `admin` (string) - Added by: 'api', 'admin', 'widget'
+ added_by_id: `1` (number) - Added by id
+ name: `Lead Name` (string, required) - Full name
+ email: `test@mail.com` (string) - Email
+ billing_email: `test@mail.com` (string) - Billing email
+ phone: `555-0135` (string) - Phone number
+ category: `person` (string, required) - Category: 'person' (for private person) or 'company' (for company). Default value: 'person'
+ street_1: `2nd Street` (string) - Address part #1
+ zip_code (string) - Zip
+ city (string) - City
+ date_add (string) - Date of adding. Format: 'YYYY-MM-DD'. Default value: current date
+ last_update: `2022-04-21 05:09:06` (string) - Last date update customer.
+ subdivision_id: `1` (number) - State/province ID

## Lead convert to customer (object)
+ status: `new` (string) - Status: 'new', 'active', 'blocked', 'disabled'. Default value: 'active'
+ category: `person` (string) - Category: 'person' (for private person) or 'company' (for company). Default value: 'person'

## Leads Response(Lead Base)
+ id: `1` (number, required) - Lead ID

## Lead Id (object)
+ id: `1` (number, required) - Lead ID

## Lead info Response (object)
+ customer_id: `1` (number) - Lead ID
+ deal_value: `100` (number) - Deal amount
+ deal_comment: `+100` (string) - Deal comment
+ score: `20` (number) - Score number (min: 1, max: 100)
+ crm_status: `Contacted`  (string) - status (CRM pipeline)
+ owner: `api` (string) - Admin ID or 'api'
+ source (string) - Lead source
+ last_contacted: `2019-05-05 16:05:05` - Last contacted date
+ last_status_changed: `2019-05-05 16:05:05` (string) - Last status changed date
+ status_due_notification_sent: `1` (string) - Status due notification sent: '1', '0'

## Lead Notes Response(object)
+ id: `1` (number) - Lead Notes ID
+ customer_id: `1` (number, required) - Lead ID.
+ datetime: `2019-07-03 12:38:14` (string) - Date added comment.
+ administrator_id: `1` (number) - Administrator ID.
+ type: `comment` (string) - Type notes: 'comment', 'customer', 'finance', 'service', 'message', 'call'. Default comment.
+ pinned_date: `2019-07-03 12:38:14` (string) - Date pinned comment.
+ class: `success` (string) - Class for notes.
+ title: `test notes` (string) - Title for notes.
+ name: `name notes` (string) - Name for notes.
+ comment: `text comment notes` (string, required) - Comment.
+ values: `values` (string) - Values.
+ scheduled_send_time: `0000-00-00 00:00:00` (string) - Scheduled date time
+ assigned_to: `1` (number) - Admin ID to be assigned a customer comment
+ is_done: `0` (string) - Is done. Default value: '0'
+ is_send: `0` (string) - Is send. Default value: '0'
+ is_pinned: `0` (string) - Is pinned. Default value: '0'

## Lead Notes Request(object)
+ customer_id: `1` (number, required) - Lead ID.
+ type: `comment` (string) - Type notes: 'comment', 'customer', 'finance', 'service', 'message', 'call'. Default comment.
+ class: `success` (string) - Class for notes.
+ title: `test notes` (string) - Title for notes.
+ name: `name notes` (string) - Name for notes.
+ comment: `text comment notes` (string, required) - Comment.
+ values: `values` (string) - Values.

## Lead Response(object)
+ status: `new` (string) - Status: 'new', 'active', 'blocked', 'disabled'. Default value: 'new'
+ partner_id: `1` (number, required) - Partner id. You can get it at page "Administration / Partners"
+ location_id: `1` (number, required) - Location id. You can get it at page "Administration / Locations"
+ password: `secret@@string` (string) - Password
+ name: `Lead Name` (string, required) - Full name
+ email: `test@mail.com` (string) - Email
+ phone: `555-0135` (string) - Phone number
+ category: `person` (string, required) - Category: 'person' (for private person) or 'company' (for company). Default value: 'person'
+ street_1: `2d Street` (string) - Address part #1
+ zip_code (string) - Zip
+ city (string) - City
+ date_add (string) - Date of adding. Format: 'YYYY-MM-DD'. Default value: current date
+ subdivision_id: `1` (number) - State/province ID

## Lead Documents Response (object)
+ id: `1` (number)
+ added_by: `api` (string)
+ added_by_id: `1` (number)
+ customer_id: `1` (number, required)
+ type: `uploaded` (string, required)
+ title: `lead document title` (string ,required)
+ created_at: `2019-01-01 16:05:28` (string)
+ updated_at: `2019-01-02 12:12:43` (string)
+ description: `document description` (string) - Document description
+ visible_by_customer: `0` (string) - Will be visible on customer portal
+ filename_original: `SOME FILE NAME` (string) - Original document name
+ filename_uploaded: `SOME FILE NAME` (string) - Uploaded document name
+ code: `file code` (string) - Document's code
+ sign_date: `2017-01-01 16:05:28` (string) - Signature date
+ terms_month: `1` (string) - Term (month)
+ end_of_term: `2017-02-01` (string) - End of term
+ sign_contract: `1` (string) - Sign contract
+ terms: `false` (boolean) - This contract has a term
+ download_link: `https://yourdomain/a` (string) - A directly link to this document
+ has_thumbnail: `true` (boolean) - Whether this file has a thumbnail.
+ thumbnail_link: `https://yourdomain/b` (string) - A link to the document's thumbnail.

## Lead Documents ID (object)
+ id: `1` (number) - Lead Documents ID

## Lead Comment ID (object)
+ id: `1` (number) - Lead Comment ID

## Lead Documents Request (object)
+ customer_id: `1` (number, required)
+ type: `uploaded` (string, required)
+ title: `lead document title` (string ,required)
+ description: `document description` (string)
+ visible_by_customer: `0` (string) - Will be visible on customer portal

## Lead Documents (object)
+ id: `1` (number)
+ added_by: `api` (string) - Added by: 'api', 'admin', 'customer', 'system'. Default value: 'admin'
+ added_by_id: `1` (string) - Admin or Api key id
+ customer_id: `1` (string)
+ type: `uploaded` (string) - Type: 'uploaded', 'generated'.
+ title: `api document title` (string)
+ created_at: `2019-01-01 16:05:28` (string)
+ updated_at: `2019-01-02 12:12:43` (string)
+ description: `document description` (string)
+ visible_by_customer: `0` (string) - Will be visible on customer portal
+ file: `cURL file` (string) - cURL file
+ filename_original: `SOME FILE NAME` (string)
+ filename_uploaded: `SOME FILE NAME` (string)
+ code: `file code` (string) - Code of generated files

## Lead Download Response (object)
+ name: `lead_test_document.pdf` (string) - Documents name
+ content_type: `application\/pdf` (string) - Content type
+ content: `V=A000de=BERi0xLjQKJeLjUeXBlIC9QYWdlC...` (string) - Document content encoded in  base64 format

## Quote Base (object)
+ customer_id: `1` (number, required) - Quote ID
+ number (string) - Quote number
+ status: `new` (string) - Status: 'new', 'sent', 'on_review', 'accepted', 'denied'
+ date_created: `2019-05-16` (string) - Date created
+ real_create_datetime: `2019-05-16 12:00:00` (string) - Real create datetime
+ date_updated: `2019-05-16` (string) - Date updated
+ date_of\_decision: `2019-05-16` (string) - Date when quote was accepted or denied
+ date_till: `2019-06-16` (string) - Date till
+ total: `120` (number) - Total amount
+ invoice_id: `1` (number) - Invoice ID
+ request_id (number) - Request ID
+ is_sent: false (boolean, required) - Values: true or false. Is sent Quote
+ note: `some text` (string) - Note
+ memo: `some text` (string) - Memo
+ signature: `some text` (string) - Signature
+ is_customers: `false` (boolean) - Is customer's quote
+ added_by: `api` (string) - Added by: 'api', 'admin', 'system'
+ added_by_id: 1 (number) - Added by ID
+ items (array[Quote item], required) - Items of Quote

## Quote item (object)
+ description: `Desc of item` (string, required) - Description of Quote item
+ quantity: `1` (number, required) - Quantity. Default: 1
+ unit (number, required) - Unit
+ price: `120` (number) - Price
+ tax: `0` (number) - VAT %

## Quote Id (object)
+ id: `1` (number, required) - Quote ID

## Quotes Response(Quote Base)
+ id: `1` (number, required) - Quote ID

# Group Communications

## Calls collection [/admin/communications/calls]

### Create a Call [POST]
Creates a new call.

+ Request (application/json)
    + Attributes (Communication Call Base)

+ Response 201 (application/json)
    + Attributes (Communication Call Id)

### List all Calls [GET]
Returns a list of your Calls.

+ Response 200 (application/json)
    + Attributes (array[Communication Call Response])

## Call [/admin/communications/calls/{id}]
Work with Leads.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Call.

### Retrieve a Call [GET]
Retrieves the Call with the given ID.

+ Response 200 (application/json)
    + Attributes (Communication Call Response)

### Update a Call [PUT]
Update the Call with the given ID.

+ Request (application/json)

        {
            "duration": 300
        }

+ Response 202 (application/json)

### Delete a Call [DELETE]
Delete the Call with the given ID.

+ Response 204

# Data Structures

## Communication Call Base (object)
+ id: `1` - Call ID
+ from: `1234500` (string, required) - Phone number of author
+ to: `5432100` (string, required) - Phone number of receiver
+ duration: `60` (number, required) - Duration of the call in seconds
+ direction: `incoming` (string) - Call direction: : 'incoming', 'outgoing'. If empty will be detected automatically
+ comment: `Text coment` (string) â€“ The comment or message related to the communication call.
+ recording_url: `http://test.resource.com/recording` (string) - Url of the page where you can view recording
+ voice_file_url: `http://test.resource.com/get-file` (string) - Link to recording file. Needed for playback in system
+ datetime: `2021-09-07 10:00:00` (string, required) - Date of call
+ ticket_id: `1` (number) - Ticket id. If you want link call to the ticket
+ client_id: `1` (number) - Customer/Lead id. If empty will be defined by phone number
+ agent_id: `1` (number) - Agent(admin) id. If empty will be defined by phone number
+ added_by: `system` (enum[string])
    The identifier who added the communication call
    + Members
        + `system`
        + `api`
        + `admin`
+ added_by_id: `1` (number) â€“ The ID of the person who added the communication call.

## Communication Call Response(Communication Call Base)
+ id: `1` (number, required) - Call ID

## Communication Call Id (object)
+ id: `1` (number, required) - Call ID

# Group Services

## Internet services collection [/admin/customers/customer/{customer_id}/internet-services]

+ Parameters
    + customer_id (required, number, `1`) ... The ID of the desired Customer.

### Create service [POST]
Creates new Internet service.

+ Request (application/json)
    + Attributes (Customer Internet service Base)

+ Response 201 (application/json)
    + Attributes (Customer Internet service Id)

### List all customer services [GET]
Returns list of all customer Internet services.

+ Response 200 (application/json)
    + Attributes (array[Customer Internet service Response])

## Search Internet services [/admin/customers/customer/0/internet-services?{params}]
Get list internet services by parameters.

+ Parameters
    + params (required, string, `http_build_query($search)`) ... Any parameters of service. <br>You should set at least one service`s parameter. <br>This parameters should be converted to query string.<br>For example:<br>$search = [ <br>&emsp;&emsp;'main_attributes' => [<br>&emsp;&emsp;&emsp;&emsp;'tariff_id' => '1'<br>&emsp; &emsp;]<br>]<br>;<br>

### List internet services by parameters [GET]
Returns list internet services by parameters.

+ Response 200 (application/json)
    + Attributes (array[Customer Internet service Response])

## Internet services [/admin/customers/customer/{customer_id}/internet-services--{service_id}]
Work with customer Internet services.

+ Parameters
    + customer_id (required, number, `1`) ... The ID of the desired Customer.
    + service_id (required, number, `1`) ... The ID of the desired Internet service.

### Retrieve Internet service [GET]
Retrieves Internet service with the given ID.

+ Response 200 (application/json)
    + Attributes (Customer Internet service Response)

### Update Internet service [PUT]
Update Internet service with the given ID.

+ Request (application/json)

        {
            "description": New Description
        }

+ Response 202 (application/json)

### Start Internet service [PUT /admin/customers/customer/{customer_id}/internet-services--{service_id}?action=start]
Start Internet service with the given ID. This request available only for customers with billing type `Prepaid (Daily)`. Also start/stop service should be enabled in config (`Config / Main / Portal - Services`).

+ Request (application/json)

        {
        }

+ Response 202 (application/json)

### Stop Internet service [PUT /admin/customers/customer/{customer_id}/internet-services--{service_id}?action=stop]
Stop Internet service with the given ID. This request available only for customers with billing type `Prepaid (Daily)`. Also start/stop service should be enabled in config (`Config / Main / Portal - Services`).

+ Request (application/json)

        {
        }

+ Response 202 (application/json)

### Delete Internet service [DELETE]
Delete Internet service with the given ID.

+ Response 204

## Internet service geo data [/admin/customers/customer/{customer_id}/geo-internet-service--{service_id}]
Work with geo data of the Internet service.

+ Parameters
    + customer_id (required, number, `1`) ... The ID of the desired Customer.
    + service_id (required, number, `1`) ... The ID of the desired Internet service.

### Retrieve the Internet service geo data [GET]
Retrieve the geo data of the Internet service.

+ Response 200 (application/json)
    + Attributes (Geo Data)

### Update the Internet service geo data [PUT]
Update geo data of the Internet service. You have to use update geo data API even you want to create it.

+ Request (application/json)
    + Attributes (Geo Data)

+ Response 202 (application/json)

## Internet service traffic write to RRD [/admin/customers/customer-internet-services-rrd/{customer_id}--{service_id}]

### Write traffic to RRD [POST]
Write the traffic for internet service to RRD.

+ Request (application/json)
    + Attributes (Service Traffic RRD)

+ Response 201 (application/json)

## Voice services collection [/admin/customers/customer/{customer_id}/voice-services]

+ Parameters
    + customer_id (required, number, `1`) ... The ID of the desired Customer.

### Create service [POST]
Creates new Voice service.

+ Request (application/json)
    + Attributes (Customer Voice service Base)

+ Response 201 (application/json)
    + Attributes (Customer Voice service Id)

### List all customer services [GET]
Returns list of all customer Voice services.

+ Response 200 (application/json)
    + Attributes (array[Customer Voice service Response])

## Search Voice services [/admin/customers/customer/0/voice-services?{params}]
Get list voice services by parameters.

+ Parameters
    + params (required, string, `http_build_query($search)`) ... Any parameters of service. <br>You should set at least one service`s parameter. <br>This parameters should be converted to query string.<br>For example:<br>$search = [ <br>&emsp;&emsp;'main_attributes' => [<br>&emsp;&emsp;&emsp;&emsp;'tariff_id' => '1'<br>&emsp; &emsp;]<br>];<br>

### List voice services by parameters [GET]
Returns list voice services by parameters.

+ Response 200 (application/json)
    + Attributes (array[Customer Voice service Response])

## Voice services [/admin/customers/customer/{customer_id}/voice-services--{service_id}]
Work with customer Voice services.

+ Parameters
    + customer_id (required, number, `1`) ... The ID of the desired Customer.
    + service_id (required, number, `1`) ... The ID of the desired Voice service.

### Retrieve Voice service [GET]
Retrieves Voice service with the given ID.

+ Response 200 (application/json)
    + Attributes (Customer Voice service Response)

### Update Voice service [PUT]
Update Voice service with the given ID.

+ Request (application/json)

        {
            "description": New Description
        }

+ Response 202 (application/json)

### Start Voice service [PUT /admin/customers/customer/{customer_id}/voice-services--{service_id}?action=start]
Start Voice service with the given ID. This request available only for customers with billing type `Prepaid (Daily)`. Also start/stop service should be enabled in config (`Config / Main / Portal - Services`).

+ Request (application/json)

        {
        }

+ Response 202 (application/json)

### Stop Voice service [PUT /admin/customers/customer/{customer_id}/voice-services--{service_id}?action=stop]
Stop Voice service with the given ID. This request available only for customers with billing type `Prepaid (Daily)`. Also start/stop service should be enabled in config (`Config / Main / Portal - Services`).

+ Request (application/json)

        {
        }

+ Response 202 (application/json)

### Delete Voice service [DELETE]
Delete Voice service with the given ID.

+ Response 204

## Recurring services collection [/admin/customers/customer/{customer_id}/recurring-services]

+ Parameters
    + customer_id (required, number, `1`) ... The ID of the desired Customer.

### Create service [POST]
Creates new Recurring service.

+ Request (application/json)
    + Attributes (Customer Recurring service Base)

+ Response 201 (application/json)
    + Attributes (Customer Recurring service Id)

### List all customer services [GET]
Returns list of all customer Recurring services.

+ Response 200 (application/json)
    + Attributes (array[Customer Recurring service Response])

## Search Recurring services [/admin/customers/customer/0/recurring-services?{params}]
Get list Recurring services by parameters.

+ Parameters
    + params (required, string, `http_build_query($search)`) ... Any parameters of service. <br>You should set at least one service`s parameter. <br>This parameters should be converted to query string.<br>For example:<br>$search = [ <br>&emsp;&emsp;'main_attributes' => [<br>&emsp;&emsp;&emsp;&emsp;'tariff_id' => '1'<br>&emsp; &emsp;]<br>];<br>

### List Recurring services by parameters [GET]
Returns list Recurring services by parameters.

+ Response 200 (application/json)
    + Attributes (array[Customer Recurring service Response])

## Recurring services [/admin/customers/customer/{customer_id}/recurring-services--{service_id}]
Work with customer Recurring services.

+ Parameters
    + customer_id (required, number, `1`) ... The ID of the desired Customer.
    + service_id (required, number, `1`) ... The ID of the desired Recurring service.

### Retrieve Recurring service [GET]
Retrieves Recurring service with the given ID.

+ Response 200 (application/json)
    + Attributes (Customer Recurring service Response)

### Update Recurring service [PUT]
Update Recurring service with the given ID.

+ Request (application/json)

        {
            "description": New Description
        }

+ Response 202 (application/json)

### Start Recurring service [PUT /admin/customers/customer/{customer_id}/recurring-services--{service_id}?action=start]
Start Recurring service with the given ID. This request available only for customers with billing type `Prepaid (Daily)`. Also start/stop service should be enabled in config (`Config / Main / Portal - Services`).

+ Request (application/json)

        {
        }

+ Response 202 (application/json)

### Stop Recurring service [PUT /admin/customers/customer/{customer_id}/recurring-services--{service_id}?action=stop]
Stop Recurring service with the given ID. This request available only for customers with billing type `Prepaid (Daily)`. Also start/stop service should be enabled in config (`Config / Main / Portal - Services`).

+ Request (application/json)

        {
        }

+ Response 202 (application/json)

### Delete Recurring service [DELETE]
Delete Recurring service with the given ID.

+ Response 204

## Bundle services collection [/admin/customers/customer/{customer_id}/bundle-services]

+ Parameters
    + customer_id (required, number, `1`) ... The ID of the desired Customer.

### Create service [POST]
Creates new Bundle service.

+ Request (application/json)
    + Attributes (Customer Bundle service Base)

+ Response 201 (application/json)
    + Attributes (Customer Bundle service Id)

### List all customer services [GET]
Returns list of all customer Bundle services.

+ Response 200 (application/json)
    + Attributes (array[Customer Bundle service Response])

## Search Bundle services [/admin/customers/customer/0/bundle-services?{params}]
Get list bundle services by parameters.

+ Parameters
    + params (required, string, `http_build_query($search)`) ... Any parameters of service. <br>You should set at least one service`s parameter. <br>This parameters should be converted to query string.<br>For example:<br>$search = [ <br>&emsp;&emsp;'main_attributes' => [<br>&emsp;&emsp;&emsp;&emsp;'bundle_id' => '1'<br>&emsp; &emsp;]<br>];<br>

### List bundle services by parameters [GET]
Returns list bundle services by parameters.

+ Response 200 (application/json)
    + Attributes (array[Customer Bundle service Response])

## Bundle services [/admin/customers/customer/{customer_id}/bundle-services--{service_id}]
Work with customer Bundle services.

+ Parameters
    + customer_id (required, number, `1`) ... The ID of the desired Customer.
    + service_id (required, number, `1`) ... The ID of the desired Bundle service.

### Retrieve Bundle service [GET]
Retrieves Bundle service with the given ID.

+ Response 200 (application/json)
    + Attributes (Customer Bundle service Response)

### Update Bundle service [PUT]
Update Bundle service with the given ID.

+ Request (application/json)

        {
            "description": New Description,
            "internet_services": {
                "10": {
                    "login": "new_login"
                },
                "5": {
                    "description": "Service #5"
                }
            }
        }

+ Response 202 (application/json)

### Delete Bundle service [DELETE]
Delete Bundle service with the given ID.

+ Response 204

## Cancel Bundle contract [/admin/customers/customer/{customer_id}/bundle-services--{service_id}-cancel]

+ Parameters
    + customer_id (required, number, `1`) ... The ID of the desired Customer.
    + service_id (required, number, `1`) ... The ID of the desired Bundle service.

### Cancel Bundle contract [PUT]
Cancel Bundle contract with the given ID.

+ Request (application/json)
    + Attributes (Customer Bundle service cancellation)

+ Response 202 (application/json)

## Reactivate Bundle contract [/admin/customers/customer/{customer_id}/bundle-services--{service_id}-reactivate]

+ Parameters
    + customer_id (required, number, `1`) ... The ID of the desired Customer.
    + service_id (required, number, `1`) ... The ID of the desired Bundle service.

### Reactivate Bundle contract [PUT]
Reactivate Bundle contract with the given ID.

+ Response 202 (application/json)

## Additional discounts collection [/admin/customers/additional-discounts]

### Create Additional discount [POST]
Creates new Additional discount.

+ Request (application/json)
    + Attributes (Additional discount Base)

+ Response 201 (application/json)
    + Attributes (Additional discount Id)

### List all Additional discounts [GET]
Returns list of your Additional discounts.

+ Response 200 (application/json)
    + Attributes (array[Additional discount Response])

## Search Additional discounts [/admin/customers/additional-discounts?{params}]
Get list of Additional discounts by parameters.

+ Parameters
    + params (required, string, `http_build_query($search)`) ... Any parameters of Additional discount record. <br>You should set at least one additional discount`s parameter. <br>This parameters should be converted to query string.<br>For example:<br>$search = [ <br>&emsp;&emsp;'main_attributes' => [<br>&emsp;&emsp;&emsp;&emsp;'service_id' => '1'<br>&emsp; &emsp;]<br>];<br>

### List additional discounts by parameters [GET]
Returns list of your Additional discounts by parameters.

+ Response 200 (application/json)
    + Attributes (array[Additional discount Response])

## Additional discount [/admin/customers/customer/additional-discounts/{id}]
Work with Additional discount.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Additional discount.

### Retrieve Additional discount [GET]
Retrieves Additional discount with the given ID.

+ Response 200 (application/json)
    + Attributes (Additional discount Response)

### Update Additional discount [PUT]
Update Additional discount with the given ID.

+ Request (application/json)

        {
            "start_date": "2018-07-09"
        }

+ Response 202 (application/json)

### Delete Additional discount [DELETE]
Delete Additional discount with the given ID.

+ Response 204

## Start/stop service [/portal/services/start/{service_id}?service_type={service_type}]
Start or stop the service. You can start/stop services only for prepaid daily customers.

+ Parameters
    + service_id (required, number, `1`) ... The ID of the desired service which need to enable
    + service_type (required, enum[string])
        Type of the desired service
        + Members
            + `internet` - Internet service type
            + `voice` - Voice service type
            + `custom` - Custom service type

### Start service [GET]
Start the service.
Conditions for successfully starting:
* Customer should be have billing type is prepaid daily.
* Target service should have `stopped` status.
* Target service should be not in bundle.

+ Response 200

### Stop service [GET /portal/services/stop/{service_id}?service_type={service_type}]
Stop the service.
Conditions for successfully stopping:
* Customer should be have billing type is prepaid daily.
* Target service should have `active` status.
* Target service should be not in bundle.

+ Parameters
    + service_id (required, number, `1`) ... The ID of the desired service which need to disable
    + service_type (required, enum[string])
        Type of the desired service
        + Members
            + `internet` - Internet service type
            + `voice` - Voice service type
            + `custom` - Custom service type

+ Response 200

# Data Structures

## Service Base (object)
+ `customer_id`: `1` (number, required) - Customer ID
+ `tariff_id`: `1` (number, required) - Tariff ID
+ `status`: `active` (string, required) - Status. Values: 'active', 'stopped', 'disabled', 'hidden', 'pending'
+ `description`: `Some Description` (string, required) - Description
+ `quantity`: `1` (number, required) - Quantity
+ `unit` (number) - Unit
+ `unit_price` (number) - Unit price
+ `start_date`: `2016-01-01` (string, required) - Start date. Format: YYYY-MM-DD
+ `end_date`: `0000-00-00` (string, required) - End date. Format: YYYY-MM-DD. Set to '0000-00-00' for endless
+ `discount` (string) - Discount
+ `discount_type`: `percent` (string) - Type of discount: 'percent' or 'fixed'. Default value: 'percent'
+ `discount_value` (number) - Discount value
+ `discount_start_date` (string) - Discount start date
+ `discount_end_date` (string) - Discount end date
+ `discount_text` (string) - Discount message

## Customer Internet service Base (Service Base)
+ `router_id` (number) - Router ID
+ `sector_id` (number) - Router sector ID. If you set router you can set its sector
+ `login` `john_doe_main` (string, required) - Service login. Recommended to use customer login as prefix
+ `password` `password` (string) - Service password
+ `taking_ipv4` `0` (number, required) - Taking IPv4. Values: '0' - None (Router will assign IP), '1' - Permanent IP (from Static IPs), '2' - Dynamic IP (from IP Pools)
+ `ipv4` (string) - If taking_ipv4 set to 1 you can set IPv4
+ `ipv4_route` (string) - If taking_ipv4 set to 1 you can set additional network
+ `ipv4_pool_id` (number) - If 'taking_ipv4' set to 2 you can set pool id.
+ `ipv6` (string) - IPv6 network
+ `ipv6_delegated` (string) - IPv6 delegated network
+ ipv6_pool_id (number) - IPv6 Pool ID
+ taking_ipv6: `0` (number) - Taking IPv6. Values: '0' - None (Router will assign IP), '1' - Permanent IP (from Static IPs), '2' - Dynamic IP (from IP Pools)
+ `mac` (string) - Mac(s,)
+ `port_id` (number) - Port ID
+ `access_device` (number) - ID of access device hardware ([Monitoring device](/#reference/networking/monitoring/retrieve-a-monitoring)). Default: 0
+ bundle_service_id: `0` (number) - ID of bundle service. 0 for none
+ status_new: `stopped` (string) - Indicates the status of the parent service. Default: ''
+ top_up_tariff_id: `1` (number) - Cap tariff id. Default: 0
+ parent_id: `1` (number) - ID of Parent service. 0 for none
+ on_approve: `0` (string) - Indicates whether the service needs to be approved. Values: '0', '1'. Default: 0
+ period: `-1` (string) - Period of which to charge for this service: 0 for postpaid and number of period (from 1 to 99). Default: -1

## Geo Data (object)
+ `address` (string) - Address
+ `marker` (string) - Coordinates in format 29.888893387,15.0991171153

## Customer Internet service Response (Customer Internet service Base)
+ `id`: `1` (number, required) - Internet service Id
+ `geo` (Geo Data) - Geo data
+ type: `internet` (string) - Service type

## Customer Internet service Id (object)
+ `id`: `1` (number, required) - Internet service Id

## Customer Voice service Base (Service Base)
+ `voice_device_id` (number) - Voice device ID
+ `phone` (string, required) - Phone number
+ bundle_service_id: `0` (number) - ID of bundle service. 0 for none
+ direction: `outgoing` (string) - Call direction. Values: 'incoming', 'outgoing'. Default: 'outgoing'
+ status_new: `stopped` (string) - Indicates the status of the parent service. Default: ''
+ parent_id: `1` (number) - ID of Parent service. 0 for none
+ on_approve: `0` (string) - Indicates whether the service needs to be approved. Values: '0', '1'. Default: 0
+ period: `-1` (string) - Period of which to charge for this service: 0 for postpaid and number of period (from 1 to 99). Default: -1

## Customer Voice service Response (Customer Voice service Base)
+ `id`: `1` (number, required) - Voice service Id
+ type: `voice` (string) - Service type

## Customer Voice service Id (object)
+ `id`: `1` (number, required) - Voice service Id

## Customer Recurring service Base (Service Base)
+ status_new: `stopped` (string) - Indicates the status of the parent service. Default: ''
+ bundle_service_id: `0` (number) - ID of bundle service. 0 for none
+ parent_id: `1` (number) - ID of Parent service. 0 for none
+ on_approve: `0` (string) - Indicates whether the service needs to be approved. Values: '0', '1'. Default: 0
+ period: `-1` (string) - Period of which to charge for this service: 0 for postpaid and number of period (from 1 to 99). Default: -1

## Customer Recurring service Response (Customer Recurring service Base)
+ `id`: `1` (number, required) - Recurring service Id
+ type: `custom` (string) - Service type

## Customer Recurring service Id (object)
+ `id`: `1` (number, required) - Recurring service Id

## Customer Bundle service Base (object)
+ `customer_id`: `1` (number, required) - Customer ID
+ `bundle_id`: `1` (number, required) - Bundle plan ID
+ `status`: `active` (string, required) - Status. Values: 'active', 'stopped', 'disabled', 'hidden', 'pending'
+ `description`: `Some Description` (string, required) - Description
+ `unit_price` (number) - Unit price
+ `start_date`: `2016-01-01` (string, required) - Start date. Format: YYYY-MM-DD
+ `end_date`: `0000-00-00` (string, required) - End date. Format: YYYY-MM-DD. Set to '0000-00-00' for endless
+ `discount`: `0` (string) - Discount
+ `discount_type`: `percent` (string) - Type of discount: 'percent' or 'fixed'. Default value: 'percent'
+ `discount_value` (number) - Discount value
+ `discount_start_date` (string) - Discount start date
+ `discount_end_date` (string) - Discount end date
+ `discount_text` (string) - Discount message
+ `automatic_renewal`: `true` (boolean) - Automatic renewal. Default: false
+ `activation_fee`: `0.5` (number, optional) - Activation fee. Default: 0
+ `auto_reactivate`: `false` (boolean, optional) - Auto reactivate when deposit become more then minimal balance. Default: 0
+ `get_activation_fee_when`: `create_service` (string, optional) - Get activation fee when create service: 'create_service' or after first service billing day: 'first_service_billing'
+ `issue_invoice_while_service_creation`: `true` (boolean, optional) - Issue an invoice while service creation. Default: 0
+ `cancellation_fee`: `1.5` (number, optional) - Cancellation fee. Default: 0
+ `prior_cancellation_fee`: `1.5` (number, optional) - Prior cancellation fee. Default: 0
+ `services_internet` (array[Customer Internet service Base]) - Internet services
+ `services_voice` (array[Customer Voice service Base]) - Voice services
+ `services_custom` (array[Customer Recurring service Base]) - Custom services
+ `activation_fee_transaction_id`: `137` (number) - Activation fee transaction id. Default: 0
+ `cancellation_fee_transaction_id`: `137` (number) - Cancellation fee transaction id. Default: (null)
+ `prior_cancellation_fee_transaction_id`: `137` (number) - Prior cancellation fee transaction id. Default: 0

## Customer Bundle service Response (Customer Bundle service Base)
+ `id`: `1` (number, required) - Recurring service Id
+ type: `bundle` (string) - Service type

## Customer Bundle service Id (object)
+ `id`: `1` (number, required) - Bundle service Id

## Customer Bundle service cancellation(object)
+ charge_cancellation_fee (boolean, required) - Charge cancellation fee

## Additional discount Base (object)
+ service_type: `internet` (string, required) - Service type. Possible types: `internet`, `voice`, `custom` or `bundle`.
+ service_id: `1` (number, required) - Service ID
+ enabled: `1` (number, required) - This discount is enabled or not? Possible values: `0` or `1`.
+ percent: `20` (number, required) - Discount percent
+ start_date: `2018-07-05` (string, required) - Discount start date
+ end_date: `2018-07-15` (string) - Discount end date
+ message: `Holidays discount 20%` (string) - Discount message. Used in discount's transaction description.

## Additional discount Response (Additional discount Base)
+ id: `1` (number, required) - Additional discount ID

## Additional discount Id (object)
+ id: `1` (number, required) - Additional discount ID

## Service Traffic RRD (object)
+ service_id: `1` (number) - Internet Service ID
+ download: `40960000` (number, required) - Number of bytes was downloaded (min: 0)
+ upload: `20480000` (number, required) - Number of bytes was uploaded (min: 0)
+ time: `280` (number) - Online time (seconds)
+ interval: `300` (number) - Accounting interval (seconds, default 300 (5 minutes))


# Group Finance

## Transactions collection [/admin/finance/transactions]

### Create a Transaction [POST]
Creates a new Transaction.

+ Request (application/json)
    + Attributes (Transaction Base)

+ Response 201 (application/json)
    + Attributes (Transaction Id)

### List all Transactions [GET]
Returns a list of your Transactions.

+ Response 200 (application/json)
    + Attributes (array[Transaction Response])

## Transaction [/admin/finance/transactions/{id}]
Work with Transactions.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Transaction.

### Retrieve a Transaction [GET]
Retrieves the Transaction with the given ID.

+ Response 200 (application/json)
    + Attributes (Transaction Response)

### Update a Transaction [PUT]
Update the Transaction with the given ID.

+ Request (application/json)

        {
            "description": New description
        }

+ Response 202 (application/json)

### Delete a Transaction [DELETE]
Delete the Transaction with the given ID.

+ Response 204

## Make transaction row calculation and calculate totals [/admin/finance/calculate-finance]

### Make a transaction row calculation and calculate totals [POST]

+ Request (application/json)

        {
            "items":
                {
                    {
                        "quantity": 1,
                        "price": 10.0000,
                        "tax_id": 1,
                        "withVat": 10.2000,
                        "isChangedInput": true
                    },
                    {
                        "quantity": 1,
                        "price": 10.0000,
                        "tax_id": 5,
                        "withVat": 10.5000,
                        "isChangedInput": false
                    },
                },
            "modifiedField": "tax_id", // price
            "quantity": 1,
            "price": 10.0000,
            "tax_id": 5,
            "withVat": 10.5000,
            "customerId": 1,
            "type": "credit-notes" // invoices, null
        }

+ Response 200 (application/json)

    + body

            {
                "rowData": {
                    "quantity": 1,
                    "vat": "5",
                    "price": "10.0000",
                    "withVat": "10.5000",
                    "total": "10.50",
                    "totalVat": 0.5,
                    "totalWithoutVat": 10,
                    "tax_id": 5
                },
                "total": {
                    "total": "21.00",
                    "total_unformatted": 21,
                    "vat": "1.00",
                    "tax_id": 5,
                    "withoutVat": "20.00",
                    "deal_value": "10.5000",
                    "balance_after": "10.50",
                    "per_tax": [
                        {
                            "name": "4",
                            "rate": "4%",
                            "rate_unformatted": "4.0000",
                            "vat_amount": "0.80",
                            "vat_amount_unformatted": 0.8,
                            "applicable_amount": "20.00",
                            "applicable_amount_unformatted": 20
                        },
                        {
                            "name": "5",
                            "rate": "5%",
                            "rate_unformatted": "5.0000",
                            "vat_amount": "0.00",
                            "vat_amount_unformatted": 0,
                            "applicable_amount": "0.80",
                            "applicable_amount_unformatted": 0.8
                        },
                        {
                            "name": "1",
                            "rate": "1%",
                            "rate_unformatted": "1.0000",
                            "vat_amount": "0.20",
                            "vat_amount_unformatted": 0.2,
                            "applicable_amount": "20.00",
                            "applicable_amount_unformatted": 20
                        }
                    ]
                }
            }

## Invoices collection [/admin/finance/invoices]

### Create a Invoice [POST]
Creates a new Invoice.

+ Request (application/json)
    + Attributes (Invoice Base)

+ Response 201 (application/json)
    + Attributes (Invoice Id)

### List all Invoices [GET]
Returns a list of your Invoices.

+ Response 200 (application/json)
    + Attributes (array[Invoice Response])

## Invoice [/admin/finance/invoices/{id}]
Work with Invoices.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Invoice.

### Retrieve a Invoice [GET]
Retrieves the Invoice with the given ID.

+ Response 200 (application/json)
    + Attributes (Invoice Response)

### Update a Invoice [PUT]
Update the Invoice with the given ID.

+ Request (application/json)

        {
            "items": [
                {
                    "id": 1,
                    "description": New desc of item
                }
            ]
        }

+ Response 202 (application/json)

### Delete a Invoice [DELETE]
Delete the Invoice with the given ID.

+ Response 204

## Credit Notes collection [/admin/finance/credit-notes]

### Create a Credit note [POST]
Creates a new Credit note.

+ Request (application/json)
    + Attributes (Credit note Base)

+ Response 201 (application/json)
    + Attributes (Credit note Id)

### List all Credit Notes [GET]
Returns a list of your Credit Notes.

+ Response 200 (application/json)
    + Attributes (array[Credit note Response])


## Credit note [/admin/finance/credit-notes/{id}]
Work with Credit notes.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Credit note.

### Retrieve a Credit note [GET]
Retrieves the Credit note with the given ID.

+ Response 200 (application/json)
+ Attributes (Credit note Response)

### Update a Credit note [PUT]
Update the Credit note with the given ID.

+ Request (application/json)

        {
            "items": [
                {
                    "id": 1,
                    "description": New desc of item
                }
            ]
        }

+ Response 202 (application/json)

### Delete a Credit note [DELETE]
Delete the Credit note with the given ID.

+ Response 204

## Payments collection [/admin/finance/payments]

### Create a Payment [POST]
Creates a new Payment.

+ Request (application/json)
    + Attributes (Payment Base)

+ Response 201 (application/json)
    + Attributes (Payment Id)

### List all Payments [GET]
Returns a list of your Payments.

+ Response 200 (application/json)
    + Attributes (array[Payment Response])

## Payment [/admin/finance/payments/{id}]
Work with Payments.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Payment.

### Retrieve a Payment [GET]
Retrieves the Payment with the given ID.

+ Response 200 (application/json)
    + Attributes (Payment Response)

### Update a Payment [PUT]
Update the Payment with the given ID.

+ Request (application/json)

        {
            "description": New description
        }

+ Response 202 (application/json)

### Delete a Payment [DELETE]
Delete the Payment with the given ID.

+ Response 204

## Payment methods collection [/admin/finance/payment-methods]

### Create a Payment method [POST]
Creates a new Payment method.

+ Request (application/json)
    + Attributes (PaymentMethods Base)

+ Response 201 (application/json)
    + Attributes (PaymentMethods Id)

### List all Payment methods [GET]
Returns a list of your Payment methods.

+ Response 200 (application/json)
    + Attributes (array[PaymentMethods Response])

## Payment method [/admin/finance/payment-methods/{id}]
Work with Payment method.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired payment method.

### Retrieve a Payment method [GET]
Retrieves the Payment method with the given ID.

+ Response 200 (application/json)
    + Attributes (PaymentMethods Response)

### Update a Payment method [PUT]
Update the Payment method with the given ID.

+ Request (application/json)

        {
            "name": "Cash",
            "name_1": "Payer"
        }

+ Response 202 (application/json)

### Delete a Payment method  [DELETE]
Delete the Payment method with the given ID.

+ Response 204

## Transaction categories collection [/admin/finance/transaction-categories]

### Create a Transaction category [POST]
Creates a new Transaction category.

+ Request (application/json)
    + Attributes ( TransactionCategories Base)

+ Response 201 (application/json)
    + Attributes (TransactionCategories Id)

### List all Transaction categories [GET]
Returns a list of your Transaction categories.

+ Response 200 (application/json)
    + Attributes (array[TransactionCategories Response])

## Transaction category [/admin/finance/transaction-categories/{id}]
Work with Transaction category.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired transaction category.

### Retrieve a Transaction category [GET]
Retrieves the Transaction category with the given ID.

+ Response 200 (application/json)
    + Attributes (TransactionCategories Response)

### Update a Transaction category [PUT]
Update the Transaction category with the given ID.

+ Request (application/json)

        {
            "name": "Credit",
        }

+ Response 202 (application/json)

### Delete a Transaction category  [DELETE]
Delete the Transaction category with the given ID.

+ Response 204

## Proforma invoices collection [/admin/finance/proforma-invoices]

### Create a Proforma invoice [POST]
Creates a new Proforma invoice.

+ Request (application/json)
    + Attributes (Proforma Invoice Base)

+ Response 201 (application/json)
    + Attributes (Proforma Invoice Id)

### List all Proforma invoices [GET]
Returns a list of your Proforma invoices.

+ Response 200 (application/json)
    + Attributes (array[Proforma Invoice Response])

## Proforma invoice [/admin/finance/proforma-invoices/{id}]
Work with Proforma invoice.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Proforma invoice.

### Retrieve a Proforma invoice [GET]
Retrieves the Proforma invoice with the given ID.

+ Response 200 (application/json)
    + Attributes (Proforma Invoice Response)

### Update a Proforma invoice [PUT]
Update the Proforma invoice with the given ID.

+ Request (application/json)

        {
            "items": [
                {
                    "id": 1,
                    "description": New desc of item
                }
            ]
        }

+ Response 202 (application/json)

### Delete a Proforma invoice [DELETE]
Delete the Proforma invoice with the given ID.

+ Response 204

##To charge invoice - create invoice [/admin/finance/to-bill/{customer_id}--{action}]

+ Parameters
    + customer_id (required, number, `1`) ... The ID of the Customer.
    + action (required, string, `preview`) ... Preview|generate action.

### Start charge invoice [POST]
Get preview or make invoice for customer for his services

+ Request (application/json)
    + Attributes (ToBill Create)

+ Response 201 (application/json)
    Explanation. According to post data if we select action "generate" we can generate and get info about new invoice.<br>
    Response has two elements: "invoice" with id, number and "result" with info about invoice items.<br>
    "Result" has elements with service types (internet/voice/custom)<br>
    each of them has elements with serivice id (5, 10 etc)<br>
    each of them has debit/credit element<br>
    and, finaly, each of them has info about invoice item (description, price, etc)<br>
    If action was selected like "preview" so we can get same result but without creating invoice<br>
    and invoice array will be with empty elements<br>

    + body

            {
                "result": [
                    "internet": [
                        "5": [
                        "debit": [
                                {"description" : first service description}
                                {"quantity" : 1}
                                {"unit" : 1}
                                {"days" : 30}
                                {"price" : 1}
                                {"tax_percent" : 0.000}
                                {"total" : 10}
                                {"date" : 2017-12-01}
                                {"from" : 2017-10-22}
                                {"quantity" : 2017-11-30}
                            ]
                        ]
                        "10": [
                        "debit": [
                                {"description" : second internet service description}
                                {"quantity" : 1}
                                {"unit" : 1}
                                {"days" : 30}
                                {"price" : 1}
                                {"tax_percent" : 0.000}
                                {"total" : 10}
                                {"date" : 2017-12-01}
                                {"from" : 2017-11-01}
                                {"quantity" : 2017-11-30}
                            ]
                        ]
                    ]
                    "custom": [
                        "3": [
                        "debit": [
                                {"description" : description of custom servise}
                                {"quantity" : 1}
                                {"unit" : 1}
                                {"days" : 30}
                                {"price" : 1}
                                {"tax_percent" : 0.000}
                                {"total" : 10}
                                {"date" : 2017-12-01}
                                {"from" : 2017-10-22}
                                {"quantity" : 2017-11-30}
                            ]
                        ]
                    ]
                ],
                "invoice": [
                    {"id": 6}
                    {"number": 201703000004}
                ]
            }

##To charge proforma - create proforma [/admin/finance/to-bill-requests/{customer_id}--{action}]

+ Parameters
    + customer_id (required, number, `1`) ... The ID of the Customer.
    + action (required, string, `preview`) ... Preview|generate action.

### Start charge proforma [POST]
Get preview or make proforma for customer for his services

+ Request (application/json)
    + Attributes (ToBill Create)

+ Response 201 (application/json)
    Explanation. According to post data if we select action "generate" we can generate and get info about new proforma.<br>
    Response has two elements: "request" with id, number of proforma and "result" with info about proforma items.<br>
    "Result" has elements with service types (internet/voice/custom)<br>
    each of them has elements with seriviceId (5, 10 etc)<br>
    each of them has debit/credit element<br>
    and, finaly, each of them has info about proforma item (description, price, etc)<br>
    If action was selected like "preview" so we can get same result but without creating proforma<br>
    and request array will be empty<br>

    + body

            {
                "result": [
                    "internet": [
                        "5": [
                        "debit": [
                                {"description" : first service description}
                                {"quantity" : 1}
                                {"unit" : 1}
                                {"days" : 30}
                                {"price" : 1}
                                {"tax_percent" : 0.000}
                                {"total" : 10}
                                {"date" : 2017-12-01}
                                {"from" : 2017-10-22}
                                {"quantity" : 2017-11-30}
                            ]
                        ]
                        "10": [
                        "debit": [
                                {"description" : second internet service description}
                                {"quantity" : 1}
                                {"unit" : 1}
                                {"days" : 30}
                                {"price" : 1}
                                {"tax_percent" : 0.000}
                                {"total" : 10}
                                {"date" : 2017-12-01}
                                {"from" : 2017-11-01}
                                {"quantity" : 2017-11-30}
                            ]
                        ]
                    ]
                    "custom": [
                        "3": [
                        "debit": [
                                {"description" : description of custom servise}
                                {"quantity" : 1}
                                {"unit" : 1}
                                {"days" : 30}
                                {"price" : 1}
                                {"tax_percent" : 0.000}
                                {"total" : 10}
                                {"date" : 2017-12-01}
                                {"from" : 2017-10-22}
                                {"quantity" : 2017-11-30}
                            ]
                        ]
                    ]
                ],
                "request": [
                    {"id": 6}
                    {"number": 201703000004}
                ]
            }

## Cancel last charge [/admin/finance/cancel-last-charge/{id}]
View last charge info or cancel last charged invoice.

+ Parameters
    + id (required, number, `1`) ... The Id of the desired customer.

### Retrieve a last charge info [GET]
Returns a last charge information of a desired customer

+ Response 200 (application/json)
    + Attributes (View Last Charge Response)

### Cancel last charge [DELETE]
Cancel a last charge of a desired customer. Also deletes invoices and transactions of a last charge.

+ Response 204

## Payment Statements Collection [/admin/finance/bank-statements]
Work with Payment statements collection.

### Create a Payment Statement [POST]
Creates a new Payment statement.

+ Request (application/json)
    + Attributes (Payment Statement Base)

+ Response 201 (application/json)
    + Attributes (Payment Statement Id)

### List all Payment Statements [GET]
Returns a list of Payment statements.

+ Response 200 (application/json)
    + Attributes (array[Payment Statements Response])

## Payment Statement [/admin/finance/bank-statements/{id}]
Work with Payment statement.

+ Parameters
    + id (required, number, `1`) ... The Id of the desired Payment statement.

### Retrieve a Payment Statement [GET]
Retrieves the Payment statement with the given ID.

+ Response 200 (application/json)
    + Attributes (array[Payment Statements Response])

### Update a Payment Statement [PUT]
Update the Payment statement with the given ID.

+ Request (application/json)

        {
            {
                "id": 1,
                "title": "New title"
            }
        }

+ Response 202 (application/json)

### Delete a Payment Statement [DELETE]
Delete the Payment statement with the given ID.

+ Response 204

## Payment Statements Import Collection [/admin/finance/bank-statements-import]
Work with Payment statements import collection.

### Create a Payment Statement Import [POST]
Creates a new Payment statement import.

+ Request (application/json)

        {
            "data": [
                {
                    "0": 13,
                    "1": 202101000045,
                    "2": 8.00,
                    "3": 2021-09-22
                }
            ],
            "columns": [
                "0": "customer_id",
                "1": "invoice_number",
                "2": "amount",
                "3": "date"
            ]
        }

+ Response 201 (application/json)
    + Attributes (Payment Statement Import Id)

## Payment Statements Records Collection [/admin/finance/bank-statements-records]
Work with Payment statements records collection.

### Create a Payment Statement Record [POST]
Creates a new Payment statement record.

+ Request (application/json)
    + Attributes (Payment Statement Record Base)

+ Response 201 (application/json)
    + Attributes (Payment Statement Record Id)

### List all Payment Statements Records [GET]
Returns a list of Payment statements records.

+ Response 200 (application/json)
    + Attributes (array[Payment Statements Records Response])

## Payment Statement Record [/admin/finance/bank-statements-records/{id}]
Work with Payment statement record.

+ Parameters
    + id (required, number, `1`) ... The Id of the desired Payment statement record.

### Retrieve a Payment Statement Record [GET]
Retrieves the Payment statement record with the given ID.

+ Response 200 (application/json)
    + Attributes (array[Payment Statements Records Response])

### Update a Payment Statement Record [PUT]
Update the Payment statement record with the given ID.

+ Request (application/json)

        {
            {
                "id": 1,
                "amount": 20.0000
            }
        }

+ Response 202 (application/json)

### Delete a Payment Statement Record [DELETE]
Delete the Payment statement record with the given ID.

+ Response 204

## Refill cards create [/admin/finance/refill-cards]

### Create a Refill card [POST]
Create a new Refill card.

+ Request (application/json)

        {
            {
                "prefix": "SPL",
                "serie": "201701",
                "code": "SOMEranDomUnIQUEcode",
                "valid_till": "2019-12-01",
                "price": 10
            }
        }

+ Response 201 (application/json)
    + Attributes (Cards Refill Id)

## Refill cards [/admin/finance/refill-cards/{id}]

### Update a Refill card [PUT]
Update Refill card by ID.

+ Parameters
    + id (required, number, `6`) ... The id of the desired Refill card.

+ Request (application/json)

        {
            {
                "valid_till": "2020-12-01",
                "price": 15
            }
        }

+ Response 202 (application/json)

### Delete a Refill Card [DELETE]
Delete the Refill card with the given ID.

+ Parameters
    + id (required, number, `6`) ... The id of the desired Refill card.


+ Response 204

## Redeem Refill card [/admin/finance/refill-cards/0?redeem=true]

### Redeem Refill card [PUT]
Redeem Refill card by full code. Param `customer_id` is not required if you authorized as customer.

+ Request (application/json)

        {
            "code": "201902-kek-Cr7KphD1qlOfBzYa",
            "customer_id": "1"
        }

+ Response 202 (application/json)

## Refill cards series collection [/admin/finance/refill-cards-series]
Work with Refill cards series collection.

### List all refill cards series [GET]
Returns a list of Refill Cards Series.

+ Response 200 (application/json)
    + Attributes (array[Cards Refill Series])

### Create a Refill Cards Serie [POST]
Creates a new Serie of refill cards.

+ Request (application/json)
    + Attributes (Cards Refill Base)

+ Response 201 (application/json)
    + Attributes (Cards Refill Series Id)

## Refill cards series [/admin/finance/refill-cards-series/{id}]
Work with Refill cards series.

+ Parameters
    + id (required, number, `201701`) ... The SERIE of the desired Refill cards serie.

### Retrieve a Refill Serie Cards [GET]
Retrieves the Refill cards serie with the given ID (ID in this case is cards serie).

+ Response 200 (application/json)
    + Attributes (array[Cards Refill])

### Update a Refill Cards Serie [PUT]
Update the Refill cards from serie with the given ID (ID is cards serie).

+ Request (application/json)

        {
            {
                "prefix": "SPL2",
                "price": 10
            }
        }

+ Response 202 (application/json)

### Delete a Refill Cards Serie [DELETE]
Delete the Refill cards serie with the given ID (ID is cards serie).

+ Response 204


## Billing info [/portal/services/billing-info?format_values={format_values}]
Get customer billing info

+ Parameters
    + format_values: `true` (boolean) - Return output values in system format.

### Get customer billing (blocking) info [GET]
Get customer billing (blocking) info.

For daily prepaid customers will be returned the following fields:
* howManyDaysLeft
* paymentPerPeriod
* paymentPerDay
* deposit
* services_name
* blocking_date

For monthly prepaid customers will be returned the following fields:
* howManyMonthsLeft
* howManyDaysLeft
* blockInNextBillingCycle
* paymentPerMonth
* paymentPerDay
* deposit
* services_name
* blocking_date
* service

For recurring paid customers will be returned the following fields:
* blockingEnabled
* blockInNextBillingCycle
* status
* lowBalance
* howManyDaysLeft
* blocking_date
* deposit
* blockInNextBillingCycle
* is_already_blocked
* is_already_disabled

+ Response 200 (application/json)
    + Attributes (Billing Info Response)

## Invoice relations [/admin/finance/invoice-relations]
Get invoice relations

### Get all invoices relations [GET]
Get all invoices relations

+ Response 200 (application/json)
    + Attributes (array[Invoice Relation Response])

### Get invoices relations by customer ID [GET /admin/finance/invoice-relations?customer_id={customer_id}]
Get invoices relations filtered by a customer ID

+ Parameters
    + customer_id (required, number, `3`) ... ID of the customer

+ Response 200 (application/json)
    + Attributes (array[Invoice Relation Response])


### Get invoices relations by invoice ID [GET /admin/finance/invoice-relations?invoice_id={invoice_id}]
Get invoices relations filtered by an invoice ID

+ Parameters
    + invoice_id (required, number, `5`) ... ID of the invoice

+ Response 200 (application/json)
    + Attributes (array[Invoice Relation Response])

### Get an invoice relation by relation ID [GET /admin/finance/invoice-relations/{id}]
Get an invoice relation by relation ID

+ Parameters
    + id (required, number, `5`) ... ID of the desired invoice relation

+ Response 200 (application/json)
    + Attributes (Invoice Relation Response)

# Data Structures

## ToBill Create (object)
+ toBillDate: `2017-01-01` (string) - Billing day. Format: YYYY-MM-DD
+ transactionDate: `2017-01-01` (string) - Transaction date. Format: YYYY-MM-DD
+ period: `1` (number) - Period of billing - 0 for postpay and number of months for prepay (from 1 to 12)

## Transaction Base (object)
+ type: `debit` (string, required) - Type. Values: 'debit' for "+ Income" or 'credit' for "- Charge"
+ customer_id: `1` (number, required) - Customer ID
+ quantity: `1` (number) - Quantity. Default: 1
+ unit (string) - Unit
+ price: `158.25` (number) - Price
+ tax_percent: `19` (number, required) - VAT %
+ remind_amount: 0 (number) - Remind amount
+ date: `2016-01-01` (string, required) - Date. Format: YYYY-MM-DD
+ category: `1` (string, required) - Category ID. You can get it on page "Config / Finance / Transaction categories"
+ description: `Description` (string) - Description
+ period_from (string) - Begin of period. Format: YYYY-MM-DD
+ period_to (string) - End of period. Format: YYYY-MM-DD
+ service_id (number, nullable) - Service ID
+ payment_id (number, nullable) - Payment ID
+ credit_note_id: 0 (number) - Credit note ID
+ invoice_id (number, nullable) - Invoice ID
+ invoiced_by_id (number, nullable) - Invoiced by ID
+ comment (string) - Comment
+ to_invoice: false (boolean) - To invoice. Default: false
+ service_type: `internet` (enum[string])
    Service type
    + Members
        + `internet`
        + `voice`
        + `custom`
        + `bundle`
        + `one_time`
+ source: `manual` (enum[string])
    Source
    + Members
        + `manual`
        + `auto`
        + `cdr`
        + `config`
+ tax_id: 1 (number) - Tax ID
+ sub_account_id: 0 (number) - ID of the sub-account this transaction is associated with. Used for aggregated billing.

## Transaction Response (Transaction Base)
+ id: `1` (number) - Transaction ID
+ total: `10.0000` (number) - Total

## Transaction Id (object)
+ id: `1` (number) - Transaction ID

## Invoice Base (object)
+ customer_id: `1` (number, required) - Customer ID
+ date_created: `2016-01-01` (string) - Create date. Format: YYYY-MM-DD
+ date_updated (string) - Update date. Format: YYYY-MM-DD
+ date_till (string) - Pay till date. Format: YYYY-MM-DD
+ use_transactions: `1` (enum[string])
    Use transactions
    + Members
       + `0` - No
       + `1` - Yes
+ note (string) - Note
+ memo (string) - Memo
+ date_payment (string) - Payment date. Format: YYYY-MM-DD
+ status: `not_paid` (string, required) - Status. Values: 'not_paid' for "Not paid", 'paid' for "Paid", 'pending' for "Pending" and 'deleted' for "Deleted"
+ number: `201601010003` (string, required) - Number
+ payment_id (number) - Payment ID.
+ type: `one_time` (enum[string])
    Type
    + Members
      + `one_time`
      + `recurring`
+ payd_from_deposit (number) - Set to 1 of invoice payd from deposit. Values: 0 or 1
+ is_sent: `0` (enum[string])
    Is sent
    + Members
      + `0` - No
      + `1` - Yes
+ items (array[Invoice item], required) - Items of invoice

## Invoice Response (Invoice Base)
+ id: `1` (number) - Invoice ID
+ real_create_datetime: `2024-05-27 15:02:57` - Real create date. Format: YYYY-MM-DD H:i:s
+ total: 10 (number) - Total
+ due: 0 (number) - Due
+ added_by: `admin` (enum[string])
    Added by
    + Members
        + `system`
        + `api`
        + `admin`
+ added_by_id: 1 (number) - Added by ID

## Invoice Id (object)
+ id: `1` (number) - Invoice ID

## Invoice item (object)
+ description: `Desc of item` (string, required) - Description of invoice item
+ quantity: `1` (number, required) - Quantity. Default: 1
+ unit (number, required) - Unit
+ price: `123` (number) - Price
+ tax: `0` (number) - VAT %
+ period_from: `2016-01-01` (string) - Date. Format: YYYY-MM-DD
+ period_to: `2016-01-02` (string) - Date. Format: YYYY-MM-DD
+ categoryIdForTransaction: `1` (number) - Allows to set transaction category for item transaction
+ sub_account_id: `0` (number) - ID of the sub-account this invoice item is related to. Used for aggregated billing.

## Credit note Base (object)
+ customer_id: `1` (number, required) - Customer ID
+ date_created: `2016-01-01` (string) - Create date. Format: YYYY-MM-DD
+ date_updated (string) - Update date. Format: YYYY-MM-DD
+ date_payment (string) - Payment date. Format: YYYY-MM-DD
+ status: `not_refunded` (string, required) - Status. Values: 'not_refunded' for "Not refunded", 'refunded' for "Refunded" and 'deleted' for "Deleted"
+ number: `201601010003` (string, required) - Number
+ payment_id (number) - Payment ID.
+ note (string) - Note
+ is_sent: `0` (enum[string])
    Is sent
    + Members
       + `0` - No
       + `1` - Yes
+ items (array[Credit note item], required) - Items of credit note

## Credit note Response (Credit note Base)
+ id: `1` (number) - Credit note ID
+ real_create_datetime: `2024-05-27 15:40:22` (string) - Real create date. Format: YYYY-MM-DD H:i:s
+ total: 10 (number) - Total
+ remind_amount: `0.0000` (number) - Remind amount
+ added_by: `system` (enum[string])
    Added by
    + Members
     + `system`
     + `api`
     + `admin`
+ added_by_id: 1 (number) - Added by ID

## Credit note Id (object)
+ id: `1` (number) - Credit note ID

## Credit note item (object)
+ description: `Desc of item` (string, required) - Description of credit note item
+ quantity: `1` (number, required) - Quantity. Default: 1
+ unit (number, required) - Unit
+ price: `123` (number) - Price
+ tax: `0` (number) - VAT %
+ sub_account_id: 0 (number) - ID of the sub-account this credit note item is related to. Used for aggregated billing.

## Payment Base (object)
+ customer_id: `1` (number, required) - Customer ID
+ invoice_id (number, nullable) - Invoice ID
+ credit_note_id (number, nullable) - Credit note ID
+ request_id (number, nullable) - Request ID
+ transaction_id (number) - Transaction ID
+ payment_statement_id (number, nullable) - Payment statement ID
+ payment_type (string, required) - Type ID. You can get it on page "Config / Finance / Payment methods"
+ receipt_number (string, required) - Receipt Number
+ date (string, required) - Date. Format: YYYY-MM-DD
+ amount (string, required) - Sum
+ comment (string) - Comment
+ is_sent: `0` (enum[string])
    Is sent
    + Members
       + `0` - No
       + `1` - Yes
+ field_1 (string, required) - Field #1
+ field_2 (string, required) - Field #2
+ field_3 (string, required) - Field #3
+ field_4 (string, required) - Field #4
+ field_5 (string, required) - Field #5
+ note (string) - Note
+ memo (string) - Memo

## Payment Response (Payment Base)
+ id: `1` (number) - Payment ID
+ remind_amount: `0.0000` (number) - Remind amount
+ real_create_datetime: `2024-05-27 15:30:35` - Real create date. Format: YYYY-MM-DD H:i:s
+ added_by: `api` (enum[string])
    Added by
    + Members
     + `system`
     + `api`
     + `admin`
+ added_by_id: 1 (number) - Added by ID

## Payment Id (object)
+ id: `1` (number) - Payment ID

## PaymentMethods Base (object)
+ name: `Bank transfer` (string, required) - Payment method's name.
+ is_active: true (boolean, required) - Values: true or false. Active or inactive.
+ name_1: `Account` (string, optional) - Payment method's field 1.
+ name_2: `Transaction ID Bank transfer` (string, optional) - Payment method's field 2.
+ name_3: `field 3` (string, optional) - Payment method's field 3.
+ name_4: `field 4` (string, optional) - Payment method's field 4.
+ name_5: `field 5` (string, optional) - Payment method's field 5.

## PaymentMethods Response (PaymentMethods Base)
+ id: `1` (number) - Payment method ID
+ accounting_bank_accounts_id: 0 (number) - Mapped record ID
+ einvoicing_payment_methods_id: 3 (number) - Mapped record ID

## PaymentMethods Id (object)
+ id: `1` (number) - Payment method ID

## TransactionCategories Base (object)
+ name: `Deposit` (string, required) - Transaction category name.
+ is_base: `0` (enum[string])
        Default categories
        + Members
            + `0` - No
            + `1` - Yes

## TransactionCategories Response (TransactionCategories Base)
+ id: `1` (number) - Transaction categories ID
+ accounting_category_id (number, nullable) - Mapped record ID
+ einvoicing_category_id: 0 (number) - Mapped record ID
+ einvoicing_private_person_category_id: 0 (number) - Mapped record ID
+ einvoicing_type_id: 0 (number) - Mapped record ID
+ einvoicing_private_person_type_id: 0 (number) - Mapped record ID

## TransactionCategories Id (object)
+ id: `1` (number) - Transaction categories ID

## Proforma Invoice Base (object)
+ customer_id: `1` (number, required) - Customer ID
+ date_created: `2016-01-01` (string) - Create date. Format: YYYY-MM-DD
+ date_updated (string) - Last update. Format: YYYY-MM-DD
+ date_till (string) - Pay till date. Format: YYYY-MM-DD
+ date_payment (string) - Payment date. Format: YYYY-MM-DD
+ status: `not_paid` (string, required) - Status. Values: 'not_paid' for "Not paid", 'paid' for "Paid", 'pending' for "Pending"
+ number: `201601010003` (string, required) - Number
+ payment_id (number) - Payment ID.
+ items (array[Proforma Invoice item], required) - Items of Proforma invoice

## Proforma Invoice Response (Proforma Invoice Base)
+ id: `1` (number) - Request ID

## Proforma Invoice Id (object)
+ id: `1` (number) - Request ID

## Proforma Invoice item (object)
+ description: `Desc of item` (string, required) - Description of Proforma Invoice item
+ quantity: `1` (number, required) - Quantity. Default: 1
+ unit (number, required) - Unit
+ price: `123` (number) - Price
+ tax: `0` (number) - VAT %
+ period_from: `2016-01-01` (string) - Date. Format: YYYY-MM-DD
+ period_to: `2016-01-02` (string) - Date. Format: YYYY-MM-DD
+ sub_account_id: 0 (number) - ID of the sub-account this proforma invoice item is related to. Used for aggregated billing.

## Last Charge To Bill Record (object)
+ id: `1` (number) - To Bill record ID
+ customer_id: `1` (number) - Related customer ID
+ date: `2016-01-02` (string) - Date. Format: YYYY-MM-DD
+ real_date_time: `2016-01-02 09:48:12` (string) - Real date of creating To Bill record. Format: YYYY-MM-DD HH:II:SS
+ transactions_id: `2,3,1` (string) - Related transactions splitted by comma
+ invoice_id: `43` (number) - Related invoice ID
+ request_id: `54` (number) - Related proforma invoice ID
+ next_request_before: `2016-02-02` (string) - Date. Format: YYYY-MM-DD
+ history_id: `1` (number) - Finance history ID
+ transactions_sum: `123` (number) - Transactions sum
+ max_period_to: `2016-02-02` (string) - Date. Format: YYYY-MM-DD

## Last Charge Invoice (object)
+ id: `1` (number) - Invoice ID
+ customer_id: `1` (number, required) - Customer ID
+ date_created: `2016-01-01` (string) - Create date. Format: YYYY-MM-DD
+ date_updated (string) - Update date. Format: YYYY-MM-DD
+ date_till (string) - Pay till date. Format: YYYY-MM-DD
+ date_payment (string) - Payment date. Format: YYYY-MM-DD
+ status: `not_paid` (string, required) - Status. Values: 'not_paid' for "Not paid", 'paid' for "Paid", 'pending' for "Pending" and 'deleted' for "Deleted"
+ number: `201601010003` (string, required) - Number
+ payment_id (number) - Payment ID.
+ payd_from_deposit (number) - Set to 1 of invoice payd from deposit. Values: 0 or 1
+ total: `123` (number) - Total of the Invoice
+ due: `100` (number) - Due sum of the Invoice

## Last Charge Proforma Invoice (object)
+ id: `1` (number) - Request ID
+ customer_id: `1` (number, required) - Customer ID
+ date_created: `2016-01-01` (string) - Create date. Format: YYYY-MM-DD
+ date_updated (string) - Last update. Format: YYYY-MM-DD
+ date_till (string) - Pay till date. Format: YYYY-MM-DD
+ date_payment (string) - Payment date. Format: YYYY-MM-DD
+ status: `not_paid` (string, required) - Status. Values: 'not_paid' for "Not paid", 'paid' for "Paid", 'pending' for "Pending"
+ number: `201601010003` (string, required) - Number
+ payment_id (number) - Payment ID.
+ total: `123` (number) - Total of the Proforma Invoice

## View Last Charge Response Info (object)
+ date: `2016-01-01` (string) - Date of a charge. Format: YYYY-MM-DD
+ maxPeriodTo: `2016-01-01` (string) - Max period in last charge. Format: YYYY-MM-DD
+ countTransactions: `1` (number) - Count of transactions to cancel
+ totalSum: `10` (number) - Total sum of invoice to cancel
+ emptyCharge: true (boolean) - Whether charge is empty
+ invoices (array[Last Charge Invoice])
+ ipi_invoices (array[Last Charge Invoice])
+ requests (array[Last Charge Proforma Invoice])
+ transactions (array[Transaction Response])
+ toBillRecords (array[Last Charge To Bill Record])

## View Last Charge Response (object)
+ lastChargeExist: true (boolean, required) - Values: true or false. Whether a last charge exists.
+ info (View Last Charge Response Info)

## Payment Statement Base (object)
+ date_time: `2021-07-15 09:50:00` (string) - Datetime. Format: YYYY-MM-DD HH:II:SS
+ title: `filename.csv` (string, required) - File name
+ handler: `handler` (string) - Handlerâ€™s name of folder in /var/www/splynx/system/external_handlers/finance/bank-statements/
+ payment_type: `2` (number) - Payment type
+ status: `new` (string) - Status. Values: new, fail, success
+ filename_original: `filename.csv` (string) - File name
+ filename_uploaded: `/var/www/splynx/uploads/statements/2021-08/2666df6a8056abc4` (string) - Path to uploaded file
+ filename_parsed: `/var/www/splynx/uploads/statements/2021-08/e89e98648573973b` (string) - Path to parsed file
+ delimiter: `tabulator` (string) - Delimiter

## Payment Statements Response (Payment Statement Base)
+ id: `1` (number) - Payment Statement ID

## Payment Statement Id (object)
+ id: `1` (number) - Payment Statement ID

## Payment Statement Import Id (object)
+ id: `1` (number) - Payment statement import ID

## Payment Statement Record Base (object)
+ bank_statements_process_id: `1` (number, required) - Payment Statement ID
+ datetime: `2021-07-15 09:50:00` (string) - Datetime. Format: YYYY-MM-DD HH:II:SS
+ payment_date: `2021-07-15` (string) - Payment date. Format: YYYY-MM-DD
+ amount: `10.0000` (string) - Amount
+ status: `new` (string) - Status. Values: new, processed, canceled, error, ignored, deleted, manual_paired, pending
+ pairing_1: `1` (string) - Customer ID
+ pairing_2: `202001000118` (string) - Invoice number
+ pairing_3 (string) - Pairing 3
+ additional_1 (string) - Additional field 1
+ additional_2 (string) - Additional field 2
+ additional_3 (string) - Additional field 3
+ comment: `Comment` (string) - Comment
+ customer_id: 1 (number, nullable) - Customer ID
+ invoice_id: 1 (number, nullable) - Invoice ID
+ credit_note_id (number, nullable) - Credit note ID
+ request_id (number, nullable) - Proforma invoice ID
+ payment_id (number, nullable) - Payment ID
+ transaction_id (number, nullable) - Transaction ID

## Payment Statements Records Response (Payment Statement Record Base)
+ id: `1` (number) - Payment Statement Record ID

## Payment Statement Record Id (object)
+ id: `1` (number) - Payment Statement Record ID

## Cards Refill (object)
+ id: `1` (number, required) - Card ID
+ status: `Active` (string) - Card Status: "Active", "Used", "Disabled", "Expired"
+ customer_id: `0` (number) - Customer ID
+ activated_at: `0000-00-00 00:00:00` (string) - Activate Date Time
+ full_code: `201701-SPL-rAnd19u8cf` (string) - Card Code (unique)

## Cards Refill Series (object)
+ serie: `201701` (string, required) - Cards Series ID
+ prefix: `SPL` (string, required) - Cards Series Prefix
+ amount: `10` (number) - Cards amount
+ created_at: `2017-12-12 10:51:31` (string) - Serie created at

## Cards Refill Base (object)
+ prefix: `SPL` (string, required) - Cards Series Prefix
+ quantity: `10` (number, required) - Cards amount
+ price: `5` (number, required) - Price per card
+ valid_till: `2019-12-01` (string, required) - Validity date

## Cards Refill Series Id (object)
+ serie: `201702` (string) - Cards Series ID

## Cards Refill Id (object)
+ id: `101` (number) - Card ID

## Billing Info Response (object)
+ howManyMonthsLeft: `1` (number) - Money for payment are left for N months. Only for prepaid monthly customers.
+ howManyDaysLeft: `28` (number) - Money for payment are left for N days
+ paymentPerMonth: `175.6700` (number) - Price per month for all services. Only for prepaid monthly customers.
+ paymentPerDay: `6.2739` (number) - Price per day for all services
+ deposit: `235.09` (number) - Current customer account balance
+ blocking_date: `2019-03-25` (string) - Prepaid expiration date. Only for prepaid monthly customers.

## Payment accounts Response (object)
+ id: `1` (number) - This id payment account.
+ title: `Stripe` (string) - Title payment account.
+ field_1: `Stripe customer account ID` (string) - customer account ID.
+ field_2: `Stripe card id` (string) - card id.
+ field_3: `Card Brand name` (string) - Brand name.
+ field_4: `Card 4last digits` (string) - 4last digits.
+ field_5: `Card exp month` (string) - exp month.
+ field_6: `extra value` (string) - extra value.
+ field_7: `extra value` (string) - extra value.
+ field_8: `extra value` (string) - extra value.
+ field_9: `extra value` (string) - extra value.
+ field_10: `extra value` (string) - extra value.

## Payment account data (object)
+ account_id: `1` (number) - This id payment account.
+ customer_id: `1` (string) - This id customer.
+ field_1: `` (string)
+ field_2: `` (string)
+ field_3: `` (string)
+ field_4: `` (string)
+ field_5: `` (string)
+ field_6: `` (string)
+ field_7: `` (string)
+ field_8: `` (string)
+ field_9: `` (string)
+ field_10: `` (string)

## Invoice Relation Response (object)
+ id: `1` (number) - This is ID of invoice relation
+ customer_id: `3` (number) - This is ID of related customer
+ payer_id: `45` (number) - This is ID of a payment or transaction or credit note
+ type: `payment` (string) - Type of payer (payment, transaction or credit_note)
+ invoice_id: `100` (number) - ID of related an invoice
+ `transaction_id`: `132` (number) - ID of related transaction. Used instead of invoice_id
+ amount: `15.30` (number) - Amount

# Group Inventory

## Inventory Items collection [/admin/inventory/items]

### Create a Inventory Item [POST]
Creates a new Inventory Item.

+ Request (application/json)
    + Attributes (Item Create)

+ Response 201 (application/json)
    + Attributes (Item Id)

### List all Inventory Items [GET]
Returns a list of your Inventory Items.

+ Response 200 (application/json)
    + Attributes (array[Item Response])

## Inventory Item [/admin/inventory/items/{id}]
Work with Inventory Items.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Inventory Item.

### Retrieve a Inventory Item [GET]
Retrieves the Inventory Item with the given ID.

+ Response 200 (application/json)
    + Attributes (Item Response)

### Update a Inventory Item [PUT]
Update the Inventory Item with the given ID.

+ Request (application/json)
    + Attributes (Item Update)

+ Response 202 (application/json)

### Delete a Inventory Item [DELETE]
Delete the Inventory Item with the given ID.

+ Response 204

## Inventory Item upload file [/admin/inventory/items/{id}--upload]
Update the Inventory Item with the given ID.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Inventory Item.

### Upload file for Inventory Item [POST]
Update the Inventory Item with new file upload.

+ Request (multipart/form-data)
    + Attributes (Item Update Upload)

+ Response 201 (application/json)

## Inventory Products collection [/admin/inventory/products]

### Create a Inventory Product [POST]
Creates a new Inventory Product.

+ Request (application/json)
    + Attributes (Product Create)

+ Response 201 (application/json)
    + Attributes (Product Id)

### List all Inventory Products [GET]
Returns a list of your Inventory Products.

+ Response 200 (application/json)
    + Attributes (array[Product Response])

## Inventory Product [/admin/inventory/products/{id}]
Work with Inventory Products.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Inventory Product.

### Retrieve a Inventory Product [GET]
Retrieves the Inventory Product with the given ID.

+ Response 200 (application/json)
    + Attributes (Product Response)

### Update a Inventory Product [PUT]
Update the Inventory Product with the given ID.

+ Request (application/json)
    + Attributes (Product Update)

+ Response 202 (application/json)

### Delete a Inventory Product [DELETE]
Delete the Inventory Product with the given ID.

+ Response 204

## Inventory Product upload file [/admin/inventory/products/{id}--upload]
Update the Inventory Product with the given ID.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Inventory Product.

### Upload file for Inventory Product [POST]
Update the Inventory Product with new file upload.

+ Request (multipart/form-data)
    + Attributes (Product Update Upload)

+ Response 201 (application/json)

## Inventory Suppliers collection [/admin/inventory/suppliers]

### Create a Inventory Supplier [POST]
Creates a new Inventory Supplier.

+ Request (application/json)
    + Attributes (Supplier Base)

+ Response 201 (application/json)
    + Attributes (Supplier Id)

### List all Inventory Suppliers [GET]
Returns a list of your Inventory Suppliers.

+ Response 200 (application/json)
    + Attributes (array[Supplier Response])

## Inventory Supplier [/admin/inventory/suppliers/{id}]
Work with Inventory Suppliers.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Inventory Supplier.

### Retrieve a Inventory Supplier [GET]
Retrieves the Inventory Supplier with the given ID.

+ Response 200 (application/json)
    + Attributes (Supplier Response)

### Update a Inventory Supplier [PUT]
Update the Inventory Supplier with the given ID.

+ Request (application/json)
    + Attributes (Supplier Base)

+ Response 202 (application/json)

### Delete a Inventory Supplier [DELETE]
Delete the Inventory Supplier with the given ID.

+ Response 204

## Inventory Vendors collection [/admin/inventory/vendors]

### Create a Inventory Vendor [POST]
Creates a new Inventory Vendor.

+ Request (application/json)
    + Attributes (Vendor Base)

+ Response 201 (application/json)
    + Attributes (Vendor Id)

### List all Inventory Vendors [GET]
Returns a list of your Inventory Vendors.

+ Response 200 (application/json)
    + Attributes (array[Vendor Response])

## Inventory Vendor [/admin/inventory/vendors/{id}]
Work with Inventory Vendors.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Inventory Vendor.

### Retrieve a Inventory Vendor [GET]
Retrieves the Inventory Vendor with the given ID.

+ Response 200 (application/json)
    + Attributes (Vendor Response)

### Update a Inventory Vendor [PUT]
Update the Inventory Vendor with the given ID.

+ Request (application/json)
    + Attributes (Vendor Base)

+ Response 202 (application/json)

### Delete a Inventory Vendor [DELETE]
Delete the Inventory Vendor with the given ID.

+ Response 204

## Inventory Supplier Invoices collection [/admin/inventory/supplier-invoices]

### Create a Supplier Invoice [POST]
Creates a new Supplier Invoice.

+ Request (application/json)
    + Attributes (Supplier Invoice Create)

+ Response 201 (application/json)
    + Attributes (Supplier Invoice Id)

### List all Supplier Invoice [GET]
Returns a list of your Supplier Invoice.

+ Response 200 (application/json)
    + Attributes (array[Supplier Invoice Response])

## Supplier Invoice [/admin/inventory/supplier-invoices/{id}]
Work with Supplier Invoice.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Supplier Invoice.

### Retrieve a Supplier Invoice [GET]
Retrieves the Supplier Invoice with the given ID.

+ Response 200 (application/json)
    + Attributes (Supplier Invoice Response)

### Update a Supplier Invoice [PUT]
Update the Supplier Invoice with the given ID.

+ Request (application/json)
    + Attributes (Supplier Invoice Update)

+ Response 202 (application/json)

### Delete a Supplier Invoice [DELETE]
Delete the Supplier Invoice with the given ID.

+ Response 204

## Supplier Invoice upload file [/admin/inventory/supplier-invoices/{id}--upload]
Update the Supplier Invoice with the given ID.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Supplier Invoice.

### Upload file for Supplier Invoice [POST]
Update the Supplier Invoice with new file upload.

+ Request (multipart/form-data)
    + Attributes (Supplier Invoice Update Upload)

+ Response 201 (application/json)

## Item rent [/admin/inventory/items-rent]
Rent item.

### Rent item [POST]
Rent inventory item.

+ Request (application/json)
    + Attributes (Item Rent Object)

+ Response 201 (application/json)

## Item sell [/admin/inventory/items-sell]
Sell item.

### Sell item [POST]
Sell inventory item.

+ Request (application/json)
    + Attributes (Item Sell Object)

+ Response 201 (application/json)
    + Attributes (Item Sell Response)

# Data Structures

## Item Rent Object (object)
+ id: `1` (number, required) - Inventory item id.
+ price: `15` (number) - Price unit item.
+ tariff_id: `1` (number, required) - Recurring tariff id.
+ service_data(Customer Recurring service Base, required) - Recurring service data.

## Item Sell Object (object)
+ customer_id: `1` (number, required) - Customer ID
+ date_created: `2016-01-01` (string) - Create date. Format: YYYY-MM-DD
+ date_updated (string) - Update date. Format: YYYY-MM-DD
+ date_till (string) - Pay till date. Format: YYYY-MM-DD
+ date_payment (string) - Payment date. Format: YYYY-MM-DD
+ status: `not_paid` (string, required) - Status. Values: 'not_paid' for "Not paid", 'paid' for "Paid" and 'deleted' for "Deleted"
+ number: `201601010003` (string) - Number
+ payment_id (number) - Payment ID.
+ payd_from_deposit (number) - Set to 1 of invoice payd from deposit. Values: 0 or 1
+ create_invoice: `1` (number) - Create invoice or future items. . Values: 0 or 1. By default invoice will be created.
+ items(array[Items Sell Object]) - Items sell.

## Items Sell Object (object)
+ item_id: `1` (number, required) - Inventory item id
+ description: `Desc of item` (string, required) - Description of invoice item
+ quantity: `1` (number) - Quantity. Default: 1
+ unit (number) - Unit
+ price: `123` (number) - Price
+ tax_percent: `0` (number) - VAT %
+ period_from: `2016-01-01` (string) - Date. Format: YYYY-MM-DD
+ period_to: `2016-01-02` (string) - Date. Format: YYYY-MM-DD
+ categoryIdForTransaction: `1` (number) - Allows to set transaction category for item transaction

## Item Sell Response (object)
+ invoice (Invoice Response)
+ transactions (array[Transaction Response])

## Item Base (object)
+ notes: `note` (string) - Note
+ barcode: `barcode` (string) - Unique item barcode
+ serial_number: `number` (string) - Serial number

## Item Create (Item Base)
+ product_id: `1` (number, required) - Product ID
+ file: `cURL file` (string) - cURL file instance to attach.

## Item Update (Item Base)
+ `delete_photo`: true (boolean) - Delete current item photo.

## Item Update Upload (Item Update)
+ `file: `cURL file` (string) - cURL file instance to attach.

## Item Response (Item Base)
+ id: `1` (number) - Inventory Item ID
+ `supplier_invoices_item_id`: `1` (number) - Supplier invoice ID
+ `status`: `stock` (enum[string])
    Item status
    + Members
        + `internal_usage`
        + `sold`
        + `rent`
        + `returned`
        + `assigned`

+ `mark`: `new` (enum[string])
    Item mark
    + Members
        + `used`
        + `broken`

+ `customer_id`: `1` (number) - Customer ID
+ `admin_id`: `1` (number) - Admin ID
+ `service_id`: `1` (number) - Service ID
+ `invoice_id`: `1` (number) - Invoice ID
+ `cost_price`: `1.0000` (number) - Cost price
+ `transaction_id`: `1` (number) - Transaction ID
+ `product_id`: `1` (number) - Product ID
+ `stock_id`: `1` (number) - Stock ID
+ `filename_original`: `test.png` (string) - Original file name
+ filename: `6bcee1fd1062637b` (string) - File name
+ `file_link`: `/admin/download--view?module=inventory_items&id=21&ver=6bcee1fd1062637` (string) -  Link to file

## Item Id (object)
+ id: `1` (number) - Inventory Item ID

## Product Base (object)
+ `name`: `Product #315955388` (string, required) - Product name
+ `vendor_id`: 13 (number) - Vendor ID
+ `category_id`: 1 (number) - Category ID
+ `rent_price`: 50.5000 (number) - Rent price
+ `sold_price`: 150.4500 (number) - Vendor price

## Product Create (Product Base)
+ file: `cURL file` (string) - cURL file instance to attach product photo.

## Product Update (Product Base)
+ `delete_photo`: true (boolean) - Delete current product photo.

## Product Update Upload (Product Update)
+ `file: `cURL file` (string) - cURL file instance to attach.

## Product Response (Product Base)
+ `id`: `1` (number) - Inventory Product ID
+ `filename_original`: `test.png` (string) - Original file name
+ `filename`: `6bcee1fd1062637b` (string) - File name
+ `file_link`: `/admin/download--view?module=inventory_products&id=76&ver=02722995746c379e` (string) -  Link to file

## Product Id (object)
+ id: `1` (number) - Inventory Product ID

## Supplier Base (object)
+ `name`: `Supplier #1812880724` (string, required) - Supplier name
+ `address`: `test address 451683022` (string) - Supplier address
+ `contact_name`: `test contact name #282951548` (string) - Supplier contact name
+ `email`: `test1559922455@email.com` (string) - Supplier email
+ `phone`: `test-phone1275935693` (string) - Supplier phone
+ `tax_included`: true (boolean) - Tax included.

## Supplier Response (Supplier Base)
+ `id`: `1` (number) - Inventory Supplier ID

## Supplier Id (object)
+ id: `1` (number) - Inventory Supplier ID

## Vendor Base (object)
+ `name`: `Vendor #1812880724` (string, required) - Vendor name

## Vendor Response (Vendor Base)
+ `id`: `1` (number) - Inventory Vendor ID

## Vendor Id (object)
+ id: `1` (number) - Inventory Vendor ID

## Supplier Invoice Base (object)
+ `supplier_id`: 1 (number, required) - Supplier ID
+ `original_invoice_number`: `invoice number` (string) - Original invoice number
+ `date`: `2019-05-02` (string) - Invoice create date. Format: YYYY-MM-DD
+ `items` (array[Supplier Invoice Item], required) - Items of invoice

## Supplier Invoice Create (Supplier Invoice Base)
+ file: `cURL file` (string) - cURL file instance to attach product photo.

## Supplier Invoice Update (Supplier Invoice Base)
+ `items` (array[Supplier Invoice Item Update], required) - Items of invoice

## Supplier Invoice Update Upload (Supplier Invoice Update)
+ `file: `cURL file` (string) - cURL file instance to attach.

## Supplier Invoice Response (Supplier Invoice Update)
+ id: `1` (number) - Invoice ID
+ `filename_original`: `test.png` (string) - Original file name
+ `filename`: `6bcee1fd1062637b` (string) - File name
+ `file_link`: `/admin/download--view?module=inventory_supplier_invoices&id=15` (string) -  Link to file

## Supplier Invoice Id (object)
+ id: `1` (number) - Invoice ID

## Supplier Invoice Item (object)
+ `product_id`: 2 (number, required) - Product ID
+ `quantity`: 1 (number, required) - Quantity
+ `tax`: 10 (number) - VAT %
+ `price`: 100.5000 (number) - Price witout VAT

## Supplier Invoice Item Update (object)
+ `id`: 1 (number) - Item ID
+ `product_id`: 2 (number, required) - Product ID
+ `tax`: 10 (number) - VAT %
+ `price`: 100.5000 (number) - Price witout VAT

# Group Networking

## ACS Devices collection [/admin/networking/acs-devices]

### List all ACS Devices [GET]
Returns a list of your ACS devices.

+ Response 200 (application/json)
    + Attributes (array[ACS Device Response])

## ACS Device [/admin/networking/acs-devices/{id}]
Work with ACS Devices.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired ACS Device.

### Retrieve an ACS Device [GET]
Retrieves the ACS Device with the given ID.

+ Response 200 (application/json)
    + Attributes (ACS Device Response)

### Update an ACS Device [PUT]
Update the ACS Device with the given ID.

+ Request (application/json)
    + Attributes (ACS Device Update)

+ Response 202 (application/json)

### Run provisioning [PUT /admin/networking/acs-devices/{id}--provisioning]
Run provisioning on ACS Device.

+ Response 204 (application/json)

### Delete an ACS Device [DELETE]
Delete the ACS Device with the given ID.

+ Response 204

## Routers collection [/admin/networking/routers]

### Create a Router [POST]
Creates a new Router.

+ Request (application/json)
    + Attributes (Router Base)

+ Response 201 (application/json)
    + Attributes (Router Id)

### List all Routers [GET]
Returns a list of your Routers.

+ Response 200 (application/json)
    + Attributes (array[Router Response])

## Router [/admin/networking/routers/{id}]
Work with Routers.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Router.

### Retrieve a Router [GET]
Retrieves the Router with the given ID.

+ Response 200 (application/json)
    + Attributes (Router Response)

### Update a Router [PUT]
Update the Router with the given ID.

+ Request (application/json)

        {
            "title": Omega
        }

+ Response 202 (application/json)

### Delete a Router [DELETE]
Delete the Router with the given ID.

+ Response 204

## Routers Sectors collection [/admin/networking/routers-sectors]

### Create a Router Sector [POST]
Creates a new Router Sector.

+ Request (application/json)
    + Attributes (Routers Sectors Base)

+ Response 201 (application/json)
    + Attributes (Router Sector Id)

### List all Routers Sectors [GET]
Returns a list of your Routers Sectors.

+ Response 200 (application/json)
    + Attributes (array[Router Sector Response])

## Routers Sectors [/admin/networking/routers-sectors/{id}]
Work with Routers Sectors.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Router Sector.

### Retrieve a Router Sector [GET]
Retrieves the Router Sector with the given ID.

+ Response 200 (application/json)
    + Attributes (Router Sector Response)

### Update a Router Sector [PUT]
Update the Router Sector with the given ID.

+ Request (application/json)

        {
            "title": "Limit 4/1",
            "speed_down": 4096,
            "priority": 2
        }

+ Response 202 (application/json)

### Delete a Router Sector [DELETE]
Delete the Router Sector with the given ID.

+ Response 204

## Mikrotik Sectors collection [/admin/networking/mikrotik-sectors/{router_id}]
Work with Mikrotik Sectors.

### List Mikrotik Sectors [GET]
Returns a list of your Mikrotik Sectors by Router ID.

+ Parameters
    + router_id (required, number, `1`) ... The ID of the desired Mikrotik Router. **Beware: this is Router ID!!!**

+ Response 200 (application/json)
    + Attributes (array[Router Sector Response])

## Voice devices collection [/admin/networking/voice-devices]

### Create a Voice device [POST]
Creates a new Voice device.

+ Request (application/json)
    + Attributes (Voice device Base)

+ Response 201 (application/json)
    + Attributes (Voice device Id)

### List all Voice devices [GET]
Returns a list of your Voice devices.

+ Response 200 (application/json)
    + Attributes (array[Voice device Response])

## Voice device [/admin/networking/voice-devices/{id}]
Work with Voice devices.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Voice device.

### Retrieve a Voice device [GET]
Retrieves the Voice device with the given ID.

+ Response 200 (application/json)
    + Attributes (Voice device Response)

### Update a Voice device [PUT]
Update the Voice device with the given ID.

+ Request (application/json)

        {
            "title": Omega
        }

+ Response 202 (application/json)

### Delete a Voice device [DELETE]
Delete the Voice device with the given ID.

+ Response 204

## IPv4 networks collection [/admin/networking/ipv4]

### Create a IPv4 network [POST]
Creates a new IPv4 network.

+ Request (application/json)
    + Attributes (IPv4 network Base)

+ Response 201 (application/json)
    + Attributes (IPv4 network Id)

### List all IPv4 networks [GET]
Returns a list of your IPv4 networks.

+ Response 200 (application/json)
    + Attributes (array[IPv4 network Response])

## IPv4 network [/admin/networking/ipv4/{id}]
Work with IPv4 networks.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired IPv4 network.

### Retrieve a IPv4 network [GET]
Retrieves the IPv4 network with the given ID.

+ Response 200 (application/json)
    + Attributes (IPv4 network Response)

### Update a IPv4 network [PUT]
Update the IPv4 network with the given ID.

+ Request (application/json)

        {
            "title": Omega
        }

+ Response 202 (application/json)

### Delete a IPv4 network [DELETE]
Delete the IPv4 network with the given ID.

+ Response 204

## IPv4 IP collection [/admin/networking/ipv4-ip/{network}]

+ Parameters
    + network (required, number, `1`) ... The ID of the desired IPv4 network.

### List all IPs by IPv4 network id [GET]
Returns a list of IPs in IPv4 network.

+ Response 200 (application/json)
    + Attributes (array[IPv4 IP Response])

## IPv4 IP search [/admin/networking/ipv4-ip?main_attributes%5Bis_used%5D={is_used}&main_attributes%5Bipv4_networks_id%5D={network_id}]

+ Parameters
    + is_used (required, number, `0`) ... Example of param for search (Search all free IPs).
    + network_id (required, number, `1`) ... Example of param for search (Search IPs in specific network by id).

### Search IPs by params (example) [GET]
Returns a list of IPs by params.<br>Highly recommended to use `ipv4_networks_id` param for search<br>(GET params example: `?main_attributes[ipv4_networks_id]=1`).<br>More details about search by params you can find [here](/#introduction/search,-order,-limit,-and-offset).

+ Response 200 (application/json)
    + Attributes (array[IPv4 IP Response Free])

## IPv4 IP [/admin/networking/ipv4-ip/{network}--{ip}]
Work with IPv4 IP.

+ Parameters
    + network (required, number, `1`) ... The ID of the desired IPv4 network.
    + ip (required, number, `1`) ... The ID of the IPv4 IP.

### Retrieve a IPv4 IP [GET]
Retrieves the IPv4 IP with the given ID.

+ Response 200 (application/json)
    + Attributes (IPv4 IP Response)

### Update a IPv4 IP [PUT]
Update the IPv4 IP with the given ID.

+ Request (application/json)

        {
            "title": 'Used by John Doe',
            "host_category": 1,
            "customer_id": 1,
            "is_used": 1
        }

+ Response 202 (application/json)

## IPv6 networks collection [/admin/networking/ipv6]

### Create a IPv6 network [POST]
Creates a new IPv6 network.

+ Request (application/json)
    + Attributes (IPv6 network Base)

+ Response 201 (application/json)
    + Attributes (IPv6 network Id)

### List all IPv6 networks [GET]
Returns a list of your IPv6 networks.

+ Response 200 (application/json)
    + Attributes (array[IPv6 network Response])

## IPv6 network [/admin/networking/ipv6/{id}]
Work with IPv6 networks.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired IPv6 network.

### Retrieve a IPv6 network [GET]
Retrieves the IPv6 network with the given ID.

+ Response 200 (application/json)
    + Attributes (IPv6 network Response)

### Update a IPv6 network [PUT]
Update the IPv6 network with the given ID.

+ Request (application/json)

        {
            "title": Omega
        }

+ Response 202 (application/json)

### Delete a IPv6 network [DELETE]
Delete the IPv6 network with the given ID.

+ Response 204


## IPv6 IP collection [/admin/networking/ipv6-ip/{network}]

+ Parameters
    + network (required, number, `1`) ... The ID of the desired IPv6 network.

### List all Networks (IP) by IPv6 network id [GET]
Returns a list of IPv6 networks in IPv6 network.

+ Response 200 (application/json)
    + Attributes (array[IPv6 IP Response])

### Use a IPv6 IP [POST]
Use new IPv6 IP on network
+ Parameters
    + network (required, number, `1`) ... The ID of the desired IPv6 network.

+ Request (application/json)

        {
            "ipv6_networks_id": '1',
            "ip": "2001:db8:0:a::",
            "prefix": 64,
            "title": 'Used by John Doe',
            "host_category": 1,
            "customer_id": 1,
            "is_used": 1
        }

+ Response 202 (application/json)

## IPv6 IP search [/admin/networking/ipv6-ip?main_attributes%5Bcomment%5D={comment}&main_attributes%5Bipv6_networks_id%5D={network_id}]

+ Parameters
    + comment (required, string, `First IP`) ... Example of param for search (Search all IPs by comment).
    + network_id (required, number, `1`) ... Example of param for search (Search IPs in specific network by id).

### Search IPs by params (example) [GET]
Returns a list of IPs by params.<br>Highly recommended to use `ipv6_networks_id` param for search<br>(GET params example: `?main_attributes[ipv6_networks_id]=1`).<br>More details about search by params you can find [here](/#introduction/search,-order,-limit,-and-offset).

+ Response 200 (application/json)
    + Attributes (array[IPv6 IP Response])

## IPv6 IP get free IP [/admin/networking/ipv6-ip/{network}--{free}--{prefix}]
+ Parameters
    + network (required, number, `1`) ... The ID of the desired IPv6 network.
    + free (required, string, `free`) ... Indicate that we need free IP (example: 1--free)
    + prefix (number, `32`-`64`) ... Prefix what you want to get free (example: 1--free-50)

### List free Networks (IP) by IPv6 network id [GET]
Returns one free IPv6 networks in IPv6 network.

+ Response 200 (application/json)
    + Attributes (IPv6 IP Response)

## IPv6 IP [/admin/networking/ipv6-ip/{network}--{ip}]
Work with IPv6 IP.

+ Parameters
    + network (required, number, `1`) ... The ID of the desired IPv6 network.
    + ip (required, number, `1`) ... The ID of the IPv6 IP.

### Retrieve a IPv6 IP [GET]
Retrieves the IPv6 IP with the given ID.

+ Response 200 (application/json)
    + Attributes (IPv6 IP Response)

### Update a IPv6 IP [PUT]
Update the IPv6 IP with the given ID.

+ Request (application/json)

        {
            "title": 'Used by John Doe',
            "host_category": 1,
            "customer_id": 1,
            "is_used": 1
        }

+ Response 202 (application/json)

### Delete a IPv6 IP [DELETE]
Delete (Un Use) the IPv6 IP (Network) with the given ID.

+ Response 204


## Monitoring collection [/admin/networking/monitoring]

### Create a Monitoring [POST]
Creates a new Monitoring.

+ Request (application/json)
    + Attributes (Monitoring Base)

+ Response 201 (application/json)
    + Attributes (Monitoring Id)

### List all Monitoring [GET]
Returns a list of your Monitoring.

+ Response 200 (application/json)
    + Attributes (array[Monitoring Response])

## Monitoring [/admin/networking/monitoring/{id}]
Work with Monitoring.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Monitoring.

### Retrieve a Monitoring [GET]
Retrieves the Monitoring with the given ID.

+ Response 200 (application/json)
    + Attributes (Monitoring Response)

### Update a Monitoring [PUT]
Update the Monitoring with the given ID.

+ Request (application/json)

        {
            "title": Omega
        }

+ Response 202 (application/json)

### Delete a Monitoring [DELETE]
Delete the Monitoring with the given ID.

+ Response 204

## Traffic accounting [/admin/networking/traffic-accounting/{id}]
Work with Traffic accounting.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired internet service.

### Add Traffic accounting [PUT]
Add data usage to traffic accounting with the given service ID. (download & upload is required)

+ Request (application/json)

        {
            "download": 5000000,
            "upload": 480000,
            "time": 300,
        }

+ Response 202 (application/json)

## Mikrotik [/admin/networking/routers-mikrotik/{id}]
Get Mikrotik.

+ Parameters
    + id (number, required, `1`) ... The ID if of the desired Mikrotik.

### Retrieve a Mikrotik [GET]
Retrieves the Mikrotik with the given ID.

+ Response 200 (application/json)
    + Attributes (Mikrotik Response)

## Cpe collection [/admin/networking/cpe]

### Create a Cpe [POST]
Creates a new Cpe.

+ Request (application/json)
    + Attributes (Cpe Base)

+ Response 201 (application/json)
    + Attributes (Cpe Id)

### List all Cpe [GET]
Returns a list of your Cpes.

+ Response 200 (application/json)
    + Attributes (array[Cpe Response])

## Cpe [/admin/networking/cpe/{id}]
Work with Cpe.

+ Parameters
    + id (number, required, `1`) ... The ID ofthe desired Cpe.

### Retrieve a Cpe [GET]
Retrieves the Cpe with the given ID.

+ Response 200 (application/json)
    + Attributes (Cpe Response)

### Update a Cpe [PUT]
Update the Cpe with the given ID.

+ Request (application/json)

        {
            "title": Public router
        }

+ Response 202 (application/json)

### Delete a Cpe [DELETE]
Delete the Cpe with the given ID.

+ Response 204

## CpeAp collection [/admin/networking/cpe-ap]

### Create a CpeAp [POST]
Creates a new CpeAp.

+ Request (application/json)
    + Attributes (CpeAp Base)

+ Response 201 (application/json)
    + Attributes (CpeAp Id)

### List all CpeAp [GET]
Returns a list of your CpeAps.

+ Response 200 (application/json)
    + Attributes (array[CpeAp Response])

## CpeAp [/admin/networking/cpe-ap/{id}]
Work with CpeAp.

+ Parameters
    + id (number, required, `1`) ... The ID ofthe desired CpeAp.

### Retrieve a CpeAp [GET]
Retrieves the CpeAp with the given ID.

+ Response 200 (application/json)
    + Attributes (CpeAp Response)

### Update a CpeAp [PUT]
Update the CpeAp with the given ID.

+ Request (application/json)

        {
            "name": Public router
        }

+ Response 202 (application/json)

### Delete a CpeAp [DELETE]
Delete the CpeAp with the given ID.

+ Response 204

## CpeQos collection [/admin/networking/cpe-qos]

### Create a CpeQos [POST]
Creates a new CpeQos.

+ Request (application/json)
    + Attributes (CpeQos Base)

+ Response 201 (application/json)
    + Attributes (CpeQos Id)

### List all CpeQos [GET]
Returns a list of your CpeQos.

+ Response 200 (application/json)
    + Attributes (array[CpeQos Response])

## CpeQos [/admin/networking/cpe-qos/{id}]
Work with CpeQos.

+ Parameters
    + id (number, required, `1`) ... The ID ofthe desired CpeQos.

### Retrieve a CpeQos [GET]
Retrieves the CpeQos with the given ID.

+ Response 200 (application/json)
    + Attributes (CpeQos Response)

### Update a CpeQos [PUT]
Update the CpeQos with the given ID.

+ Request (application/json)

        {
            "title": Public router
        }

+ Response 202 (application/json)

### Delete a CpeQos [DELETE]
Delete the CpeQos with the given ID.

+ Response 204

## CpeDhcp [/admin/networking/cpe-dhcp/{id}]
Work with CpeDhcp.

+ Parameters
    + id (number, required, `1`) ... The ID ofthe desired CpeDhcp.

### Retrieve a CpeDhcp [GET]
Retrieves the CpeDhcp with the given ID.

+ Response 200 (application/json)
    + Attributes (CpeDhcp Response)

### Update a CpeDhcp [PUT]
Update the CpeDhcp with the given ID.

+ Request (application/json)

        {
            "name": Public router
        }

+ Response 202

## Network sites collection [/admin/networking/network-sites]

### Create Network site [POST]
Creates new Network site.

+ Request (application/json)
    + Attributes (Network site Base)

+ Response 201 (application/json)
    + Attributes (Network site Id)

### List all Network sites [GET]
Returns a list of your Network sites.

+ Response 200 (application/json)
    + Attributes (array[Network site Response])

## Network site [/admin/networking/network-sites/{id}]
Work with Network site.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Network site.

### Retrieve Network site [GET]
Retrieves the Network site with the given ID.

+ Response 200 (application/json)
    + Attributes (Network site Response)

### Update Network site [PUT]
Update the Network site with the given ID.

+ Request (application/json)

        {
            "title": "Network site 1",
            "description": "Network site description",
            "address": "Big street 11-321",
            "address": "Big street 11-321",
            "gps": "50.10676296991858,14.445095658302305",
            "location_id": "1"
        }

+ Response 202 (application/json)

### Delete Network site [DELETE /admin/networking/network-sites/{id}]
Delete the Network site with the given ID.

+ Parameters
    + id (required, number, `1`) ... ID of the Network site

+ Response 204

# Data Structures

## Network site Base (object)
+ title: `Alpha` (string) - Title
+ description: `Description` (string) - Description of network site
+ address: `Big street 11-321` (string) - Address
+ gps: `50.10676296991858,14.445095658302305` (string) - Valid coordinates
+ location_id: `1` (number, required) - Location (id)
+ partners_ids: `1`,`2` (array[number], required) - Array of partners (ids) who can use network site

## Network site Response(Network site Base)
+ id: `1` (number) - Network site ID

## Network site Id (object)
+ id: `1` (number) - Network site ID

## ACS Device Base (object)
+ customer_id: `1` (number) - Customer ID
+ internet_service_id: `10` (number) - Internet service ID.
+ voice_service_id: `11` (number) - Voice service ID.
+ recurring_service_id: `12` (number) - Recurring service ID.
+ provisioned: `no` (enum[string])
    Is ACS Device provisioned
    + Members
        + `no` - Not provisioned.
        + `yes` - Provisioned.
        + `error` - Error occurred during provisioning.

## ACS Device Update (ACS Device Base)
+ type: `1` (number) - ACS type ID (work in pair with group field).
+ group: `3` (number) - ACS device group ID (work in pair with type field).

## ACS Device (ACS Device Base)
+ type: `1` (number) - ACS type ID.
+ group: `3` (number) - ACS device group ID.
+ device_id: `E48D8C-CHR-000000` (string) - ACS device ID.
+ prefix: `device-prefix` (string) - ACS device prefix.
+ product_class: `WR1300` (string) - Product class.
+ manufacturer: `TP-Link` (string) - ACS device manufacturer.
+ oui: `F4A454` (string) - ACS device OUI.
+ serial_number: `000000` (string) - ACS device serial number.
+ software_version: `1.14.18-20220627-154554` (string) - ACS device software version.
+ hardware_version: `1.56.123` (string) ACS device hardware version.
+ uptime: `2` (number) - Uptime.
+ last_inform: `2023-07-12 13:13:43` (string) - ACS device last inform datetime.
+ registered: `2023-07-12 13:13:32` (string) - ACS device registered datetime.
+ auto_provisioning: `0` (enum[string])
    Is auto provisioning enabled
    + Members
        + `0` - Enabled.
        + `1` - Disabled.
+ model_name: `WR1300` (string) - ACS device model name.
+ last_updated: `2023-07-12 13:13:43` (string) - ACS device last updated datetime.
+ status: `null` (string) - ACS device status.

## ACS Device Response (ACS Device)
+ id: `1` (number) - ACS Device ID

## Router Base (object)
+ title: `Alpha` (string, required) - Title (unique)
+ model: `Mega router` (string) - Model
+ partners_ids: `1` (array, required) - Partners (ids)
+ location_id: `1` (number, required) - Location (id)
+ address: `Big street 11-321` (string) - Address
+ ip: `192.168.1.100` (string, required) - Router IP (unique)
+ gps: `45.83,126.62;45.85,126.63;45.85,126.60;45.84,126.60;45.83950371555224,126.62528514862058;` (string) - Area router
+ gps_point: `45.83,126.62` (string) - Point router
+ authorization_method: `none` (enum[string], required)
    Authorization method
    + Members
        + `none` - None.
        + `firewall_ip_mac_filter` - Firewall IP-MAC filter.
        + `dhcp_leases` - DHCP (Leases).
        + `ppp_dhcp_radius` - PPP/DHCP (Radius).
        + `ppp_secrets` - PPP (Secrets).
        + `hotspot_users` - Hotspot (Users).
        + `hotspot_radius` - Hotspot (Radius).
+ accounting_method: `none` (enum[string], required)
    Accounting method
    + Members
        + `none` - None.
        + `radius` - Radius accounting.
        + `netflow` - NetFlow accounting.
+ nas_type: `1` (string, required) - ID of NAS type. You can get it on page "Config / Networking / NAS types"
+ nas_ip: `192.168.1.100` (string) - IP address assigned to the NAS
+ radius_secret (string) - Radius secret
+ status: `null` (enum[string])
    Router status
    + Members
        + `ok` - API OK.
        + `api_error` - API (With Errors).
        + `error` - API Error
        + `disabled` - API Disabled
        + `unknown` - API Unknown
+ pool_ids: `1` (array) - Pool IDs

## Routers Sectors Base (object)
+ router_id: `1` (number, required) - Router ID
+ title: `Limit 2/1` (string, required) - Parent
+ speed_down: `2048` (number, required) - Speed Down (kbps)
+ speed_up: `1024` (number, required) - Speed Up (kbps)
+ limit_at: `95` (number, required) - Guaranteed speed Limit-at (%)

## Router Response (Router Base)
+ id: `1` (number) - Router ID

## Router Sector Response (Routers Sectors Base)
+ id: `1` (number) - Router Sector ID

## Router Id (object)
+ id: `1` (number) - Router ID

## Router Sector Id (object)
+ id: `2` (number) - Router  Sector ID

## Voice device Base (object)
+ title: `Alpha` (string, required) - Title (unique)
+ model: `Mega Voice device` (string) - Model
+ partners_ids: `1` (array, required) - Partners (ids)
+ location_id: `1` (number, required) - Location (id) or 0 for all locations
+ address: `Big street 11-321` (string) - Address
+ ip: `192.168.1.100` (string, required) - IP (unique)

## Voice device Response (Voice device Base)
+ id: `1` (number) - Voice ID

## Voice device Id (object)
+ id: `1` (number) - Voice device ID

## Monitoring Base (object)
+ title: `Alpha` (string, required) - Title
+ network_site_id : `0` (number) - Network site ID
+ parent_id: `0` (number, required) - ID of Parent monitoring. 0 for none
+ producer: `1` (number, required) - Producer ID. You can get it on page "Config / Networking / Monitoring" from table "Producers"
+ model: `Mega monitoring` (string) - Model
+ ip: `192.168.1.100` (string, required) - IP address (unique)
+ snmp_port: `161` (number) - Port number used to communicate with the SNMP agent.
+ is_ping: `true` (boolean) - To ping or not
+ active: `true` (boolean) - SNMP Monitoring
+ snmp_community: `public` (string, required) - SNMP community
+ snmp_version: `1` (number, required) - SNMP Version. Values: 1 or 2
+ type: `1` (number, required) - Type ID. You can get it on page "Config / Networking / Monitoring" from table "Device types"
+ monitoring_group: `1` (number, required) - Group ID. You can get it on page "Config / Networking / Monitoring" from table "Groups"
+ partners_ids: `1` (array, required) - Partners (ids)
+ location_id: `1` (number, required) - Location (id)
+ address: `Big street 11-321` (string) - Address
+ send_notifications: `true` (boolean) - Send notifications or not
+ gps: `45.83,126.62` (string) - GPS point
+ gps_area: `45.83,126.62;45.85,126.63;45.85,126.60;45.84,126.60;45.83950371555224,126.62528514862058;` (string) - GPS area
+ delay_timer: `0` (number) - Time in seconds to wait before executing the operation
+ access_device: `false` (boolean) - Access device
+ snmp_time: `0` (number) - imestamp of the last SNMP response received
+ snmp_uptime: `0` (number)  - System uptime retrieved via SNMP
+ snmp_status: `9` (number) - Status values for specific SNMP checks or sensors
+ snmp_status_1: `9` (number) - Status values for specific SNMP checks or sensors
+ snmp_status_2: `9` (number) - Status values for specific SNMP checks or sensors
+ snmp_status_3: `9` (number) - Status values for specific SNMP checks or sensors
+ snmp_status_4: `9` (number) - Status values for specific SNMP checks or sensors
+ snmp_status_5: `9` (number) - Status values for specific SNMP checks or sensors
+ snmp_state: `up` (string) â€“ Current SNMP availability state of the device. Example: "up", "down",
+ ping_state: `up` (string) â€“ Current ICMP (ping) status of the device. Example: "up", "down"
+ access_device: `1` (number) - Access device ID
+ versions: `1`,`2` (array[number]) - Verions

## Monitoring Response (Monitoring Base)
+ id: `1` (number) - Monitoring ID

## Monitoring Id (object)
+ id: `1` (number) - Monitoring ID

## IPv4 network Base (object)
+ network: `10.0.0.0` (string, required) - Network
+ mask: `24` (number, required) - BM
+ title: `Aplha` (string, required) - Title
+ comment: `First network` (string) - Comment
+ location_id: `1` (number, required) - Location (id)
+ network_category: `1` (number, required) - Network category (id). You can get it on page "Config / Networking / Network categories"
+ network_type: `endnet` (string, required) - Network type. Can be 'rootnet' for RootNet, 'endnet' for EndNet. Default: 'endnet'
+ type_of_usage: `pool` (string, required) - Type of usage. Can be 'pool' for Pool, 'static' for Static, 'management' for Management only. Default: 'management'

## IPv4 network Response (IPv4 network Base)
+ id: `1` (number) - IPv4 network ID

## IPv4 network Id (object)
+ id: `1` (number) - IPv4 network ID

## IPv4 IP Base (object)
+ ipv4_networks_id: `1` (number, required) - IPv4 Network ID
+ ip: `10.0.0.0` (string) - IPv4 IP
+ hostname: `host` (string) - Hostname
+ location_id: `1` (number) - Location (id)
+ title: `Alpha and Omega` (string) - Title
+ comment: `First IP` (string) - Comment
+ host_category: `1` (number) - ID of host category from "Config / Networking / IP Host categories"
+ is_used: `1` (number) - IP used status. Can be '1' for used or '0' when unused
+ status (number) - Status after ping. Statuses: 0 => 'OK', 1 => 'TimeOut', 2 => 'Error', 9 => 'Unknown'
+ last_check: `0` (number) - Last check
+ customer_id: `1` (number) - Customer id
+ card_id (number) - Customer id
+ module (string) - Name of module. It used when there are AF field with type IP
+ module_item_id (number) - Id of module item

## IPv4 IP Response (IPv4 IP Base)
+ id: `1` (number) - IPv4 IP ID

## IPv4 IP Response Free (IPv4 IP Base)
+ id: `2` (number) - IPv4 IP ID
+ ip: `10.0.0.1` (string) - IPv4 IP
+ title: `Alpha and Beta` (string) - Title
+ comment: `Second IP` (string) - Comment
+ is_used: `0` (number) - IP used status. Can be '1' for used or '0' when unused
+ customer_id: `0` (number) - Customer id

## IPv6 network Base (object)
+ network: `2001:db8::` (string, required) - Network
+ prefix: `32` (number, required) - Prefix
+ title: `Aplha` (string, required) - Title
+ comment: `First network` (string) - Comment
+ location_id: `1` (number, required) - Location (id)
+ network_category: `1` (number, required) - Network category (id). You can get it on page "Config / Networking / Network categories"
+ network_type: `endnet` (string, required) - Network type. Can be 'rootnet' for RootNet, 'endnet' for EndNet. Default: 'endnet'
+ type_of_usage: `static` (string, required) - Type of usage. 'static' for Static, 'management' for Management only. Default: 'static'

## IPv6 network Response (IPv6 network Base)
+ id: `1` (number) - IPv6 network ID

## IPv6 network Id (object)
+ id: `1` (number) - IPv6 network ID

## IPv6 IP Base (object)
+ ipv6_networks_id: `1` (number, required) - IPv6 Network ID
+ ip: `2001:db8::` (string) - IPv6 IP
+ ip_end: `2001:db8:ffff:ffff:ffff:ffff:ffff:ffff` (string) - Last IPv6 IP
+ prefix: `64` (number) - Prefix - 32 - 64
+ location_id: `1` (number) - Location (id)
+ title: `Aplha and Omega` (string) - Title
+ comment: `First IP` (string) - Comment
+ host_category: `1` (number) - ID of host category from "Config / Networking / IP Host categories"
+ is_used: `1` (number) - IP used status. Can be '1' for used or '0' when unused
+ customer_id: `1` (number) - Customer ID
+ service_id: `1` (number) - Service ID
+ card_id (number) - Card ID
+ module (string) - Name of module. It used when there are AF field with type IP
+ module_item_id (number) - Id of module item

## IPv6 IP Response (IPv6 IP Base)
+ id: `1` (number) - IPv6 IP ID

## Mikrotik Response (object)
+ id: `1` (number) - Mikrotik ID.
+ api_login: `admin` (string) - Mikrotik api login.
+ api_password: `password` (string) - Mikrotik api password.
+ api_port: `80` (number) - Mikrotik api port. Default: 8728.
+ api_enable: `true` (boolean) - Mikrotik api is enable.
+ api_status: `ok` (string) - Mikrotik api status. Values: 'ok' for "Ok", 'error' for "Error", 'disabled' for "Disabled", 'unknown' for "Unknown".
+ shaper: `true` (boolean) - Mikrotik shaper.
+ shaper_id: `1` (number) - Mikrotik shaper ID.
+ shaping_type: `simple` (string) - Mikrotik shaper type. Default: 'simple'.
+ disabled_to_al: `false` (boolean) - Mikrotik is disabled to all. Default: 0.
+ wireless_al: `false` (boolean) - Mikrotik wireless all. Default: 0.
+ last_status: `2017-01-01 00:00:00` (string) - Mikrotik last status datetime.
+ cpu_usage: `0` (number) - Mikrotik cpu usage.
+ platform: `MikroTik` (string) - Mikrotik platform.
+ board_name: `mikrotik` (string) - Mikrotik board name.
+ version: `6.0.0 (stable)` (string) - Mikrotik version.
+ connection_error: `0` (number) - Mikrotik connection error number.
+ last_api_error: `false` (boolean) - Mikrotik last api error. Default 0.
+ is_used: `true` (boolean) - Mikrotik is used.
+ pid: `1` (number) - PID
+ used_date_time: `2017-01-01 00:00:00` (string) - Mikrotik used datetime.
+ change_status: `true` (boolean) - Mikrotik change status.
+ change_authorization: `false` (boolean) - Mikrotik change authorization.
+ change_shaping: `true` (boolean) - Mikrotik change shaping.
+ last_connect: `2017-01-01 00:00:00` (string) - Mikrotik last connect datetime.
+ last_accounting: `2017-01-01 00:00:00` (string) - Mikrotik last accounting datetime.
+ push_firewall_filter_rules: `1` (number) â€“ Push firewall filter rules to the device (1 = enabled, 0 = disabled)
+ update_firewall_filter_rules: `1` (number) â€“ Update existing firewall filter rules (1 = yes, 0 = no).
+ ipv6: `1` (number) â€“ Indicates if IPv6 is enabled (1 = enabled, 0 = disabled)

## Cpe Base (object)
+ `customer_id`: `76` (number) - CPE customer ID.
+ `title`: `Office router` (string, required) - CPE title.
+ `host`: `10.0.1.1` (string, required) - CPE host IP.
+ `api_login`: `api_user` (string) - API login.
+ `api_password`: `api_password` (string) - API password.
+ `api_port`: `8728` (string) - API port. Default: '8728'.
+ `status`: `error_connection` (string) - CPE status. Values: 'unknown' for "Unknown", 'error_connection' for "Error connection", 'api_error' for "Api error", 'api_ok' for "Api ok".
+ `change_status`: `1` (number) - CPE change status. Default: 1. Values: 0 or 1.
+ `last_status`: `2017-01-01 00:00:00` (string) - CPE last status datetime.
+ `last_update`: `2017-01-01 00:00:00` (string) - CPE last update datetime.
+ `last_connect`: `2017-01-01 00:00:00` (string) - CPE last connect datetime.
+ `type`: `TypeCpe` (string) - CPE type.
+ `signal`: `-48` (string) - CPE signal.
+ `gps`: `50.11,8.7253` (string) â€“ GPS coordinates in "latitude,longitude" format
+ `service_id`: `10` (number) - Service ID.
+ `qos`: `1` (number) - CPE is qos. Default: 1. Values: 0 or 1.
+ `used_date_time`: `2017-01-01 00:00:00` (string) - CPE used datetime.
+ `cpe_wireless`: `json string` (string) - CPE wireless.
+ `cpe_wireless_interfaces`: `json string` (string) - CPE wireless interfaces.
+ `cpe_status`: `json string` (string) - CPE status.
+ `cpe_interfaces`:  `json string` (string) - CPE interfaces.
+ `connection_error`: `9` (number) - CPE connection error key.

## Cpe Id (object)
+ id: `1` (number) - CPE ID.

## Cpe Response (Cpe Base)
+ id: `1` (number) - CPE ID.
+ `customer_name`: `null` (string) - CPE customer name.
+ `customer_login`: `null` (string) - CPE customer login.
+ `partner_id`: `null` (string) - CPE customer partner ID.
+ `location_id`: `null` (string) - CPE customer location ID.
+ `dhcp`: `null` (string) - CPE dhcp.
+ `is_changed`: `0` (number) - CPE is changed. Values: 0 or 1.
+ `is_used`: `0` (number) - CPE is used. Values: 0 or 1.
+ `qos_target`: `self` (string) - CPE qos target.

## CpeAp Base (object)
+ `cpe_id`: `1` (number) - Cpe id.
+ `name`: `cpeap 1` (string, required) - CpeAp name.
+ `mode`: `ap-bridge` (string, required) - CpeAp mode. Values: 'alignment-only', 'ap-bridge', 'bridge', 'nstreme-dual-slave', 'station', 'station-bridge', 'station-pseudobridge', 'station-pseudobridge-clone', 'station-wds', 'wds-slave'.
+ `interface`: `wlan1` (string, required) - CpeAp interface.
+ `protocol`: `802.11` (string) - CpeAp protocol. Default: '802.11'.
+ `frequency`: `auto` (string) - CpeAp frequency. Default: 'auto'.
+ `band`: `2ghz-b/g/n` (string) - CpeAp band.
+ `channel_width`: `20/40mhz-Ce` (string) - CpeAp chanel width.
+ `country`: `czech republic` (string) - CpeAp country.
+ `security`: `wpa_wpa2` (string) - CpeAp security. Default: 'wpa2'. Values: 'wpa', 'wpa2', 'wpa_wpa2', 'none'.
+ `encryption`: `aes_ccm` (string) - CpeAp encryption. Values: 'aes_ccm', 'tkip', 'aes_ccm_tkip'.
+ `password`: `cpeap_password` (string, required) - CpeAp password.
+ `enabled`: `1` (number) - CpeAp is enabled. Values: 0 or 1.
+ `master`: `cpeap master` (string) - CpeAp master.

## CpeAp Id (object)
+ id: `1` (number) - CpeAp ID.

## CpeAp Response(CpeAp Base)
+ id: `1` (number) - CpeAp ID.

## CpeQos Base (object)
+ `cpe_id`: `4` (number) - Cpe ID.
+ `title`: `cpeQos 1` (string, required) - CpeQos title.
+ `speed_in`: `500` (number, required) - CpeQos speed in.
+ `speed_out`: `300` (number, required) - CpeQos speed out.
+ `limit_at`: `56` (number, required) - CpeQos limit at.
+ `priority`: `3` (number, required) - CpeQos priority.
+ `dst`: `10.24.50.20` (string, required) - CpeQos destination IP.

## CpeQos Id (object)
+ id: `1` (number) - CpeQos ID.

## CpeQos Response (CpeQos Base)
+ id: `1` (number) - CpeQos ID.

## CpeDhcp Response (object)
+ `id`: `1` (number) - CpeDhcp id.
+ `name`: `cpedhcp 1` (string) - CpeDhcp name.
+ `enabled`: `1` (number) - CpeDhcp is enabled. Default: 0. Values: 0 or 1.
+ `interface`: `wlan` (string, required) - CpeDhcp interface.
+ `lease_time`: `10` (number) - CpeDhcp lease time. Default: 10.
+ `network`: `12.42.142.29` (string, required) - CpeDhcp network.
+ `gateway`: `15.32.15.241` (string, required) - CpeDhcp gateway.
+ `pool_from`: `14.144.41.152` (string, required) - CpeDhcp pool from.
+ `pool_to`: `52.14.16.145` (string, required) - CpeDhcp pool to.
+ `dns_servers`: `25.15.15.74,135.21.45.124` (string) - CpeDhcp DNS servers.
+ `wins_server`: `25.15.15.74,135.21.45.124` (string) - CpeDhcp wins servers.

# Group Support

## Tickets collection [/admin/support/tickets]

### Create a Ticket [POST]
Creates a new Ticket.

+ Request (multipart/form-data)
    + Attributes (Ticket Base Create)

+ Response 201 (application/json)
    + Attributes (Ticket Id)

### List all Tickets [GET]
Returns a list of your Tickets.

+ Response 200 (application/json)
    + Attributes (array[Ticket Response])

## Ticket [/admin/support/tickets/{id}]
Work with Tickets.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Ticket.

### Retrieve a Ticket [GET]
Retrieves the Ticket with the given ID.

+ Response 200 (application/json)
    + Attributes (Ticket Response)

### Update a Ticket [PUT]
Update the Ticket with the given ID.

+ Request (application/json)

        {
            "subject": "Better subject"
        }

+ Response 202 (application/json)

### Delete a Ticket [DELETE]
Delete the Ticket with the given ID.

+ Response 204

## Tickets messages collection [/admin/support/ticket-messages]

### Create a Ticket message [POST]
Creates a new Ticket message.

+ Request (multipart/form-data)
    + Attributes (Ticket Message Create)

+ Response 201 (application/json)
    + Attributes (Ticket Message Id)

### List all Tickets messages [GET /admin/support/ticket-messages?files_with_content={files_with_content}]
Returns a list of your Tickets messages.

+ Parameters
    + files_with_content: `1` (boolean) - Get files with content

+ Response 200 (application/json)
    + Attributes (array[Ticket Message Response])

## Ticket message [/admin/support/ticket-messages/{id}]
Work with Tickets messages.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Ticket message.

### Retrieve a Ticket message [GET /admin/support/ticket-messages/{id}?files_with_content={files_with_content}]
Retrieves the Ticket message with the given ID.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Ticket message.
    + files_with_content: `1` (boolean) - Get files with content

+ Response 200 (application/json)
    + Attributes (Ticket Message Response)

### Update a Ticket message [PUT]
Update the Ticket message with the given ID.

+ Request (application/json)

        {
            "message": "Better message"
        }

+ Response 202 (application/json)

### Delete a Ticket message [DELETE]
Delete the Ticket message with the given ID.

+ Response 204

## Tickets statuses collection [/admin/support/tickets-statuses]

### List all Tickets statuses [GET]
Returns a list of your Tickets statuses.

+ Response 200 (application/json)
    + Attributes (array[Ticket Status Response])


## Tickets Status [/admin/support/tickets-statuses/{id}]
Work with Tickets status.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Ticket status.

### Retrieve a Ticket Status [GET]
Retrieves the Ticket status with the given ID.

+ Response 200 (application/json)
    + Attributes (Ticket Status Response)

## Ticket groups collection [/admin/support/tickets-groups]

### List all Tickets groups [GET]
Returns a list of your Tickets groups.

+ Response 200 (application/json)
  + Attributes (array[Ticket Group Response])


## Tickets Group [/admin/support/tickets-groups/{id}]
Work with Tickets group.

+ Parameters
  + id (required, number, `1`) ... The ID of the desired Ticket group.

### Retrieve a Ticket Group [GET]
Retrieves the Ticket group with the given ID.

+ Response 200 (application/json)
  + Attributes (Ticket Group Response)

## Ticket types collection [/admin/support/tickets-types]

### List all Tickets types [GET]
Returns a list of your Tickets types.

+ Response 200 (application/json)
  + Attributes (array[Ticket Type Response])


## Tickets Type [/admin/support/tickets-types/{id}]
Work with Tickets type.

+ Parameters
  + id (required, number, `1`) ... The ID of the desired Ticket type.

### Retrieve a Ticket Type [GET]
Retrieves the Ticket type with the given ID.

+ Response 200 (application/json)
  + Attributes (Ticket Type Response)

## Ticket Attachments [/admin/support/ticket-attachments?with_content={with_content}]
Work with Ticket Attachments.

+ Parameters
    + with_content (required, number, `1`) ... If 1 then attachments will be returned with content

### List all Tickets attachments [GET]
Returns a list of your Tickets attachments.

+ Response 200 (application/json)
    + Attributes (array[Ticket Attachment Response])

### Reatrieve a Ticket attachment [GET /admin/support/ticket-attachments/{id}?with_content={with_content}]
Retrieves the Ticket attachment with the given ID.

+ Parameters
    + id (required, number, `234`) ... ID of the desired attachment
    + with_content (required, number, `1`) ... If 1 then attachments will be returned with content

+ Response 200 (application/json)
    + Attributes (Ticket Attachment Response)

### Create a Ticket attachment [POST /admin/support/ticket-attachments?message_id={message_id}]
Creates a new Ticket attachment.

+ Parameters
    + message_id (required, number, `11`) ... ID of the Ticket message

+ Request (multipart/form-data)
    + Attributes (Ticket Attachment Create)

+ Response 201 (application/json)

        {
            "attachments": [293, 294]
        }

### Delete a Ticket attachment [DELETE /admin/support/ticket-attachments/{id}]
Delete the Ticket attachment with the given ID.

+ Parameters
    + id (required, number, `243`) ... ID of the Ticket attachment

+ Response 204

## Ticket feedbacks collection [/admin/support/ticket-feedbacks]

### List all ticket feedbacks [GET]
Returns a list of your ticket feedbacks.

+ Response 200 (application/json)
    + Attributes (array[Ticket feedbacks Response])

### Create ticket feedbacks [POST]
Create ticket feedbacks.

+ Request (application/json)
    + Attributes (array[Ticket feedbacks Response])

+ Response 201 (application/json)
    + Attributes (array[Ticket feedbacks Response])

## Ticket feedbacks [/admin/support/ticket-feedbacks/{id}]
Work with ticket feedbacks.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired ticket feedbacks.

### Retrieve a ticket feedbacks [GET]
Retrieves the ticket feedbacks with the given ID.

+ Response 200 (application/json)
    + Attributes (Ticket feedbacks Response)

### Update a ticket feedbacks [PUT]
Update the ticket feedbacks with the given ID.

+ Request (application/json)

        {
            "comment": 'new text',
        }

+ Response 202 (application/json)

### Delete a ticket feedbacks  [DELETE]
Delete the ticket feedbacks  with the given ID.

+ Parameters
    + id (required, number, `243`) ... ID of the ticket feedbacks

+ Response 204

# Data Structures

## Ticket Base (object)
+ `customer_id`: `1` (number) - Customer ID
+ `incoming_customer_id`: `2` (number) - Incoming customer ID
+ `reporter_id`: `1` (number) â€“ Unique ID of the reporter in the system
+ `reporter_type`: `admin` (enum[string])
    Type of the reporter
    + Members
        + `admin`
        + `customer`
        + `api`
        + `incoming`
        + `none`
+ `hidden`: `false` (boolean) - Is ticket hidden for customer
+ `assign_to`: `0` (number) - Admin ID to be assigned a ticket
+ `status_id`: `1` (number) - Ticket status ID
+ `group_id`: `3` (number) - Ticket group ID
+ `type_id`: `2` (number, required) - Ticket type ID
+ `task_id`: `1` (number) â€“ ID of the task associated with this ticket
+ `subject`: `Ticket subject` (string, required) - Ticket subject
+ `priority`: `medium` (string, required) - Ticket priority. Values: 'low', 'medium', 'high', 'urgent'
+ `star`: `false` (boolean) - Is ticket starred
+ `unread_by_customer`: `false` (boolean) - Is ticket unread by customer
+ `unread_by_admin`: `false` (boolean) - Is ticket unread by administrator
+ `closed`: `false` (boolean) - Is ticket closed
+ `created_at`: `2018-11-09 10:28:34` (string) - Ticket creating datetime
+ `updated_at`: `2018-12-12 14:22:49` (string) - Ticket updating datetime
+ `source`: `administration` (enum[string])
    Origin of the ticket
    + Members
        + `administration`
        + `api`
        + `portal`
        + `widget`
        + `incoming`
+ `trash`: `0` (number) â€“ Whether the ticket is in trash (1 = trashed, 0 = active).
+ `shareable`: `1` (number) â€“ Whether the ticket is shareable with others (1 = yes, 0 = no).
+ `note`: `Note message` (string) â€“ Internal or user-provided note related to the ticket.
+ `watching`: `1` (number) â€“ Whether the user is watching this ticket (1 = watching, 0 = not watching).
+ `related_account_id`: `0` (number) - ID of the related account. Typically a sub-account, but can also be the main account if the ticket is created directly for it.
+ `related_account_type`: `none` (enum[string])
    Type of the related account
        + Members
            + `none`
            + `main`
            + `sub`
+ `hidden_from_related_account`: `0` (number) -  If set to 1, the ticket is hidden from the account specified in related_account_id. Value can be 0 (visible) or 1 (hidden)
+ `unread_by_related_account`: `1` (number) - Indicates whether the account in related_account_id has unread messages in the ticket. Value can be 0 (read) or 1 (unread).

## Ticket Base Create (Ticket Base)
+ `lead_id`: `0` (number) - Lead ID. Set it if you want create ticket for lead
+ `message` (optional, Ticket Message Create) - Ticket message
+ `watchers`: `10`,`11` (array[number]) - Ticket watchers
+ `moduleLabels`: `3`,`4` (array[number]) - Ticket labels

## Ticket Response (Ticket Base)
+ id: `1` (number) - Ticket ID

## Ticket Id (object)
+ id: `1` (number) - Ticket ID.

## Ticket Message Base (object)
+ `ticket_id`: `1` (number) - Ticket ID
+ `customer_id`: `2` (number) - Customer ID
+ `incoming_customer_id`: `0` (number) - Incoming customer ID
+ `admin_id`: `1` (number) - Administrator ID
+ `api_id`: `0` (number) - API key ID
+ `source`: `administration` (enum[string])
    Source of the message
    + Members
        + `administration`
        + `api`
        + `portal`
        + `public_form`
        + `incoming`
+ `date`: `2021-01-10` (string) â€“ Date when the message was received or sent.
+ `time`: `14:35:22` (string) â€“ Time of the message.
+ `message`: `Message content` (string) - Message text
+ `rawMessage`: `<i>Message content</i>` (string) â€“ Full raw content of the message.
+ `files` (array[Ticket Message Files]) - Attached files
+ `is_merged`: `false` (boolean) - Is message merged
+ `can_be_deleted`: `true` (boolean) - Is message can be deleted
+ `hide_for_customer`: `false` (boolean) - Is message hidden for customer
+ `mail_to`: `client@example.com` (string) â€“ Recipient email address if the message was sent via email.
+ `smsTo`: `+120501234567`, `+120501234568` (array) â€“ Recipient phone numbers if the message was sent via SMS.
+ `mail_cc` (string) - Forwarding Cc email
+ `mail_bcc` (string) - Forwarding Bcc email
+ `author_type`: `admin` (enum[string])
    Type of the author who created the message
    + Members
        + `admin`
        + `customer`
        + `api`
        + `system`

## Ticket Message Create (Ticket Message Base)
+ `files`: `First cURL file`,`Second cURL file` (array[string]) - cURL file instances to attach.

## Ticket Message Response (Ticket Message Base)
+ id: `1` (number) - Ticket Message ID
+ `message_type` (enum[string])
    Type of ticket message
    + Members
        + `message` - Simple message
        + `note` - Administrator note. Visible only for administrator.
        + `change_ticket` - System message. For example about adding files.

## Ticket Message Id (object)
+ id: `1` (number) - Ticket Message ID.

## Ticket Message Files (object)
+ `id`: `199` (number) - File ID
+ `type`: `ticket_attachment` (string) - File type
+ `filename_original`: `ticket_file.txt` (string) - Original filename
+ `filename_uploaded`: `/var/www/splynx/uploads/ticket_attachment/2018-12/bf932f8491852129` (string) - Uploaded filename
+ `content_type`: `text/plain` (string) - File content type. Returned only if url param `files_with_content` is true.
+ `content`: `bHNmamFsc2tkamZsa2FqZGZsYWoK` (string) - File content encoded in base64. Returned only if url param `files_with_content` is true.
+ `download_link`: `https://yourdomain/a` (string) - A directly link to this file
+ `has_thumbnail`: `true` (boolean) - Whether this file has a thumbnail.
+ `thumbnail_link`: `https://yourdomain/b` (string) - A link to the file's thumbnail.

## Ticket Status Base (object)
+ `title_for_agent`: `ticket_agent_status` (string) - Status for agent
+ `title_for_customer`: `ticket_customer_status` (string) - Status for customer
+ `label`: `success` (string) - Label for status
+ `mark`: `open`,`unresolved`,`closed` (array) - Mark (one or more options)
+ `icon`: `fa-tasks` (string) - Icon for dashboard
+ `view_on_dashboard`: `true` (boolean) - View status on dashboard

## Ticket Status Response (Ticket Status Base)
+ id: `1` (number) - Ticket Status ID

## Ticket Group Response (object)
+ id: `32` (number) - Ticket group ID.
+ title: `Alpha` (string) - Ticket group title.
+ description: `Description` (string) - Description of ticket group.
+ agent_ids: `1`,`2` (array) - IDs of admins those belong to the group.

## Ticket Type Response (object)
+ id: `32` (number) - Ticket type ID.
+ title: `Alpha` (string) - Ticket type title.
+ background_color: `null` (string) - CSS class used for highlighting tickets of specific type in UI.

## Ticket Attachment Response (object)
+ id: `32` (number) - Ticket Attachment ID
+ type: `ticket_attachment` (string) - Attachment type.
+ filename_original: `rates.csv` (string) - Original filename of attachment.
+ filename_uploaded: `0d76e3bfce7f60fb` (string) - Filename of attachment on server.
+ message_id: `123` (number) - Message ID.
+ content_type: `text/plain` (string) - Type of attachment file.
+ content: `VBERi0xLjQKJeLjz9MKMyAwIG9iago8PC9UeXBlIC9QYWdlC...` (string) - Attachment content encoded in  base64 format
+ `download_link`: `https://yourdomain/a` (string) - A directly link to this file
+ `has_thumbnail`: `true` (boolean) - Whether this file has a thumbnail.
+ `thumbnail_link`: `https://yourdomain/b` (string) - A link to the file's thumbnail.

## Ticket Attachment Create (object)
+ `files`: `First cURL file`,`Second cURL file` (array[string]) - cURL file instances to attach.

# Group Scheduling

## Projects collection [/admin/scheduling/projects]

### Create Project [POST]
Create a new Project.

+ Request (application/json)
    + Attributes (Project Base)

+ Response 201 (application/json)
    + Attributes (Project Id)

### List all Projects [GET]
Return a list of your Projects.

+ Response 200 (application/json)
    + Attributes (array[Projects Response])

## Project [/admin/scheduling/projects/{id}]
Work with a Project.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Project.

### Retrieve Project [GET]
Retrieve a Project with the given ID.

+ Response 200 (application/json)
    + Attributes (Projects Response)

### Update Project [PUT]
Update a Project with the given ID.

+ Request (application/json)

        {
            "title": 'Scheduling project 2'
        }

+ Response 202 (application/json)

### Delete Project [DELETE]
Delete a Project with the given ID.

+ Response 204

## Tasks collection [/admin/scheduling/tasks]

### Create Task [POST]
Create a new Task.

+ Request (application/json)
    + Attributes (Task Base)

+ Response 201 (application/json)
    + Attributes (Task Id)

### List all Tasks [GET]
Return a list of your Tasks.

+ Response 200 (application/json)
    + Attributes (array[Tasks Response])

## Task [/admin/scheduling/tasks/{id}]
Work with a Task.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Task.

### Retrieve Task [GET]
Retrieve a Task with the given ID.

+ Response 200 (application/json)
    + Attributes (Tasks Response)

### Update Task [PUT]
Update a Task with the given ID.

+ Request (application/json)

        {
            "title": 'Scheduling task 2'
        }

+ Response 202 (application/json)

### Delete Task [DELETE]
Delete a Task with the given ID.

+ Response 204

## Related tasks [/admin/scheduling/related-tasks?id={id}]
Work with Related tasks.

### Retrieve Related task [GET]
Retrieve a related task with the given ID.
+ Parameters
    + id (required, number, `1`) ... The ID of the desired task.

+ Response 200 (application/json)
    + Attributes (array[Related Tasks])

### Create Related task [POST]
Create a related task with the given ID.

+ Request (application/json)
    + Attributes (Related Tasks)

+ Response 201 (application/json)

### Delete Related task [DELETE]
Delete a related task with the given ID.
+ Request (application/json)
    + Attributes (Related Tasks)

+ Response 204

## Tasks checklist [/admin/scheduling/tasks-checklist/{task_id}]
For getting checklists for few tasks you can use next request
Example:
```#!php
<?php

// for geting checklists for few tasks
$params = [
    'main_attributes' => [
        'task_id' => ['IN', [1,2], // Tasks IDs
    ],
];

// for geting checklists for all tasks
$params = [
    'main_attributes' => [
    ],
    // You can also set the limit and offset
    'limit' => 10,
    'offset' => 0,
];

$apiUrl = 'admin/scheduling/tasks-checklist' . '?' . http_build_query($params);

```

+ Parameters
    + task_id (required, number, `1`) ... The ID of the desired Task.

### Get Task Checklist [GET]
Get Task Checklist items with the given task ID.

+ Response 200 (application/json)
    + Attributes (array[Tasks Checklist Item])

## Update Task Checklist item [PUT]
Update a task checklist item.

+ Request (application/json)
    + Attributes (Checklist Request)

+ Response 202 (application/json)

### Add Task checklist item [POST /admin/scheduling/tasks-checklist]
Add a task checklist item with the given task ID.

+ Request (application/json)
    + Attributes (Task Checklist Item Request)

+ Response 201 (application/json)
    + Attributes (Task Checklist Item Id)

### Delete Task checklist item [DELETE /admin/scheduling/tasks-checklist/{task_id}--{item_id}]
Delete a task checklist item with the given ID and task id.

+ Parameters
    + task_id (required, number, `1`) ... The ID of the desired Task.
    + item_id (required, number, `148`) ... The ID of the desired Task checklist item.

+ Response 204

## Tasks Worklogs collection [/admin/scheduling/tasks-worklogs]

### Add Task Worklog [POST]
Add a worklog for the task
+ Request (application/json)
    + Attributes (Worklog Base)

+ Response 201 (application/json)
    + Attributes (Worklog Id)

## Tasks Worklog [/admin/scheduling/tasks-worklogs/{id}]
Work with a task worklog.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Tasks Worklog.

### Retrieve Task Worklog [GET]
Retrieve a task worklog with the given ID.

+ Response 200 (application/json)
    + Attributes (Worklog Response)

### Update Task Worklog [PUT]
Update a task worklog with the given ID.

+ Request (application/json)

        {
            "time_spent": 10000
        }

+ Response 202 (application/json)

### Delete Task Worklog [DELETE]
Delete a task worklog with the given ID.

+ Response 204

## Task timer [/admin/scheduling/task-timer/{id}]

### Start, pause or stop task timer [PUT]
Work with task timer with the given ID.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Task

+ Request (application/json)
    + Attributes (Task timer)

+ Response 202 (application/json)

## Tasks Comments collection [/admin/scheduling/tasks-comments]

### Add Task Comment [POST]
Add a comment for the task
+ Request (multipart/form-data)
    + Attributes (Comment Create)

+ Response 201 (application/json)
    + Attributes (Comment Id)

## Task Comment [/admin/scheduling/tasks-comments/{id}]
Work with a Task Comment.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Task Comment.

### Retrieve Task Comment [GET]
Retrieve a Task Comment with the given ID.

+ Response 200 (application/json)
    + Attributes (Comment Response)

### Update a Task Comment [PUT]
Update the Task Comment with the given ID.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Task Comment.

+ Request (application/json)

        {
            "comment": "Some text"
        }

+ Response 202 (application/json)

### Toggle pin for Task Comment [POST /admin/scheduling/tasks-comment-toggle-pin/{id}]
Toggle pin for Task Comment with the given ID.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Task Comment.

+ Response 202 (application/json)

        {
            "is_pinned": true
        }

### Delete Task Comment [DELETE]
Delete a Task Comment with the given ID.

+ Response 204

### Create Task Comment Attachment [POST /admin/scheduling/tasks-comments/{id}--upload]
Creates a new attachments to task comment

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Task Comment.

+ Request (multipart/form-data)
    + Attributes (Task Comment Attachment Create)

+ Response 202


## Tasks Attachments collection [/admin/scheduling/tasks-attachments]
For getting all Tasks Attachments you can use next request
Example:
```#!php
<?php

$params = [
    'main_attributes' => [
        'task_id' => 1,
    ]
];

$apiUrl = 'admin/scheduling/tasks-attachments' . '?' . http_build_query($params);

```
### Add Task Attachment [POST]
Add an attachment for the task
+ Request (multipart/form-data)
    + Attributes (Attachment add)

+ Response 201 (application/json)
    + Attributes (Attachments response)

### Download All Task Attachments [GET /admin/config/download/scheduling_task_comment_attachment--{task_id}--all]
Download all Task Attachments as an archive with the given Task ID.

+ Parameters
    + task_id (required, number, `1`) ... The ID of the desired Task.
+ Response 200 (application/json)
    + Attributes (Attachment Archive Response)

## Task Attachment [/admin/scheduling/tasks-attachments/{id}]
Work with a Task Attachment.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Tasks Attachment.

### Retrieve Task Attachment [GET]
Retrieve a Task Attachment with the given ID.

+ Response 200 (application/json)
    + Attributes (Tasks Attachment Response)

### Delete Task Attachment [DELETE]
Delete a Task Attachment with the given ID.

+ Response 204

### Download Task Attachment [GET /admin/config/download/scheduling_task_comment_attachment--{id}]
Download a Task Attachment with the given ID.

+ Response 200 (application/json)
    + Attributes (Attachment Content Response)

## Tasks Activity [/admin/scheduling/tasks-activity]

### List activity for all tasks [GET]
Returns a list of activities for all tasks. By default limit 10 items for every task.

+ Response 200 (application/json)
    + Attributes (array[Tasks Activity Response])

### Get amount of activity items for all tasks [HEAD]
Get amount of activity items.
+ Response 204 (application/json)
    + Headers

            Access-Control-Expose-Headers: X-total-count
            X-total-count: 65

## Get Tasks Activity by search params [/admin/scheduling/tasks-activity?{params}]
You can get activity for needed task(s).

+ Parameters
    + params (required, string, `http_build_query($search)`) ... Any parameters of record. <br>You should set at least one record`s parameter. <br>This parameters should be converted to query string.<br>For example:<br>$search = [ <br>&emsp;&emsp;'main_attributes' => [<br>&emsp;&emsp;&emsp;&emsp;'task_id' => 1<br>&emsp; &emsp;], <br>&emsp;&emsp;'limit' => 15,<br>&emsp;&emsp;'offset' => 5<br>];<br>

### Search activity for needed task(s) [GET]
You can set limit (by default its 10) and offset.

+ Response 200 (application/json)
    + Attributes (array[Tasks Activity Response])

### Get amount of activity items for needed task(s) [HEAD]
Get amount of activity items. You can use search params for needed filters.
+ Parameters
    + params (required, string, `http_build_query($search)`) ... Any parameters of record. <br>You should set at least one record`s parameter. <br>This parameters should be converted to query string.<br>For example:<br>$search = [ <br>&emsp;&emsp;'main_attributes' => [<br>&emsp;&emsp;&emsp;&emsp;'task_id' => 1<br>&emsp; &emsp;], <br>];<br>

+ Response 204 (application/json)
    + Headers

            Access-Control-Expose-Headers: X-total-count
            X-total-count: 12

# Data Structures

## Project Base (object)
+ title: `Scheduling project 1` (string, required) - Project title, min length: 3, max length: 64
+ description: `My new project` (string) - Project description
+ type_id: `1` (number, required) - Type ID. You could find more details in [Project Types](#reference/config/scheduling-project-types-collection/list-all-scheduling-project-types) block.
+ lead_id: `1` (number) - Admin ID
+ category_id: `1` (number, required) - Category ID. You could find more details in [Project Categories](#reference/config/scheduling-project-categories-collection/list-all-scheduling-project-categories) block.
+ workflow_id: `1` (number, required) - Workflow ID. You could find more details in [Project Workflow](#reference/config/scheduling-workflow-collection/list-all-scheduling-workflow) block.
+ is_archive: `0` (number) â€“ Indicates if the item is archived (1 = archived, 0 = not archived).
+ partner_ids: `1`, `2` (array[number]) â€“ List of partner IDs associated with the item.

## Projects Response(Project Base)
+ id: `1` (number, required) - Project ID

## Project Id (object)
+ id: `1` (number, required) - Project ID

## Task Base (object)
+ title: `Scheduling task 1` (string, required) - Task title, min length: 3, max length: 64
+ description: `My new project` (string) - Task description
+ reporter_id: `1` (number) â€“ The ID of the user who reported the task.
+ address: `3rd Street 2345` (string, required) - Address
+ gps: `50.10676296991858,14.445095658302305` (string) - Valid coordinates
+ related_customer\_id: `1` (number) - Customer ID
+ related_lead\_id: `0` (number) - Lead ID. If you set it related_customer_id will be removed.
+ resolved_at: `2019-05-16 20:00:55` (string)
+ partner_id: `1` (number, required) - Partner ID
+ project_id: `1` (number, required) - Project ID
+ location_id: `1` (number) â€“ The ID of the location related to the task.
+ related_to_id: `1` (number) â€“ The ID of a related task.
+ related_service_id: `0` (number) â€“ The ID of the service related to the task.
+ created_at: `2019-05-16 17:00:55` (string) - Date of taks creating
+ updated_at: `2019-05-16 20:00:55` (string)
+ priority: `priority_medium` (string, required) - Task priority: 'priority\_low', 'priority\_medium', 'priority\_high'
+ assigned_to: `assigned_to_anyone` (enum[string])
    The team or individual to whom the task is assigned
    + Members
        + `assigned_to_anyone`
        + `assigned_to_administrator`
        + `assigned_to_team`
+ assignee: `1` (number) â€“ The ID of the individual who is responsible for this task.
+ assigned_at: `2024-11-04 16:33:18` (string) â€“ The timestamp when the task was assigned.
+ is_scheduled: true (boolean) - Is Task Scheduled true or false
+ scheduled_from: `2019-05-16 18:00:55` (string) - Shcheduled from date time
+ formatted_duration: `1h 25m` (string) - Scheduled task duration format '0h 0m'
+ checklist_template_id: `1` (number) - Checklist template ID
+ workflow_status_id: `1` (number, required) - Workflow status ID
+ is_archived: `0` (number) - Is task archived. Valid values: 0, 1. Default: 0
+ createdFromTicket: true (boolean) - If Task created from ticket true or false
+ task_labels: 1, 2 (array[number]) - Array of task labels (ids).
+ related_ticket_info (object) - Will be set if task created from ticket
    - ticket_id: 1 (number)
    - ticket_subject: `Ticket subject` (string)
+ travel_time_to: `0` (number) â€“ The time (in minutes) required to travel to the task location.
+ travel_time_from: `0` (number) â€“ The time (in minutes) required to travel from the task location.
+ closed: `0` (number) â€“ The status of the task regarding whether it is closed.
+ notification_send_interval: `0` (number) â€“ The interval (in minutes) for sending notifications related to the task.
+ notification_enabled: `1` (string) â€“ Whether notifications are enabled for this task ("1" = enabled, "0" = disabled).
+ remaining: `0` (number) â€“ The remaining time or work needed to complete the task.
+ last_status_changed: `2024-04-15 11:06:45` (string) â€“ The timestamp of the last status change for this task.
+ watchers: `10`,`11` (array[number]) - Array of task watchers IDs

## Tasks Response(Task Base)
+ id: `1` (number, required) - Task ID
+ related_lead\_id: `0` (number) - Lead ID

## Task Id (object)
+ id: `1` (number, required) - Task ID

## Related Tasks (object)
+ from_id: 9 (number, required) - Related task ID
+ to_id: 12 (number, required) - Task ID

## Tasks Checklist Item (object)
+ checklist_template_item (object) - Checklist template item from selected checklist template
    - id: 1 (number) - ID of checklist template item
    - checklist_template_id: 1 (number) - Checklist template id
    - name: `Prepare materials / tools` (string) - Checklist template item name
+ tasks_item_status (object) - Task checklist item status
    - task_id: 1 (number) - Task id
    - checklist_template_item_id: 1 (number) - ID of checklist template item
    - checked: true (boolean) - If task checklist template item is checked true or false

## Checklist Request (object)
+ id: `1` (number, required) - ID of checklist template item
+ checked: true (boolean) - IF checked true or false

## Task Checklist Item Request (object)
+ task_id: `1` (number, required) - task ID
+ name: `New task checklist item` (string, required) - name for new task checklist item

## Task Checklist Item Id (object)
+ id: `1` (number) - ID of new task checklist item

## Worklog Base (object)
+ task_id: 1 (number, required) - ID of the task
+ user_id: 1 (number, required) - ID of the user
+ created_at: `2019-06-18 12:32:59` (string) - Datetime of adding. Format: 'YYYY-MM-DD HH:II:SS'. Default value: current datetime
+ started_at: `2019-06-18 12:32:59` (string) - Datetime of starting. Format: 'YYYY-MM-DD HH:II:SS'. Default value: current datetime
+ stopped_at: `2019-06-18 12:32:59` (string) - Datetime of ending. Format: 'YYYY-MM-DD HH:II:SS'. Default value: current datetime
+ is_manual: false (boolean) - Was the log added manually. Default value: false
+ time_spent: 900 (number, required) - Time spent in seconds
+ description: `Worklogs description` (string) - Worklogs description

## Worklog Id (object)
+ id: `1` (number, required) - Tasks worklog ID

## Worklog Response (Worklog Base)
+ id: `1` (number, required) - Worklog ID

## Task timer (object)
+ action: `start` (string, required) - Timer action: 'start', 'pause' or 'stop'
+ admin_id: `1` (number) - If auth is by API key you need to send administrator id

## Comment Base (object)
+ id: `1` (number) - ID of tasks comment
+ task_id: 1 (number, required) - ID of the task
+ user_id: 1 (number, required) - ID of the user
+ created_at: `2019-06-18 12:32:59` (string) - Datetime of adding. Format: 'YYYY-MM-DD HH:II:SS'. Default value: current datetime
+ comment: `Some text` (string) - Comment text
+ is_pinned: `0` (number) - Indicates whether the task is pinned or not. A value of 1 means the task is pinned, and a value of 0 means the task is not pinned.

## Comment Create (Comment Base)
+ files: `First cURL file`,`Second cURL file` (array[string]) - cURL file instances to attach.

## Task Comment Attachment Create (object)
+ `files`: `First cURL file`,`Second cURL file` (array[string]) - cURL file instances to attach.

## Comment Id (object)
+ id: `1` (number, required) - Tasks comment ID

## Comment Response (Comment Base)
+ files (array[Files Comment Attachment Response]) - List of comments attachments

## Files Attachment Response (object)
+ `id`: `7` (number) - File id
+ `hash_id`: `hash_id` (string) - Hash id
+ `type`: `scheduling_task_comment_attachment` (string) - File type
+ `filename_original`: `image.png` (string) - Original file name
+ `filename_uploaded`: `uploaded/file/name` (string) - Uploaded file name
+ `download_link`: `https://your.splynx.domain/files?id={hash_id}&type=files_upload` (string) - Link for downloading from web
+ `download_api_link`: `admin/config/download/scheduling_task_comment_attachment--{id}` (string) - Link for downloading via API
+ `download_all_api_link`: `admin/config/download/scheduling_task_comment_attachment--{task_id}--all` (string) - Link for downloading via API
+ `task_id`: `5` (number) - ID of task
+ `comment_id`: `1` (number) - ID of comment. Will be set if this file had been added for a comment
+ `has_thumbnail`: `true` (boolean) - Whether this file has a thumbnail.
+ `thumbnail_link`: `your.splynx.domen/files--thumbnail?id={hash_id}&type=files_upload` (string) - Link for thumbnail

# Tasks Attachment Response (Files Attachment Response)
+ size: `1048576` (string) - Contains the uploaded file size in bytes as an value, without any formatting

## Files Comment Attachment Response (Files Attachment Response)
+ `comment_id`: `1` (number) - ID of comment

## Attachment Content Response (object)
+ `name`: `file_name.png` (string) - File name
+ `content_type`: `image/png` (string) - File content type
+ `content`: `VBERi0xLjQKJeLjz9MKMyAwIG9iago8PC9UeXBlIC9QYWdlC...` (string) - Attachment content encoded in base64 format

## Attachment Archive Response (object)
+ `name`: `scheduling_task_comment_attachment_26.zip` (string) - File name
+ `content_type`: `application/zip` (string) - File content type
+ `content`: `VBERi0xLjQKJeLjz9MKMyAwIG9iago8PC9UeXBlIC9QYWdlC...` (string) - Archive content encoded in base64 format

## Attachment add (object)
+ task_id: 1 (number, required) - ID of the desired task
+ user_id: 1 (number, required) - Administrator ID that gives the file
+ files: `First cURL file`,`Second cURL file` (array[string]) - cURL file instances to attach.

## Attachments response (object)
+ files: 1, 2 (array[number]) - IDs of added files

## Tasks Activity Response (object)
+ task_id: 1 (number) - ID of task
+ activity_items_count: 20 (number) - The number of all activity items of the task
+ activity_items (array[Tasks Activity Items Response]) - List of activity items for task

## Tasks Activity Items Response (object)
+ model: `models\admin\scheduling\task\SchedulingTaskComment` (string) - Activity items model
+ action: `create` (string) - Activity items action
+ source: `api` (string) - Source. Can be 'api', 'admin' and 'system'
+ autor_name: `Splynx test API key` (string) - Author name. Can be name of admin, api key or 'System'
+ autor_id: 2 (number) - Author ID. Can be ID of admin, api key or empty when source is system
+ date: `2019-06-19` (string) - Date of action
+ time: `16:52:16` (string) - Time of action
+ attributes_for_content (Tasks Activity Items Attributes) - Can have a different structure for different actions.

## Tasks Activity Items Attributes (object)
+ files (array[Files Attachment Response]) - List of comments attachments
+ comment: 'Test comment creating for activity' (string) - Comment text

# Group Voice

## Calls collection [/admin/voice/calls]

### Create a Call [POST]
Creates a new Call.

+ Request (application/json)
    + Attributes (Call Base)

+ Response 201 (application/json)
    + Attributes (Call Id)

### List Calls [GET /admin/voice/calls{?action,limit,columns,start_date,end_date,service_id,customer_id,invoice_id}]
Returns a list of Calls based on query params

+ Parameters
    + action (string, required)
        Type of data set to return. List of actions:
        - **get_all**: Get all records by condition
        - **get_top_frequently**: Get top frequent (most popular) phones with records
        - **get_top_expensive**: Get top expensive (most expensive) phones with records
        - **get_records_by_hours**: Get records grouped by hours (from 00 to 23)
        - **get_records_by_days**: Get records grouped by days
        - **get_totals**: Get total price and amount (duration or amount) grouped by category id
    + limit: `5` (number) - Limit for returned data items. Default: 1000.
    + columns: `start,stop,call_to` (string) - Columns separated by ','
    + start_date: `2018-01-20 12:56:39` (string) - Get data from date
    + end_date: `2018-01-20 13:00:35` (string) - Get data to date
    + service_id: `5` (number) - Get data for Service ID
    + customer_id: `6` (number) - Get data for Customer ID
    + invoice_id: `7` (number) - Get data for Invoice ID

+ Response 200 (application/json)

## Call [/admin/voice/calls/{id}]
Work with Calls.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Call.

### Retrieve a Call [GET]
Retrieves the Call with the given ID.

+ Response 200 (application/json)
    + Attributes (Call Response)

### Update a Call [PUT]
Update the Call with the given ID.

+ Request (application/json)

        {
            "comment": comment
        }

+ Response 202 (application/json)

### Delete a Call [DELETE]
Delete the Call with the given ID.

+ Response 204

## Data collection [/admin/voice/data]

### Create a Voice Data [POST]
Creates a new Voice Data.

+ Request (application/json)
    + Attributes (Data Base)

+ Response 201 (application/json)
    + Attributes (Data Id)

### List Voice Data [GET /admin/voice/data{?action,limit,columns,start_date,end_date,service_id,customer_id,invoice_id}]
Returns a list of Voice Data

+ Parameters
    + action (string, required)
        Type of data set to return. List of actions:
        - **get_all**: Get all records by condition
        - **get_top_frequently**: Get top frequent (most popular) phones with records
        - **get_top_expensive**: Get top expensive (most expensive) phones with records
        - **get_records_by_hours**: Get records grouped by hours (from 00 to 23)
        - **get_records_by_days**: Get records grouped by days
        - **get_totals**: Get total price and amount (duration or amount) grouped by category id
    + limit: `5` (number) - Limit for returned data items
    + columns: `start,stop,call_to` (string) - Columns separated by ','
    + start_date: `2018-01-20 12:56:39` (string) - Get data from date
    + end_date: `2018-01-20 13:00:35` (string) - Get data to date
    + service_id: `5` (number) - Get data for Service ID
    + customer_id: `6` (number) - Get data for Customer ID
    + invoice_id: `7` (number) - Get data for Invoice ID

+ Response 200 (application/json)

## Voice Data [/admin/voice/data/{id}]
Work with Voice Data.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Voice Data.

### Retrieve a Voice Data [GET]
Retrieves the Voice Data with the given ID.

+ Response 200 (application/json)
    + Attributes (Data Response)

### Update a Voice Data [PUT]
Update the Voice Data with the given ID.

+ Request (application/json)

        {
            "comment": comment
        }

+ Response 202 (application/json)

### Delete a Voice Data [DELETE]
Delete the Voice Data with the given ID.

+ Response 204

## Messages collection [/admin/voice/messages]

### Create a Message [POST]
Creates a new Message.

+ Request (application/json)
    + Attributes (Message Base)

+ Response 201 (application/json)
    + Attributes (Message Id)

### List Messages [GET /admin/voice/messages{?action,limit,columns,start_date,end_date,service_id,customer_id,invoice_id}]
Returns a list of Messages

+ Parameters
    + action (string, required)
        Type of data set to return. List of actions:
        - **get_all**: Get all records by condition
        - **get_top_frequently**: Get top frequent (most popular) phones with records
        - **get_top_expensive**: Get top expensive (most expensive) phones with records
        - **get_records_by_hours**: Get records grouped by hours (from 00 to 23)
        - **get_records_by_days**: Get records grouped by days
        - **get_totals**: Get total price and amount (duration or amount) grouped by category id
    + limit: `5` (number) - Limit for returned data items
    + columns: `start,stop,call_to` (string) - Columns separated by ','
    + start_date: `2018-01-20 12:56:39` (string) - Get data from date
    + end_date: `2018-01-20 13:00:35` (string) - Get data to date
    + service_id: `5` (number) - Get data for Service ID
    + customer_id: `6` (number) - Get data for Customer ID
    + invoice_id: `7` (number) - Get data for Invoice ID

+ Response 200 (application/json)

## Messages [/admin/voice/messages/{id}]
Work with Message.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Message.

### Retrieve a Message [GET]
Retrieves the Message with the given ID.

+ Response 200 (application/json)
    + Attributes (Message Response)

### Update a Message [PUT]
Update the Message with the given ID.

+ Request (application/json)

        {
            "comment": comment
        }

+ Response 202 (application/json)

### Delete a Message [DELETE]
Delete the Message with the given ID.

+ Response 204

## Statistics [/admin/voice/statistics?service_id={service_id}&from={from}&to={to}&with_formatting={with_formatting}]
Voice statistics

+ Parameters
    + service_id (required, number, `1`) ... The ID of the desired voice service
    + from: `2018-01-01` (string) - Start date of period
    + to: `2019-01-01` (string) - End date of period
    + with_formatting: `true` (boolean) - Format amount and duration fields

### Retrieve statistics [GET]
Retrieve voice statistics grouped by voice types and categories. Field `_comment` in example can not be included to real response.

+ Response 200 (application/json)

        {
            "call": {
                "0": {
                    "_comment": "This element contains totals of records without category",
                    "title": "Calls",
                    "duration": 386,
                    "sum": 0.070,
                    "rate_buy_price": 0,
                    "cdr_buy_price": 0
                },
                "2": {
                    "_comment": "This element contains totals of L-902A(1-4) category #2",
                    "title": "L-902A(1-4)",
                    "duration": 1472,
                    "amount": 0,
                    "sum": 0.51577452,
                    "rate_buy_price": 0,
                    "cdr_buy_price": 0.09046056
                },
                "total": {
                    "_comment": "This element contains totals of all categories",
                    "title": "Total",
                    "sum": 206.73256484,
                    "rate_buy_price": 0,
                    "cdr_buy_price": 209.97441838,
                    "duration": 1066717
                }
            },
            "message": {
                "0": {
                    "title": "SMS",
                    "sum": 0,
                    "rate_buy_price": 0,
                    "cdr_buy_price": 0,
                    "amount": 0
                },
                "4": {
                    "title": "Mesajes",
                    "sum": 0,
                    "rate_buy_price": 0,
                    "cdr_buy_price": 0,
                    "amount": 0
                },
                "total": {
                    "title": "Total",
                    "sum": 0.976,
                    "rate_buy_price": 0,
                    "cdr_buy_price": 0,
                    "amount": 2
                }
            },
            "data": {
                "0": {
                    "title": "Data",
                    "sum": 1.525,
                    "rate_buy_price": 0,
                    "cdr_buy_price": 0,
                    "amount": 200000
                },
                "5": {
                    "title": "Datos",
                    "sum": 0,
                    "rate_buy_price": 0,
                    "cdr_buy_price": 0,
                    "amount": 0
                },
                "total": {
                    "title": "Total",
                    "sum": 2.135,
                    "rate_buy_price": 0,
                    "cdr_buy_price": 0,
                    "amount": 5200000
                }
            }
        }

# Data Structures

## Call Base (object)
+ `start`: `2018-01-20 12:56:39` (string, required) - Call start date
+ `stop`: `2018-01-20 13:00:35` (string, required) - Call end date
+ `call_to`: `555-0134` (string) - Call destination phone number
+ `customer_id`: `19` (number, required) - Customer ID
+ `service_id`: `40` (number, required) - Voice service ID
+ `transaction_id`: `137` (number) - Transaction ID
+ `category`: `3` (number) - Voice category ID. You can find valid values on Dashboard Voice/Categories
+ `source`: `555-0134` (string) - Caller phone number
+ `sell_price`: `0.000000` (number) - Sell price
+ `buy_price`: `0.000000` (number) - Buy price
+ `rate_buy_price`: `0.000000` (number) - Rate buy price
+ `comment`: `comment` (string) - Comment
+ `is_price_from_import`: `0` (number) - Is price from import. Values: 0 or 1

## Call Id (object)
+ id: `1` (number) - Call ID.

## Call Response (Call Base)
+ id: `1` (number) - Call ID.
+ `customer_login` (string) - Customer login
+ `customer_name` (string) - Customer name
+ `amount` `45797638` (number) - Amount
+ `sell_price_total`: `0.000000` (number) - Sell price total
+ `buy_price_total`: `0.000000` (number) - Buy price total

## Data Base (object)
+ `datetime`: `2018-01-20 12:56:39` (string, required) - Date
+ `customer_id`: `19` (number, required) - Customer ID
+ `service_id`: `40` (number, required) - Voice service ID
+ `transaction_id`: `137` (number) - Transaction ID
+ `category`: `3` (number) - Voice category ID. You can find valid values on Dashboard Voice/Categories
+ `source`: `555-0134` (string) - Data source phone number
+ `amount`: `45797638` (number) - Amount
+ `sell_price`: `0.000000` (number) - Sell price
+ `buy_price`: `0.000000` (number) - Buy price
+ `rate_buy_price`: `0.000000` (number) - Rate buy price
+ `comment`: `comment` (string) - Comment
+ `is_price_from_import`: `0` (number) - Is price from import. Values: 0 or 1

## Data Id (object)
+ id: `1` (number) - Data ID.

## Data Response (Data Base)
+ id: `1` (number) - Data ID.
+ `customer_login` (string) - Customer login
+ `customer_name` (string) - Customer name
+ `sell_price_total`: `0.000000` (number) - Sell price total
+ `buy_price_total`: `0.000000` (number) - Buy price total

## Message Base (object)
+ `send_at`: `2018-01-20 12:56:39` (string, required) - Send date
+ `destination` (string) - Message Destination
+ `customer_id`: `19` (number, required) - Customer ID
+ `service_id`: `40` (number, required) - Voice service ID
+ `transaction_id`: `137` (number) - Transaction ID
+ `category`: `3` (number) - Voice category ID. You can find valid values on Dashboard Voice/Categories
+ `source`: `555-0134` (string) - Message source phone number
+ `amount`: `45797638` (number) - Amount
+ `sell_price`: `0.000000` (number) - Sell price
+ `buy_price`: `0.000000` (number) - Buy price
+ `rate_buy_price`: `0.000000` (number) - Rate buy price
+ `comment`: `comment` (string) - Comment
+ `is_price_from_import`: `0` (number) - Is price from import. Values: 0 or 1

## Message Id (object)
+ id: `1` (number) - Data ID.

## Message Response (Message Base)
+ id: `1` (number) - Data ID.
+ `customer_login` (string) - Customer login
+ `customer_name` (string) - Customer name
+ `sell_price_total`: `0.000000` (number) - Sell price total
+ `buy_price_total`: `0.000000` (number) - Buy price total

# Group Administration

## Locations collection [/admin/administration/locations]

### Create a Location [POST]
Creates a new Location.

+ Request (application/json)
    + Attributes (Location Base)

+ Response 201 (application/json)
    + Attributes (Location Id)

### List all Locations [GET]
Returns a list of your Locations.

+ Response 200 (application/json)
    + Attributes (array[Location Response])

## Location [/admin/administration/locations/{id}]
Work with Locations.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Location.

### Retrieve a Location [GET]
Retrieves the Location with the given ID.

+ Response 200 (application/json)
    + Attributes (Location Response)

### Update a Location [PUT]
Update the Location with the given ID.

+ Request (application/json)

        {
            "name": Beta
        }

+ Response 202 (application/json)

### Delete a Location [DELETE]
Delete the Location with the given ID.

+ Response 204

## Administrators collection [/admin/administration/administrators]

### Create an Administrator [POST]
Creates a new Administrator.

+ Request (application/json)
    + Attributes (Administrator Request)

+ Response 201 (application/json)
    + Attributes (Administrator Id)

### List all Administrators [GET]
Returns a list of your Administrators.

+ Response 200 (application/json)
    + Attributes (array[Administrator Response])

## Administrator [/admin/administration/administrators/{id}]
Work with Administrators.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Administrator.

### Retrieve an Administrator [GET]
Retrieves the Administrator with the given ID.

+ Response 200 (application/json)
    + Attributes (Administrator Response)

### Update an Administrator [PUT]
Update the Administrator with the given ID.

+ Request (application/json)

        {
            "name": Second admin
        }

+ Response 202 (application/json)

### Delete an Administrator [DELETE]
Delete the Administrator with the given ID.

+ Response 204

## Partners collection [/admin/administration/partners]

### Create a Partner [POST]
Creates a new Partners.

+ Request (application/json)
  + Attributes (Partner Base)

+ Response 201 (application/json)
  + Attributes (Partner Id)

### List all Partners [GET]
Returns a list of your Partners.

+ Response 200 (application/json)
  + Attributes (array[Partner Response])

## Partner [/admin/administration/partners/{id}]
Work with Partners.

+ Parameters
  + id (required, number, `1`) ... The ID of the desired Partner.

### Retrieve a Partner [GET]
Retrieves the Partner with the given ID.

+ Response 200 (application/json)
  + Attributes (Partner Response)

### Update a Partner [PUT]
Update the Partner with the given ID.

+ Request (application/json)

        {
            "name": Partner name
        }

+ Response 202 (application/json)

### Delete a Partner [DELETE]
Delete the Partner with the given ID.

+ Response 204

# Data Structures

## Location Base (object)
+ name: Alpha (string, required) - Location's name

## Location Response (Location Base)
+ id: `1` (number) - Location ID

## Location Id (object)
+ id: `1` (number) - Location ID

## Administrator Base (object)
+ partner_id: 1 (number) - Partners ID
+ role_name: `administrator` (string) - Administrator`s role name 'administrator', 'super-administrator', 'customer-creator', etc. You can get it at page "Administration / Roles".
+ login: `main` (string, required) - Administrator's login
+ name: `Main` (string, required) - Administrator's name
+ email: `main@email.com` (string, required) - Administrator's email
+ timeout: 1200 (number) - Timeout
+ router_access: `none` (string) - Router access
+ phone: `+420123456879` (string) - Phone
+ avatar_api_url: `admin/config/download/admins_avatar--1` (string) - If administrator has avatar here will be url for downloading it via api
+ download_avatar_link: `https://yourdomain/files?id=1&type=admins_avatar` (string) - If administrator has avatar here will be link for downloading

## Administrator Request (Administrator Base)
+ password: 'fv5d42fe1' (string, required) - Administrator`s password

## Administrator Response (Administrator Base)
+ id: `1` (number) - Administrator ID

## Administrator Id (object)
+ id: `1` (number) - Administrator ID

## Partner Base (object)
+ `name` (string) - Partner name

## Partner Response (object)
+ id: 1 (number) - Partner ID
+ name: `partner_name` (string) - Partner`s name

## Partner Id (object)
+ id: `1` (number) - Partner ID

# Group Logs

## Change statuses & plans collection [/admin/logs/changes]

### List all Change statuses & plans [GET]
Returns a list of your Change statuses & plans records.

+ Response 200 (application/json)
    + Attributes (array[Change statuses & plans Response])

## Search Change statuses & plans [/admin/logs/changes?{params}]
Get list of Change statuses & plans records by parameters.

+ Parameters
    + params (required, string, `http_build_query($search)`) ... Any parameters of record. <br>You should set at least one record`s parameter. <br>This parameters should be converted to query string.<br>For example:<br>$search = [ <br>&emsp;&emsp;'main_attributes' => [<br>&emsp;&emsp;&emsp;&emsp;'date' => ['>', '2018-07-01']<br>&emsp; &emsp;]<br>];<br>

### List Change statuses & plans by parameters [GET]
Returns list of Change statuses & plans records by parameters.

+ Response 200 (application/json)
    + Attributes (array[Change statuses & plans Response])

## Pending statuses collection [/admin/logs/pending-statuses]

### Create a Pending status record [POST]
Creates a new Pending status record.

+ Request (application/json)
    + Attributes (Pending status Base)

+ Response 201 (application/json)
    + Attributes (Pending status Id)

### List all Pending statuses [GET]
Returns a list of your Pending statuses.

+ Response 200 (application/json)
    + Attributes (array[Pending status Response])

## Pending status record [/admin/logs/pending-statuses/{id}]
Work with Pending statuses.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Pending status record.

### Retrieve a Pending status record [GET]
Retrieves the Pending status record with the given ID.

+ Response 200 (application/json)
    + Attributes (Pending status Response)

### Update a Pending status record [PUT]
Update the Pending status record with the given ID.

+ Request (application/json)

        {
            "date": "2018-08-20"
        }

+ Response 202 (application/json)

### Delete a Pending status record [DELETE]
Delete the Pending status record with the given ID.

+ Response 204

## Pending services collection [/admin/logs/pending-services]

### List all Pending services [GET]
Returns a list of your Pending services.

+ Response 200 (application/json)
    + Attributes (array[Pending services Response])

# Data Structures

## Change statuses & plans Response (object)
+ id: `1` (number) - Log record ID
+ customer_id: `2` (number) - Customer ID
+ service_id: `5` (number) - Service ID
+ old_status: `active` (string) - Old status of Customer
+ new_status: `blocked` (string) - New status of Customer
+ date: `2018-07-10` (string) - Date of event
+ time: `10:20:15` (string) - Time of event
+ tariff_type: `internet` (string) - Type of Service tariff. Possible tariff types: `internet`, `voice` or `custom`.
+ old_tariff: `1` (string) - Old Service tariff ID
+ new_tariff: `2` (string) - New Service tariff ID
+ administrator_id: `10` (number) - Administrator ID who changed Customer status or Service tariff

## Pending status Base (object)
+ customer_id: `1` (number, required) - Customer ID
+ date: `2018-08-01` (string, required) - Date when status activated or will be activated
+ status: `blocked` (string, required) - New status of Customer

## Pending status Response (Pending status Base)
+ id: `1` (number) - Record ID
+ done: `0` (string) - Status activated or not?
+ administrator_id: `1` (number) - Administrator ID, who created this record

## Pending status Id (object)
+ id: `1` (number) - Pending status record ID

## Pending services Response (object)
+ id: `1` (number) - Service ID
+ customer_id: `10` (number) - Customer ID
+ tariff_id: `2` (number) - Service Tariff ID
+ description: `Service #1` (string) - Service description
+ unit_price: `10.00` (number) - Service price
+ start_date: `2018-07-01` (string) - Service start date
+ type: `internet` (string) - Service type

# Group Config

## Additional Fields collection [/admin/config/additional-fields/{module}]

+ Parameters
    + module (required, string)
        Module name. List of modules:
        - **admins**: Administrators
        - **partners**: Partners
        - **locations**: Locations
        - **customers**: Customers
        - **api**: API keys
        - **tariffs_internet**: Internet tariffs
        - **tariffs_voice**: Voice tariffs
        - **tariffs_custom**: Recurring tariffs
        - **tariffs_one_time**: One-time plans
        - **bundle**: Bundles
        - **routers**: Routers
        - **voice_devices**: Voice devices
        - **monitoring**: Monitoring
        - **ipv4_networks**: IPv4 Networks
        - **ipv6_networks**: IPv6 Networks
        - **services_internet**: Services (Internet)
        - **services_voice**: Services (Voice)
        - **services_custom**: Services (Custom)
        - **services_bundle**: Services (Bundle)
        - **invoices**: Invoices
        - **statistics**: Statistics
        - **ticket**: Tickets
        - **instant_message**: Messages
        - **templates**: Templates
        - **customer_documents**: Customer documents
        - **monitoring_oid**: SNMP OID
        - **ipv4_networks_ip**: IPv4 Networks IP
        - **cards_prepaid**: Prepaid cards
        - **cards_refill**: Refill cards
        - **routers_sectors**: Routers sectors
        - **routers_mikrotik**: Routers (MikroTik)
        - **cpe**: CPE (MikroTik)
        - **services_voice_calls**: Voice Calls
        - **billing_transactions**: Transactions
        - **payments**: Payments
        - **requests**: Proforma invoices
        - **credit_notes**: Credit Notes
        - **quotes**: Quotes
        - **inventory_items**: Items (Inventory)
        - **inventory_supplier_invoices**: Supplier invoices (Inventory)
        - **inventory_products**: Products (Inventory)
        - **inventory_suppliers**: Suppliers (Inventory)
        - **inventory_vendors**: Vendors (Inventory)
        - **scheduling_project**: Scheduling project
        - **scheduling_task**: Tasks
        - **acs_devices**: ACS devices
        - **module_name**: for your modules

### Create Additional Field [POST]
Creates new Additional Field.

+ Request (application/json)
    + Attributes (Additional Field Base)

+ Response 201 (application/json)
    + Attributes (Additional Field Name)

### List all Additional Fields [GET]
Returns a list of your Additional Fields.

+ Response 200 (application/json)
    + Attributes (array[Additional Field Base])

## Additional Field [/admin/config/additional-fields/{module}--{name}]
Work with Additional Fields.

+ Parameters
    + module (required, string)
        Module name. List of modules:
        - **admins**: Administrators
        - **partners**: Partners
        - **locations**: Locations
        - **customers**: Customers
        - **api**: API keys
        - **tariffs_internet**: Internet tariffs
        - **tariffs_voice**: Voice tariffs
        - **tariffs_custom**: Recurring tariffs
        - **tariffs_one_time**: One-time plans
        - **bundle**: Bundles
        - **routers**: Routers
        - **voice_devices**: Voice devices
        - **monitoring**: Monitoring
        - **ipv4_networks**: IPv4 Networks
        - **ipv6_networks**: IPv6 Networks
        - **services_internet**: Services (Internet)
        - **services_voice**: Services (Voice)
        - **services_custom**: Services (Custom)
        - **services_bundle**: Services (Bundle)
        - **invoices**: Invoices
        - **statistics**: Statistics
        - **ticket**: Tickets
        - **instant_message**: Messages
        - **templates**: Templates
        - **customer_documents**: Customer documents
        - **monitoring_oid**: SNMP OID
        - **ipv4_networks_ip**: IPv4 Networks IP
        - **cards_prepaid**: Prepaid cards
        - **cards_refill**: Refill cards
        - **routers_sectors**: Routers sectors
        - **routers_mikrotik**: Routers (MikroTik)
        - **cpe**: CPE (MikroTik)
        - **services_voice_calls**: Voice Calls
        - **services_voice_messages**: Voice messages
        - **services_voice_data**: Voice data
        - **billing_transactions**: Transactions
        - **payments**: Payments
        - **requests**: Proforma invoices
        - **credit_notes**: Credit Notes
        - **quotes**: Quotes
        - **inventory_items**: Items (Inventory)
        - **inventory_supplier_invoices**: Supplier invoices (Inventory)
        - **inventory_products**: Products (Inventory)
        - **inventory_suppliers**: Suppliers (Inventory)
        - **inventory_vendors**: Vendors (Inventory)
        - **scheduling_project**: Scheduling project
        - **scheduling_task**: Tasks
        - **acs_devices**: ACS devices
        - **module_name**: for your modules
    + name (required, string) ... The name of the desired Additional Field

### Retrieve a Additional Field [GET]
Retrieves the Additional Field with the given name.

+ Response 200 (application/json)
    + Attributes (Additional Field Base)

### Update a Additional Field [PUT]
Update the Additional Field with the given name.

+ Request (application/json)

        {
            "title": REMARK
        }

+ Response 202 (application/json)

### Delete a Additional Field [DELETE]
Delete the Additional Field with the given name.

+ Response 204

## Modules collection [/admin/config/modules]

### Create a Module [POST]
Creates a new Module.

+ Request (application/json)
    + Attributes (Module Base)

+ Response 201 (application/json)
    + Attributes (Module Name)

### List all Modules [GET]
Returns a list of your Modules.

+ Response 200 (application/json)
    + Attributes (array[Module Base])

## Module [/admin/config/modules/{name}]
Work with Modules.

+ Parameters
    + name (required, string) ... The name of the desired Module.

### Retrieve a Module [GET]
Retrieves the Module with the given name.

+ Response 200 (application/json)
    + Attributes (Module Base)

### Update a Module [PUT]
Update the Module with the given name.

+ Request (application/json)

        {
            "title": Access points
        }

+ Response 202 (application/json)

### Delete a Module [DELETE]
Delete the Module with the given name.

+ Response 204

## Module items collection [/admin/config/module/{name}]

### Create Module item [POST]
Creates new Module item. First you must create additional fields for Module. In this example we use module `access_points` and its fields: `title` and `ip`

+ Parameters
    + name (required, string) ... The name of the desired Module.

+ Request (application/json)
    + Attributes (Module item Base)

+ Response 201 (application/json)
    + Attributes (Module item Id)

### List all Module items [GET]
Returns a list of your Module items.

+ Response 200 (application/json)
    + Attributes (array[Module item Response])

## Module item [/admin/config/module/{name}--{id}]
Work with Module item. In this example we use module `access_points` and its additional fields: `title` and `ip`

+ Parameters
    + name (required, string) ... The name of the desired Module.
    + id (required, number) ... The ID of the desired Module item.

### Retrieve Module item [GET]
Retrieves Module item with the given ID.

+ Response 200 (application/json)
    + Attributes (Module item Response)

### Update Module item [PUT]
Update Module item with the given ID.

+ Request (application/json)

        {
            "title": Slave AP
        }

+ Response 202 (application/json)

### Delete Module item [DELETE]
Delete Module item with the given ID.

+ Response 204

## Entry Points Collection [/admin/config/entry-points]

### List all Entry Points [GET]
Returns a list of your Entry Points.

+ Response 200 (application/json)
    + Attributes (array[Entry Point Response])

## Entry Point [/admin/config/entry-points/{id}]
Get Entry Point.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Entry Point.

### Retrieve a Entry Point [GET]
Retrieves the Entry Point with the given ID.

+ Response 200 (application/json)
    + Attributes (Entry Point Response)

## Template Collection [/admin/config/templates]

### Create Template [POST]
Add Template.
+ Request (application/json)
    + Attributes (Template Base)

+ Response 201 (application/json)
    + Attributes (Template Id)

### List all Templates [GET]
Returns a list of your Templates.

+ Response 200 (application/json)
    + Attributes (array[Template Response])

## Template [/admin/config/templates/{id}]
Work with Template.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Template.

### Retrieve a Template [GET]
Retrieves the Template with the given ID.

+ Response 200 (application/json)
    + Attributes (Template Response)

### Update Template [PUT]
Update Internet tariff with the given ID.

+ Request (application/json)

        {
            "title": "Hello Message",
            "type": "tickets"
            "subject": "Hello Message",
            "code": "<h1>Hello World!</h1>"
        }

+ Response 202 (application/json)

### Delete Template [DELETE]
Delete Template with the given ID.

+ Response 204

## Template Rendered with Customer data [/admin/config/templates/{template_id}-render-{customer_id}]
Render Template including Customer data.

+ Parameters
    + template_id (required, number, `40`) ... The ID of the desired Template.
    + customer_id (required, number, `1`) ... The ID of the Customer.

### Retrieve a Template [GET]
Retrieves the rendered Template with the given Template ID and Customer ID.

+ Response 200 (application/json)
    + Attributes (Rendered Template)

## Sms collection [/admin/config/sms]
List sms collection.

### Create and add Sms to queue for sending [POST]
Creates a new Sms and add to queue for sending.

+ Request (application/json)
    + Attributes (Sms Base)

+ Response 201 (application/json)
    + Attributes (Sms Id)

### List all sms [GET]
Returns a list of your Sms.

+ Response 200 (application/json)
    + Attributes (array[Sms Response])

## Forced Sms send [/admin/config/sms/{id}--send]
Forced sending sms to recipient.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Sms.

### Send a Sms [GET]
Forced sending the Sms to recipient.

+ Response 200

## Sms [/admin/config/sms/{id}]
Work with sms.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Sms.

### Retrieve a Sms [GET]
Retrieves the Sms with the given ID.

+ Response 200 (application/json)
    + Attributes (Sms Response)

### Update a Sms [PUT]
Update the Sms with the given ID.

+ Request (application/json)

        {
            "message": Update message
        }

+ Response 202 (application/json)

### Delete a Sms [DELETE]
Delete the Sms with the given ID.

+ Response 204

## Emails collection [/admin/config/mail]
List emails collection.

### Create and add Email to queue for sending [POST]
Creates a new Email and add to queue for sending.

+ Request (application/json)
    + Attributes (Email Base Create)

+ Response 201 (application/json)
    + Attributes (Email Id)

### List all emails [GET]
Returns a list of your Emails.

+ Response 200 (application/json)
    + Attributes (array[Email Response])

## Forced Email send [/admin/config/mail/{id}--send]
Forced sending email to recipient.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Email.

### Send a Email [GET]
Forced sending the Email to recipient.

+ Response 200

## Email [/admin/config/mail/{id}]
Work with email.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Email.

### Retrieve a Email [GET]
Retrieves the Email with the given ID.

+ Response 200 (application/json)
    + Attributes (Email Response)

### Update a Email [PUT]
Update the Email with the given ID.

+ Request (application/json)

        {
            "message": Update message
        }

+ Response 202 (application/json)

### Delete a Email [DELETE]
Delete the Email with the given ID.

+ Response 204

## Download documents [/admin/config/download/{module}--{document_id}?af_module={af_module}&field={field}&cards_type={cards_type}]
+ Parameters
    + module (required, string)
    The module type. Module types list:
        - **af**: Documents from additional fields with type `file`
        - **lead_documents**: Lead documents
        - **customer_documents**: Customer documents
        - **uploads**: Uploaded documents
        - **ticket_attachment**: Ticket attachments
        - **invoices**: Invoice documents
        - **invoices_export**: Invoices export
        - **invoices_charge**: Invoices charge
        - **credit_notes**: Credit note documents
        - **credit_notes_export**: Credit notes export
        - **requests**: Proforma invoice documents
        - **requests_export**: Proforma invoice export
        - **requests_charge**: Proforma invoice charge
        - **payments**: Payment documents
        - **payments_export**: Payments export
        - **cdr**: CDR history documents
        - **inventory_supplier_invoices**: Inventory supplier invoice documents
        - **inventory_items**: Inventory item documents
        - **inventory_products**: Inventory product documents
        - **cards_export**: Cards export
        - **admins_avatar**: Admins avatar (document_id must be id of desired admin)
    + document_id (required, number, `1`) ... The ID of the document
    + af_module (optional, string, `locations`) ... Additional field module. Used only with module **af**
    + field (optional, string, `zip_code`) ... Additional field name. Used only with module **af**
    + `cards_type` (optional, enum[string])
        Cards type. Used only with module **cards_export**
        + Members
            + `CardsPrepaid` - Work with prepaid cards
            + `CardsRefill` - Work with refill cards


### Download document [GET]
Download document.

+ Response 200 (application/json)
    + Attributes (Download Response)

## Inventory Stocks collection [/admin/config/inventory-stocks]

### Create a Inventory Stock [POST]
Creates a new Inventory Stock.

+ Request (application/json)
    + Attributes (Stock Create)

+ Response 201 (application/json)
    + Attributes (Stock Id)

### List all Inventory Stocks [GET]
Returns a list of your Inventory Stocks.

+ Response 200 (application/json)
    + Attributes (array[Stock Response])

## Inventory Stock [/admin/config/inventory-stock/{id}]
Work with Inventory Stocks.

### Retrieve a Inventory Stock [GET]
Retrieves the Inventory Stock with the given ID.

+ Response 200 (application/json)
    + Attributes (Stock Response)

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Inventory Stock.


### Update a Inventory Stock [PUT]
Update the Inventory Stock with the given ID.

+ Request (application/json)

        {
            "name": 'Stock #315955389'
        }

+ Response 202 (application/json)

### Delete a Inventory Stock [DELETE]
Delete the Inventory Stock with the given ID.

+ Response 204

## Config settings [/admin/config/config?module={module}&path={path}&key={key}&partner_id={partner_id}]
+ Parameters
    + module (required, string, `main`)
    The config module. Example modules:
        - **add-on**: Add-on settings module
        - **main**: Base settings module.
        - **finance**: Finance settings module.
    + path (required, string, `portal`)
    Group of settings or add-on name.
        - **splynx_paypal_addon**: Paypal add-on settings group
        - **portal**: Portal settings group
    + key (optional, string, `authentication_field`) ... Config setting name to retrieve
    + partner_id (optional, number, `2`) ... Partner id. Use it for work with per partner settings.

### List settings [GET]
Returns a list of your config settings.

## Access restrictions

Administrators have access to all settings. Customers and unauthorized users have restricted access to config settings (see below for details).

**Accessible settings for customers:**

| Module   |     Path    |  Keys         |
|----------|:-----------:|--------------:|
|   main   |  cap        |       All     |
|   main   | cards       |       All     |
|   main   | portal      |       All     |
|   main   | system      |       All     |
|   main   | preferences |   portal_logo |

**Accessible settings for unauthorized users:**

| Module   |     Path    |  Keys         |
|----------|:-----------:|--------------:|
|   main   | portal      |       reset_password, reset_password_type, authentication_field, portal_title     |

+ Response 200 (application/json)
    + Attributes (Config Response)

### Update settings [PUT /admin/config/config?module={module}&path={path}&partner_id={partner_id}]
Update config settings.

+ Request (application/json)

        {
            "billing_date": 5,
            "billing_due": 15
        }

+ Response 202 (application/json)

## Company Info collection [/admin/config/company-info]

### List all Company Info [GET]
Returns list of your Companies info.

+ Response 200 (application/json)
    + Attributes (array[Company Info])

## Company Info [/admin/config/company-info/{id}]
Work with Company Info.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Company Info (Partner ID).

### Retrieve Company Info [GET]
Retrieves Company Info with the given Partner ID.

+ Response 200 (application/json)
    + Attributes (Company Info)

## CDR import [/admin/config/cdr-import]
Import CDR data.

### Process CDR import [POST]
Process new CDR import.

+ Request (application/json)
    All data must be divided into 3 required elements: data, columns, params.<br>
    Data is array of data to import, columns is selected columns according to columns in data, params is additional params.<br>
    See example below

    + Attributes (CDR Import Base)

    + body

            {
                "data": [
                    [987946521, '2017-10-09 15:11:00', 30, 29.99, 'My comment', 'Interprovincial', '65421324'],
                    [541984435, '2017-10-10 16:55:00', 40, 19.99, 'Second comment', 'Interprovincial',' 8798324'],
                    [842198756, '2017-10-11 05:11:00', 12, 9.99, '', 'Interprovincial', '98795465'],
                ],
                "columns": [
                    'source', 'datetime', 'duration', 'sell_price_with_vat', 'comment', 'category', 'destination'
                ],
                "params": [
                    {"type" : call}
                    {"provider_id" : "1"}
                ]
            }

+ Response 201 (application/json)
    + Attributes (Import Id)

## Additional attributes of Customer profile [/portal/profile/additional-attributes]
Work with additional attributes of Customer profile.

### List all additional attributes [GET]
Returns a list of Customer profile additional attributes.

+ Response 200 (application/json)
    + Attributes (array[Profile Additional Attrbiutes Response])

### Update an attribute [PUT]
Update the Attribute with the given name.

+ Request (application/json)

        {
            "values": ["view"]
        }

+ Response 202 (application/json)

## Scheduling Project Types collection [/admin/config/scheduling-project-types]

### Create a Scheduling Project Types [POST]
Creates a new Scheduling Project Types.

+ Request (application/json)
    + Attributes (Scheduling Project Type Base)

+ Response 201 (application/json)
    + Attributes (Scheduling Project Type Id)

### List all Scheduling Project Types [GET]
Returns a list of your Scheduling Project Types.

+ Response 200 (application/json)
    + Attributes (array[Scheduling Project Type Response])

## Scheduling Project Type [/admin/config/scheduling-project-types/{id}]
Work with Scheduling Project Type.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Scheduling Project Type.

### Retrieve a Scheduling Project Type [GET]
Retrieves the Scheduling Project Type with the given ID.

+ Response 200 (application/json)
    + Attributes (Scheduling Project Type Response)

### Update a Scheduling Project Type [PUT]
Update the Scheduling Project Type with the given ID.

+ Request (application/json)

        {
            "title": 'High priority'
        }

+ Response 202 (application/json)

### Delete a Scheduling Project Type [DELETE]
Delete the Scheduling Project Type with the given ID.

+ Response 204

## Scheduling Project Categories collection [/admin/config/scheduling-project-categories]

### Create a Scheduling Project Categories [POST]
Creates a new Scheduling Project Categories.

+ Request (application/json)
    + Attributes (Scheduling Project Category Base)

+ Response 201 (application/json)
    + Attributes (Scheduling Project Category Id)

### List all Scheduling Project Categories [GET]
Returns a list of your Scheduling Project Categories.

+ Response 200 (application/json)
    + Attributes (array[Scheduling Project Category Response])

## Scheduling Project Category [/admin/config/scheduling-project-categories/{id}]
Work with Scheduling Project Category.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Scheduling Project Category.

### Retrieve a Scheduling Project Category [GET]
Retrieves the Scheduling Project Category with the given ID.

+ Response 200 (application/json)
    + Attributes (Scheduling Project Category Response)

### Update a Scheduling Project Category [PUT]
Update the Scheduling Project Category with the given ID.

+ Request (application/json)

        {
            "title": 'Project Category name'
        }

+ Response 202 (application/json)

### Delete a Scheduling Project Category [DELETE]
Delete the Scheduling Project Category with the given ID.

+ Response 204

## Scheduling Workflow collection [/admin/config/scheduling-workflow]

### Create a Scheduling Workflow [POST]
Creates a new Scheduling Workflow.

+ Request (application/json)
    + Attributes (Scheduling Workflow Base)

+ Response 201 (application/json)
    + Attributes (Scheduling Workflow Id)

### List all Scheduling Workflow [GET]
Returns a list of your Scheduling Workflow.

+ Response 200 (application/json)
    + Attributes (array[Scheduling Workflow Response])

## Scheduling Workflow [/admin/config/scheduling-workflow/{id}]
Work with Scheduling Workflow.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Scheduling Workflow.

### Retrieve a Scheduling Workflow [GET]
Retrieves the Scheduling Workflow with the given ID.

+ Response 200 (application/json)
    + Attributes (Scheduling Workflow Response)

### Update a Scheduling Workflow [PUT]
Update the Workflow with the given ID.

+ Request (application/json)

        {
            "title": 'Workflow name'
        }

+ Response 202 (application/json)

### Delete a Scheduling Workflow [DELETE]
Delete the Scheduling Workflow with the given ID.

+ Response 204

## Scheduling Teams collection [/admin/config/scheduling-teams]

### Create a Scheduling Team [POST]
Creates a new Scheduling Team.

+ Request (application/json)
    + Attributes (Scheduling Team Base)

+ Response 201 (application/json)
    + Attributes (Scheduling Team Id)

### List all Scheduling Teams [GET]
Returns a list of your Scheduling Team.

+ Response 200 (application/json)
    + Attributes (array[Scheduling Team Response])

## Scheduling Team [/admin/config/scheduling-team/{id}]
Work with Scheduling Team.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Scheduling Team.

### Retrieve a Scheduling Team [GET]
Retrieves the Scheduling Team with the given ID.

+ Response 200 (application/json)
    + Attributes (Scheduling Team Response)

### Update a Scheduling Team [PUT]
Update the Team with the given ID.

+ Request (application/json)

        {
            "title": 'Team changed name'
        }

+ Response 202 (application/json)

### Delete a Scheduling Team [DELETE]
Delete the Scheduling Team with the given ID.

+ Response 204

## Scheduling Task Templates collection [/admin/config/scheduling-task-templates]

### Create a Scheduling Task Template [POST]
Creates a new Scheduling Task Tempalate.

+ Request (application/json)
    + Attributes (Scheduling Task Template Base)

+ Response 201 (application/json)
    + Attributes (Scheduling Task Template Id)

### List all Scheduling Task Tempaltes [GET]
Returns a list of your Scheduling Task Templates.

+ Response 200 (application/json)
    + Attributes (array[Scheduling Task Tempalte Response])

## Scheduling Task Tempalte [/admin/config/scheduling-task-templates/{id}]
Work with Scheduling Task Tempalte.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Scheduling Task Tempalte.

### Retrieve a Scheduling Task Tempalte [GET]
Retrieves the Scheduling Task Tempalte with the given ID.

+ Response 200 (application/json)
    + Attributes (Scheduling Task Tempalte Response)

### Update a Scheduling Task Tempalte [PUT]
Update the Scheduling Task Tempalte with the given ID.

+ Request (application/json)

        {
            "title": 'Scheduling Task Template title update'
        }

+ Response 202 (application/json)

### Delete a Scheduling Task Tempalte [DELETE]
Delete the Scheduling Task Tempalte with the given ID.

+ Response 204

## Scheduling Checklist Templates collection [/admin/config/scheduling-checklist-templates]

### Create a Scheduling Checklist Template [POST]
Creates a new Scheduling Checklist Tempalate.

+ Request (application/json)
    + Attributes (Scheduling Checklist Template Add)

+ Response 201 (application/json)
    + Attributes (Scheduling Checklist Template Id)

### List all Scheduling Checklist Tempaltes [GET]
Returns a list of your Scheduling Checklist Templates.

+ Response 200 (application/json)
    + Attributes (array[Scheduling Checklist Tempalte Response])

## Scheduling Checklist Tempalte [/admin/config/scheduling-checklist-templates/{id}]
Work with Scheduling Checklist Tempalte.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired Scheduling Checklist Tempalte.

### Retrieve a Scheduling Checklist Tempalte [GET]
Retrieves the Scheduling Checklist Tempalte with the given ID.

+ Response 200 (application/json)
    + Attributes (Scheduling Checklist Tempalte Response)

### Update a Scheduling Checklist Tempalte [PUT]
Update the Scheduling Checklist Tempalte with the given ID.

+ Request (application/json)

        {
            "title": 'Disconnect client',
        }

+ Response 202 (application/json)

### Delete a Scheduling Checklist Tempalte [DELETE]
Delete the Scheduling Checklist Tempalte with the given ID.

+ Response 204

## Taxes  [/admin/config/taxes]

### List all taxes [GET]
Returns a list of your taxes.

+ Response 200 (application/json)
    + Attributes (array[Tax Response, Tax group Response])

## Taxes [/admin/config/taxes/{id}]
Work with taxes.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired tax

### Retrieve a tax [GET]
Retrieves the tax with the given ID.

+ Response 200 (application/json)
    + Attributes (array[Tax Response])

## CRM pipeline [/admin/config/crm-pipeline]

### Create a CRM pipeline status [POST]
Creates a new pipeline status.

+ Request (application/json)
    + Attributes (CRM Pipeline Status Base)

+ Response 201 (application/json)
    + Attributes (CRM Pipeline Status Id)

### List all CRM pipeline statuses [GET]
Returns a list of your CRM pipeline statuses.

+ Response 200 (application/json)
    + Attributes (array[CRM Pipeline Status Response])

## CRM pipeline status [/admin/config/crm-pipeline/{id}]
Work with CRM pipeline status.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired CRM pipeline status.

### Retrieve a CRM pipeline status [GET]
Retrieves the CRM pipeline status with the given ID.

+ Response 200 (application/json)
    + Attributes (CRM Pipeline Status Response)

### Update a CRM pipeline status [PUT]
Update the CRM pipeline status with the given ID.

+ Request (application/json)

        {
            "name": 'Lost',
        }

+ Response 202 (application/json)

### Delete a CRM pipeline status [DELETE]
Delete the CRM pipeline status with the given ID.
You can`t delete base statuses.

+ Response 204

## Transaction categories [/admin/config/transaction-categories]

### Transaction categories configuration [GET]
Return transaction categories configuration

+ Response 200 (application/json)

        {
            "transaction_type_bundle_activation_fee": {
                "id": "0"
            },
            "transaction_type_bundle_cancellation_fee": {
                "id": "0"
            },
            "transaction_type_bundle_service": {
                "id": "5"
            },
            "transaction_type_bundle_service_discount": {
                "id": "0"
            },
            "transaction_type_custom_service": {
                "id": "1"
            },
            "transaction_type_custom_service_discount": {
                "id": "0"
            },
            "transaction_type_internet_service": {
                "id": "1"
            },
            "transaction_type_internet_service_discount": {
                "id": "0"
            },
            "transaction_type_internet_top_up": {
                "id": "1"
            },
            "transaction_type_inventory_sell": {
                "id": "1"
            },
            "transaction_type_invoice_item": {
                "id": "1"
            },
            "transaction_type_one_time_service": {
                "id": "1"
            },
            "transaction_type_voice_service": {
                "id": "1"
            },
            "transaction_type_voice_service_calls": {
                "id": "1"
            },
            "transaction_type_voice_service_data": {
                "id": "1"
            },
            "transaction_type_voice_service_discount": {
                "id": "0"
            },
            "transaction_type_voice_service_messages": {
                "id": "1"
            }
        }

## States/provinces collection [/admin/config/states-provinces]

### List all states/provinces [GET]
Return a list of your states/provinces.

+ Response 200 (application/json)
    + Attributes (array[States/provinces Response])

## State/province [/admin/config/states-provinces/{id}]
Work with states/provinces.

+ Parameters
    + id (required, number, `1`) ... The ID of the desired state/province.

### Retrieve state/province [GET]
Retrieves the state/province with the given ID.

+ Response 200 (application/json)
    + Attributes (States/provinces Response)

### Update state/province [PUT]
Update the state/province with the given ID.

+ Request (application/json)

        {
            "name": "new state/province name"
            "is_default": 1
        }

+ Response 202 (application/json)

## Labels collection [/admin/config/labels]

### Create a label [POST]
Creates a new label.

+ Request (application/json)
    + Attributes (Label create)

+ Response 201 (application/json)
    + Attributes (Label ID)

### List all labels [GET]
Returns a list of your labels.

+ Response 200 (application/json)
    + Attributes (array[Label response])

## Label [/admin/config/labels/{id}]
Work with labels.

### Retrieve a label [GET]
Retrieves the label with the given ID.

+ Response 200 (application/json)
    + Attributes (Label response)

+ Parameters
    + id (required, number, `1`) ... The ID of the desired label.


### Update a label [PUT]
Update the label with the given ID.

+ Request (application/json)

        {
            "label": 'Label #315955389'
        }

+ Response 202 (application/json)

### Delete a label [DELETE]
Delete the label with the given ID.

+ Response 204

# Group Messengers

## Chat [/admin/messengers/messenger-chats/{id}]
Work with chat.

+ Parameters
    + id (required, number, `1`) ... Desired chat ID.

### Retrieve chat [GET]
Retrieves the chat with the given ID.

+ Response 200 (application/json)
    + Attributes (Messenger chat Response)

## Chat reassign [/admin/messengers/messenger-chats/{id}?action=reassign]
Reassign chant to another admin with the given admin ID.

+ Parameters
    + id (required, number, `1`) ... Desired chat ID.

### Reassign chat [PUT]
Reassign chant to another admin with the given admin ID.

+ Request (application/json)

        {
            "admin_id": 1
        }

+ Response 202 (application/json)

## Chat close [/admin/messengers/messenger-chats/{id}?action=close]
Close chat.

+ Parameters
    + id (required, number, `1`) ... Desired chat ID.

### Close chat [PUT]
Close chat.

+ Response 202 (application/json)

# Data Structures

## Additional Field Base (object)
+ name: `remark` (string, required) - Field name
+ title: `Remark` (string, required) - Field title
+ type: `string` (string, required) - Type. Values: 'string' for 'String', 'integer' for 'Integer', 'decimal' for 'Decimal', 'numeric' for 'Numeric', 'date' for 'Date', 'datetime' for 'Datetime', 'boolean' for 'Boolean', 'select' for 'Select', 'select_multiple' for 'Select multiple', 'password' for 'Password', 'file' for 'File', 'relation' for 'Relation' and 'relation_multiple' for 'Relation multiple'
+ default_value: `none` (string) - Default value
+ min_length: `1` (string) - Min
+ max_length: `128` (string) - Max
+ is_required: `0` (number, required) - Required. Values: 0 or 1
+ is_unique: `0` (number, required) - Unique. Values: 0 or 1
+ is_add: `1` (number, required) - Add. Values: 0 or 1
+ show_in_list: `0` (number, required) - Show in list. Values: 0 or 1
+ searchable: `0` (number, required) - Searchable. Values: 0 or 1
+ readonly: `0` (number, required) - Readonly. Values: 0 or 1
+ disabled: `0` (number, required) - Disabled. Values: 0 or 1
+ hidden: `0` (number) - Hidden. Values: 0 or 1
+ select_values (string) - Select values separated by comma. Required for AF with select types
+ relation_module (string) - Relation module name. Can be any of modules (look in Parameters). Required for AF with select types
+ set_default_value: `1` (number) - Set default value for all items. Values: 0 or 1
+ addon (string) - Addon
+ addon_uri (string) - Addon URI
+ addon_input_type (string) - Addon input type. Values: '', 'button', 'text', 'text_plus_button'. Default: ''
+ decimals: `2` (number) - Decimals. Default: 2. Required for AF with decimal type

## Additional Field Name (object)
+ name: `remark` (string) - Additional Field name

## Module Base (object)
+ name: `access_points` (string, required) - Name
+ title: `AP` (string, required) - Title
+ root: `controllers\admin\NetworkingController` (string, required) - Root. Values: 'controllers\admin\CustomersController', 'controllers\admin\FinanceController' and 'controllers\admin\NetworkingController'
+ type: `simple` (string, required) - Type. Values: 'simple' or 'extended'

## Module Name (object)
+ name: `access_points` (string) - Module name

## Module item Base (object)
+ additional_attributes (array[Module Additional Fields], required) - Module item fields

## Module item Response (Module item Base)
+ id: `1` (number, required) - Module item ID

## Module item Id (object)
+ id: `1` (number, required) - Module item ID

## Module Additional Fields (object)
+ title: `Main AP` (string) - Title
+ ip: `192.168.1.145` (string) - IP

## Entry Point Response (object)
+ id: `1` (number) - ID of the Entry Point
+ module: `splynx_paypal_addon` (string, required) - Module name of the Entry Point
+ place: 'portal' (enum[string], required)
    Where the Entry Point placed
    + Members
        + `portal` - Customers portal
        + `admin` - Administration portal
+ type: `action_link` (enum[string], required)
    Type of the Entry Point
    + Members
        + `menu_link` - Link in menu
        + `code` - Code
        + `action_link` - Link in actions
        + `tab` - Tab

+ size: `large` (enum[string], required)
    Modal window size. Used only for Entry Points with type `action_link`.
    + Members
        + `extra_small` - Modal width is 300 px
        + `small` - Modal width is 450 px
        + `medium` - Modal width is 600 px
        + `large` - Modal width is 900 px
        + `extra_large` - Modal width is 1200 px
+ title: `Pay by Paypal` (string) - Title of the Entry Point
+ root: `controllers\portal\DashboardController` (string) - Root path to controller. Required only if type is not `action_link`.
+ model: `Invoices` (string) - Model for attaching given Entry Point. Required only for type `action_link`.
+ icon: `fa-university` (string) - Icon which shows in actions list or menu
+ background: `#d88386` (string) - Background of menu link
+ url: `/paypal/pay-invoice` (string) - Url that will be opened by click of the Entry Point. Required only if type is not `code`.
+ code (string) - Code of the Entry Point. Required only if type is `code`.
+ partners (array[string]) - Partners IDs who have access to this Entry Point
+ name: `paypal_rb_invoice` (string, required) - Name of the Entry Point
+ location: `after_content` (enum[string], required)
    Location where the Entry Point code placed.
    + Members
        + `before_content` - Place code before main content
        + `after_content` - Place code after main content
+ enabled: `true` (boolean) - The Entry Point is enabled?
+ location_geo (array[string]) - Splynx locations for which this Entry Point is allowed.
+ payment_type (array[string]) - Payment methods for which this Entry Point is allowed.
+ payment_account_id (string) - Payment account ID for which this Entry Point is allowed.

## Template Base (object)
+ title: `Template title` (string, required) - Unique title of template
+ type: `mail` (enum[string], required) - Template category
    + Members
        + `customer-portal` - Customer portal
        + `inventory-notifications-mail` - Inventory email
        + `inventory-notifications-sms` - Inventory SMS
        + `invoice-pdf` - Invoice PDF
        + `mail` - Email
        + `sms` - SMS
        + `documents` - Documents
        + `cards` - Vouchers
        + `payment-calendar` - Payment calendars
        + `payment-receipt` - Payment receipts
        + `request-pdf` - Proforma Invoice PDF
        + `reminder-mail` - Reminder email
        + `reminder-sms` - Reminder SMS
        + `monitoring-notification-mail` - Monitoring notification email
        + `monitoring-notification-sms` - Monitoring notification SMS
        + `exports` - Finance exports
        + `tickets` - Tickets
        + `tickets-sms` - Tickets SMS
        + `ticket-automation` - Ticket Automation
        + `mail_cap` - Email CAP
        + `sms_cap` - SMS CAP
        + `internal` - Internal
        + `mail_fup` - Email FUP
        + `sms_fup` - SMS FUP
        + `report_statements` - Report statements
        + `quote-pdf` - Quote PDF
        + `scheduling-notifications-mail` - Scheduling notifications email
        + `scheduling-notifications-sms` - Scheduling notifications SMS
        + `crm_notifications` - CRM Notifications
        + `comment_reminders` - Comment reminders notification
        + `gdpr-notification` - GDPR notification
        + `terms` - Terms & conditions
        + `mention_notifications_mail` - Mention notifications
        + `credit-note-pdf` - Credit Note PDF
        + `service_order` - Service order
+ subject: `Template subject` (string, optional) -
+ description: `Template description` (string) -
+ code: `Template body` (string) - HTML

## Template Id (object)
+ id: `1` (number, required) - Template ID

## Template Response (object)
+ id: `1` (number, required) - Template ID
+ title: `Template title` (string) - Title
+ type: `mail` (string) - Type
+ description: `About template` (string) - Description

## Sms Base (object)
+ type: `message` (string, required) - Sms type: 'message', 'test', 'monitoring', 'add-on', 'ticket'.
+ message_id: `10` (number) - Message ID.
+ customer_id: `1` (number) - Customer ID.
+ status: `sent` (string) - Sms status: 'new', 'sending', 'sent', 'error', 'expired'. Default value 'new'.
+ datetime_added: `2017-01-01 00:00:00` (string) - Added datetime. Format: 'YYYY-MM-DD HH:MM:SS'.
+ datetime_start_sending: `2017-01-01 00:00:00` (string) - Sending datetime. Format: 'YYYY-MM-DD HH:MM:SS'.
+ datetime_sent: `2017-01-01 00:00:00` (string) - Sent datetime. Format: 'YYYY-MM-DD HH:MM:SS'.
+ recipient: `38094736578` (string, required) - Recipient phone.
+ message: `Sms message.` (string, required) - Sms message.

## Sms Response (Sms Base)
+ id: `1` (number, required) - Sms ID

## Sms Id (object)
+ id: `1` (number, required) - Sms ID

## Email Base (object)
+ type: `message` (string, required) - Email type: 'message', 'test', 'monitoring', 'add-on', 'ticket'.
+ subject: `Reminder 1` (string, required) - Email subject.
+ message_id: `50` (number) - Message ID.
+ bcc: `template@mail.box,template2@mail.box` (string) - BCC Email copy.
+ cc: `template@mail.box,template2@mail.box` (string) - CC Email copy.
+ customer_id: `1` (number) - Customer ID.
+ from: `info@splynx.com` (string) - Email address used at the time of sending.
+ status: `sent` (string) - Email status: 'new', 'sending', 'sent', 'error', 'expired'. Default value 'new'.
+ datetime_added: `2017-01-01 00:00:00` (string) - Added datetime. Format: 'YYYY-MM-DD HH:MM:SS'.
+ datetime_start_sending: `2017-01-01 00:00:00` (string) - Sending datetime. Format: 'YYYY-MM-DD HH:MM:SS'.
+ datetime_sent: `2017-01-01 00:00:00` (string) - Sent datetime. Format: 'YYYY-MM-DD HH:MM:SS'.
+ recipient: `recipient@splynx.com` (string, required) - Recipient email.
+ message: `Email message` (string, required) - Email message.

## Email Base Create (object)
+ type: `message` (string, required) - Email type: 'message', 'test', 'monitoring', 'add-on', 'ticket'.
+ subject: `Reminder 1` (string, required) - Email subject.
+ message_id: `50` (number) - Message ID.
+ bcc: `template@mail.box,template2@mail.box` (string) - BCC Email copy.
+ cc: `template@mail.box,template2@mail.box` (string) - CC Email copy.
+ customer_id: `1` (number) - Customer ID.
+ from: `info@splynx.com` (string) - Email address used at the time of sending.
+ status: `sent` (string) - Email status: 'new', 'sending', 'sent', 'error', 'expired'. Default value 'new'.
+ datetime_added: `2017-01-01 00:00:00` (string) - Added datetime. Format: 'YYYY-MM-DD HH:MM:SS'.
+ datetime_start_sending: `2017-01-01 00:00:00` (string) - Sending datetime. Format: 'YYYY-MM-DD HH:MM:SS'.
+ datetime_sent: `2017-01-01 00:00:00` (string) - Sent datetime. Format: 'YYYY-MM-DD HH:MM:SS'.
+ recipient: `recipient@splynx.com` (string, required) - Recipient email.
+ message: `Email message` (string, required) - Email message.
+ attachments (array[Email Attachments Base]) - Attachments of email.

## Email Attachments Base (object)
+ type: `file` (string, required) - Email attachments type: 'file', 'invoice', 'request', 'document', 'quote', 'payment', 'credit_note', 'scheduling_task_comment_attachment', 'ticket_attachment'.
+ id: `4` (number, required) - attachment id.

## Email Response (Email Base)
+ id: `1` (number, required) - Email ID

## Email Id (object)
+ id: `1` (number, required) - Email ID

## Rendered Template (object)
+ result: `Rendered Template` (string) - Rendered Template

## Download Response (object)
+ name: `test_document.pdf` (string) - Documents name
+ content_type: `application\/pdf` (string) - Content type
+ content: `VBERi0xLjQKJeLjz9MKMyAwIG9iago8PC9UeXBlIC9QYWdlC...` (string) - Document content encoded in  base64 format

## Stock Base (object)
+ `name`: `Stock #315955388` (string, required) - Stock name

## Stock Create (Stock Base)
+ id: `1` (number, required) - Stock ID

## Stock Response (Stock Base)
+ `id`: `1` (number) - Inventory Stock ID
+ `name`: `Stock #315955388` (string) - Stock name

## Stock Id (object)
+ id: `1` (number) - Inventory Stock ID

## Config Response (object)
+ ask_password: `true` (boolean) - Example config param
+ top_up_enabled: `true` (boolean) - Example config param
+ `...`: `And other settings according to module and path` (string) - And other settings according to module and path

## Company Info (object)
+ id: `1` (number) - Partner ID
+ invoice_template_id: `5` (number) - Invoice template id
+ request_template_id: `6` (number) - Proforma invoice template id
+ receipt_template_id: `9` (number) - Receipt template id
+ reminder_mail_template_id: `8` (number) - Reminder mail template id
+ reminder_sms_template_id: `7` (number) - Reminder sms template id
+ report_statements_template_id: `11` (number) - Report statements template id
+ company_name: `Your company name` (string) - Company name
+ street_1: `Street one` (string) - Street
+ street_2: `Street two` (string) - Street (additional)
+ zip: `12345` (string) - ZIP code
+ city: `Prague` (string) - City
+ country: `Czech Republic` (string) - Country
+ iso_country_code: `CZ` (string) - ISO country code
+ email: `info@mycompany.box` (string) - Email
+ phone: `+420123456879` (string) - Phone number
+ company_id: `123456` (string) - Company ID
+ company_vat: `111111` (string) - Company VAT
+ vat_percent: `15.55` (number) - VAT %
+ bank_account: `123321` (string) - Bank Account
+ bank_name: `Bank Name` (string) - Bank Name
+ bank_address: `Street 3` (string) - Bank Address
+ splynx_url: `https://your-company.example.com/` (string) - URL of billing (Splynx)
+ partner_percent: `1.00` (number) - Partner's percent (%)
+ file_logo: `1` (number) - Partner logo (id)

## CDR Import Base (object)
+ source: `952743688` (string, required) - Phone number that was made the voice operation
+ datetime: `2017-01-01 00:00:00` (string) - Date and time of the voice operation. **Required** if 'date' and 'time' fields are not used separately
+ date: `2017-01-01` (string) - Date of the voice operation. **Required** if the 'datetime' field is not used
+ time: `0000:00:00` (string) - Time of the voice operation. **Required** if the 'datetime' field is not used
+ sell_price_with_vat: `10.00` (number) - Sell price (with VAT)
+ sell_price_without_vat: `10.00` (number) - Sell price (without VAT)
+ buy_price_with_vat: `10.00` (number) - Buy price (with VAT)
+ buy_price_without_vat: `10.00` (number) - Buy price (without VAT)
+ category: `Usual` (string) - Category of the voice operation
+ comment: `Some info` (string) - Comment to the voice operation
+ type: `call` (string, required) - Voice type (in params): 'call', 'message', 'data', 'mixed'
+ destination: `852733677` (string) - Where the voice operation was made. **Required** and **available** only for 'data' or 'mixed' type
+ duration: `30` (number) - Duration of the voice operation in seconds. **Required** and **available** only for 'call' or 'mixed' type
+ amount: `3` (number) - Count of sms or traffic. **Required** and **available** only for 'data', 'message' or 'mixed' type
+ prefix_title: `prefix` (string) - Prefix title
+ data_unit: `mb` (string) - Unit of the data (in params): 'b', 'kb', 'mb', 'gb'. **Required** and **available** only for 'data' or 'mixed' type
+ provider_id: `1` (number) - ID of the provider from system config (in params)

## Import Id (object)
+ id: `1` (number) - CDR import ID

## Profile Additional Attrbiutes Response (Additional Field Base)
+ values: `view`, `edit` (array[string]) - Allowed actions for customer with this attribute
+ can_be_edited: `true` (boolean) - Whether this attribute can be edited

## Scheduling Project Type Base (object)
+ title: `Low Priority` (string, required) - Scheduling Project Type title, min length: 3, max length: 64
+ delete: `1` (number) - Permission for delete or edit type. Values 1, 0. Default: 1.

## Scheduling Project Type Response(Scheduling Project Type Base)
+ id: `1` (number, required) - Project ID

## Scheduling Project Type Id (object)
+ id: `1` (number, required) - Project ID

## Scheduling Project Category Base (object)
+ title: `First project category` (string, required) - Scheduling Project Category title, min length: 3, max length: 64
+ delete: `1` (number) - Permission for delete or edit category. Values 1, 0. Default: 1.

## Scheduling Project Category Response(Scheduling Project Category Base)
+ id: `1` (number, required) - Project ID

## Scheduling Project Category Id (object)
+ id: `1` (number, required) - Project ID

## Scheduling Workflow Base (object)
+ title: `First workflow` (string, required) - Scheduling Workflow title, min length: 3, max length: 64
+ delete: `1` (number) - Permission for delete or edit workflow. Values 1, 0. Default: 1.
+ items (array[Scheduling Workflow Item New, Scheduling Workflow Item In Progress, Scheduling Workflow Item Done], required) - Items of Workflow. At least one item has to be added to each stage!

## Scheduling Workflow Response(Scheduling Workflow Base)
+ id: `1` (number, required) - Workflow ID

## Scheduling Workflow Id (object)
+ id: `1` (number, required) - Workflow ID

## Scheduling Workflow Item New (object)
+ title: `New` (string, required) - Scheduling Workflow  item title, min length: 3, max length: 64
+ position: `1` (number) - Item position. Should be unique to every workflow`s item
+ stage: `new` (string) - Item stage: 'new', 'in_progress', 'done'. Default: 1.
+ delete: `1` (number) - Permission for delete or edit workflow item. Values 1, 0. Default: 1.

## Scheduling Workflow Item In Progress (object)
+ title: `In progress` (string, required) - Scheduling Workflow  item title, min length: 3, max length: 64
+ position: `2` (number) - Item position. Should be unique to every workflow`s item
+ stage: `in_progress` (string) - Item stage: 'new', 'in_progress', 'done'. Default: 1.
+ delete: `1` (number) - Permission for delete or edit workflow item. Values 1, 0. Default: 1.

## Scheduling Workflow Item Done (object)
+ title: `Done` (string, required) - Scheduling Workflow  item title, min length: 3, max length: 64
+ position: `3` (number) - Item position. Should be unique to every workflow`s item
+ stage: `done` (string) - Item stage: 'new', 'in_progress', 'done'. Default: 1.
+ delete: `1` (number) - Permission for delete or edit workflow item. Values 1, 0. Default: 1.

## Scheduling Team Base (object)
+ title: `Team name` (string, required) - Scheduling Team title, min length: 3, max length: 64
+ `partner_id`: `0` (number) - Partner id for team. If partner_id is 0 then will be 'Any'
+ members: 1,2 (array[number], required) - Team members. IDs of admins

## Scheduling Team Response(Scheduling Team Base)
+ id: `1` (number, required) - Team ID

## Scheduling Team Id (object)
+ id: `1` (number, required) - Team ID

## Scheduling Task Template Base
+ title: `Scheduling Task Template title` (string, required) - Scheduling Task Template title, min length: 3, max length: 64
+ task_title: `Scheduling Task title` (string, required) - Task title, min length: 3, max length: 64
+ task_description: `Task description` (string) - Scheduling Task Template description
+ task_project_id: `1` (number) - Scheduling Project ID
+ task_assigned_to: `assigned_to_anyone` (string) - Assigned to: 'assigned_to_anyone', 'assigned_to_administrator', 'assigned_to_team'. Default: 'assigned_to_anyone'
+ task_assigned_to_id: `1` (number) - Assigned to id
+ task_checklist_template_id: `1` (number) - Task checklist template id
+ task_priority: `priority_low` (string) - Task priority: 'priority_low', 'priority_medium', 'priority_high'
+ delete: `1` (number) - Permission for delete or edit template item. Values 1, 0. Default: 1.

## Scheduling Task Tempalte Response (Scheduling Task Template Base)
+ id: `1` (number) - Scheduling Task Tempalte ID

## Scheduling Task Template Id (object)
+ id: `1` (number, required) - Scheduling Task Template ID

## Scheduling Checklist Template Base
+ title: `Connect client` (string, required) - Scheduling Checklist Template title, min length: 3, max length: 64
+ delete: `1` (number) - Permission for delete or edit template item. Values 1, 0. Default: 1.

## Scheduling Checklist Template Add (Scheduling Checklist Template Base)
+ items (array[Scheduling Checklist Template Item], required) - Items of Scheduling Checklist Template

## Scheduling Checklist Tempalte Response (Scheduling Checklist Template Base)
+ id: `1` (number) - Scheduling Checklist Tempalte ID
+ items (array[Scheduling Checklist Template Item Response], required) - Items of Scheduling Checklist Template

## Scheduling Checklist Template Id (object)
+ id: `1` (number, required) - Scheduling Checklist Template ID

## Scheduling Checklist Template Item (object)
+ name: 'Prepare materials / tools'
+ delete: `1` (number) - Permission for delete or edit checklist template item. Values 1, 0. Default: 1.

## Scheduling Checklist Template Item Response (Scheduling Checklist Template Item)
+ id: `1` (number, required) - Scheduling Checklist Template Item ID
+ checklist_template_id: `1` (number, required) - Scheduling Checklist Template ID

## Customer Bonus Traffic Counter Id (object)
+ id: `1` (number, required) - Internet Service ID

## Tax Response(object)
+ id: 1 (number, required) - Tax ID
+ name: default (string, required) - Tax name
+ rate: 2 (number, required) - Tax name
+ type: single (string, required) - Tax type
+ archived: 0 (number, required) - Tax archived
+ accounting_tax_rates_id: 29 (number, required) - Accounting tax rates id
+ einvoicing_tax_rates_id: 0 (number, required) - Einvoicing tax rates id

## Tax group Response(object)
+ id: 12 (number, required) - Tax ID
+ name: Group tax (string, required) - Tax name
+ rate: 5 (number, required) - Tax name
+ type: group (string, required) - Tax type
+ archived: 0 (number, required) - Tax archived
+ accounting_tax_rates_id: 0 (number, required) - Accounting tax rates id
+ einvoicing_tax_rates_id: 0 (number, required) - Einvoicing tax rates id
+ items: items (array[Tax group item one, Tax group item two ], required)

## Tax group item one (object)
+ id: 9,
+ type: net,
+ apply_to_all_previous: 0,
+ position: 1

## Tax group item two (object)
+ id: 10,
+ type: tax,
+ apply_to_all_previous: 0,
+ position: 2

## Customer Bonus Traffic Counter (object)
+ service_id: `1` (number, required) - Internet Service ID
+ date: `2018-01-01` (string, required) - Date for traffic statistics
+ up: `1` (number, required) - Number of bytes was uploaded
+ down: `1` (number, required) - Number of bytes was downloaded

## CRM Pipeline Status Base
+ name: `New` (string, required) - CRM pipeline status name
+ stage: `crm_lead_stage_new` (string) - CRM status stage: 'crm_lead_stage_new', 'crm_lead_stage_in_progress', 'crm_lead_stage_qualified', 'crm_lead_stage_unqualified'. Default: 'crm_lead_stage_new'
+ label: `default` (string) - CRM status label: 'default', ''primary', 'success', 'info', 'warning', 'danged', 'pending'. Default: 'default',
+ bg_color: `rgba(255,255,255,1)` (string) - CRM status background color in rgba format, used in tables. Default: 'rgba(255,255,255,1)'
+ is_bg_color: `false` (boolean) - If set to true then 'bg_color' will be used in tables. Default: 'false'
+ due_days: 3 (number) - The number of days after which you should change the status. Otherwise the lead will overdue. Default: 0

## CRM Pipeline Status Id (object)
+ id: `1` (number, required) - CRM pipeline status ID

## CRM Pipeline Status Response (CRM Pipeline Status Base)
+ id: `1` (number, required) - CRM pipeline status ID
+ is_base: `1` (number) - If it is base status here will be 1. Values 1, 0.
+ position: 8 (number) - The position of the status in list.

## Traffic counter (object)
+ service_id: `1` (number) - Internet service id.
+ date: `2018-01-15` (string) - Date for traffic statistics.
+ up: `333` (number) - Number of bytes was uploaded.
+ down: `444` (number) - Number of bytes was downloaded.

## Traffic counter create Response(object)
+ service_id: `1` (number, required) - Internet Service ID

## Mobile notification token Base (object)
+ customer_id: `1` (number) - Customer ID
+ token: `2dbf3280cf9sb3b8a7c15201c76b9s1` (string, required) - Token
+ created_at: `2019-09-23 14:54:15` (string) - Datetime

## Mobile notification tokens Response(Mobile notification token Base)
+ id: `1` (number, required) - Customer ID

## Mobile notification token Id (object)
+ id: `1` (number, required) - Customer ID

## Mobile notification token Response(object)
+ customer_id: `1` (number) - Customer ID
+ token: `2dbf3280cf9sb3b8a7c15201c76b9s1` (string, required) - Token
+ created_at: `2019-09-23 14:54:15` (string) - Datetime

## Ticket feedbacks Response (object)
+ ticket_id: `1` (number) - Ticket feedbacks ID
+ form: 1 (number) - Ticket feedbacks form, yes (1) or no (0). Default (null)
+ content: 0 (number) - Ticket feedbacks content, yes (1) or no (0). Default (null)
+ feedback: 0 (number) - Ticket feedbacks feedback, yes (1) or no (0). Default (null)
+ timing: 0 (number) - Ticket feedbacks timing, yes (1) or no (0). Default (null)
+ archived: 0 (number) - Archive status ticket feedbacks, yes (1) or no (0). Default (null)
+ comment: `new item` (string) - Ticket feedbacks comment.

## States/provinces Response (object)
+ id: `1` (number) - State/province ID
+ code: `code` (string) - State/province code
+ name: `name` (string) - State/province name
+ date_changed: `2024-10-08` (string) - Date when state/province was changed
+ is_default: `0` (number) - Is default state/province

## Messenger chat Response (object)
+ id: `1` (number) - Chat ID
+ messenger_id: `1` (number) - Messenger ID
+ customer_id: `1` (number) - Customer ID
+ assign_id: `1` (number) - Admin ID
+ phone: `420123456879` (string) - Phone number
+ profile_name: `John Doe` (string) - Profile name
+ active: `false` (boolean) - Active status
+ created_at: `2023-12-04 05:45:02` (string) - Datetime

## Label ID (object)
+ id: `1` (number) - Label ID

## Label create (object)
+ module: `customers` (enum[string], required) - Label module
    + Members
        + `ticket`
        + `scheduling_task`
        + `customers`
+ label: `label title` (string, required) - Label title
+ color: `#68e637` (string) - Label color

## Label response (Label create)
+ id: `1` (number) - Label ID
+ textColor: `#fff` (string) - Label title color