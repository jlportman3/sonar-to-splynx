#!/usr/bin/env python3
"""Inventory the GraphQL backup tables and capture basic metadata."""

from __future__ import annotations

import os
from typing import Dict, List, Tuple

from dotenv import load_dotenv
from psycopg import connect

OUTPUT_PATH = "docs/mapping/source_inventory.md"

load_dotenv()

BACKUP_DATABASE_URL = os.getenv("BACKUP_DATABASE_URL")
DB_PARAMS: Dict[str, str] = {
    "host": os.getenv("BACKUP_DB_HOST", ""),
    "port": os.getenv("BACKUP_DB_PORT", ""),
    "dbname": os.getenv("BACKUP_DB_NAME", ""),
    "user": os.getenv("BACKUP_DB_USER", ""),
    "password": os.getenv("BACKUP_DB_PASSWORD", ""),
}


def resolve_connection_kwargs() -> Dict[str, str]:
    if BACKUP_DATABASE_URL:
        return {"conninfo": BACKUP_DATABASE_URL}
    if all(DB_PARAMS.values()):
        return DB_PARAMS
    raise ValueError(
        "Missing Postgres connection details. Set BACKUP_DATABASE_URL or BACKUP_DB_* variables."
    )


def fetch_inventory() -> List[Tuple[str, str, int, List[str]]]:
    conn_kwargs = resolve_connection_kwargs()
    results: List[Tuple[str, str, int, List[str]]] = []
    with connect(**conn_kwargs) as conn:
        with conn.cursor() as cur:
            cur.execute(
                "SELECT query_name, table_name FROM backup_tables ORDER BY query_name"
            )
            rows = cur.fetchall()
        for query_name, table_name in rows:
            with conn.cursor() as cur:
                cur.execute(
                    f"SELECT COUNT(*) FROM {table_name}"
                )
                count = cur.fetchone()[0]
                cur.execute(
                    f"SELECT data FROM {table_name} LIMIT 1"
                )
                sample = cur.fetchone()
            keys: List[str] = []
            if sample and isinstance(sample[0], dict):
                keys = sorted(sample[0].keys())
            results.append((query_name, table_name, count, keys))
    return results


def write_report(entries: List[Tuple[str, str, int, List[str]]]) -> None:
    os.makedirs(os.path.dirname(OUTPUT_PATH), exist_ok=True)
    with open(OUTPUT_PATH, "w", encoding="utf-8") as fh:
        fh.write("# Sonar GraphQL Backup Inventory\n\n")
        fh.write(
            "Generated by `scripts/inventory_backup_tables.py`. Counts reflect the current Postgres snapshot.\n\n"
        )
        fh.write("| Query | Table | Rows | Sample Fields |\n")
        fh.write("| --- | --- | ---: | --- |\n")
        for query_name, table_name, count, keys in entries:
            sample = ", ".join(keys[:8])
            if len(keys) > 8:
                sample += ", …"
            fh.write(
                f"| `{query_name}` | `{table_name}` | {count} | {sample or '—'} |\n"
            )


def main() -> None:
    entries = fetch_inventory()
    write_report(entries)
    print(f"Wrote inventory for {len(entries)} collections to {OUTPUT_PATH}")


if __name__ == "__main__":
    main()
